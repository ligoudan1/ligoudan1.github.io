<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我司前端规范</title>
    <url>/2020/04/04/%E6%88%91%E5%8F%B8%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="前端开发规范"><a href="#前端开发规范" class="headerlink" title="前端开发规范"></a>前端开发规范</h1><h2 id="框架-vue"><a href="#框架-vue" class="headerlink" title="框架/vue"></a>框架/vue</h2><h3 id="规范目的"><a href="#规范目的" class="headerlink" title="规范目的"></a>规范目的</h3><p>为提高团队协作效率</p>
<p>便于后台人员添加功能及前端后期优化维护</p>
<p>输出高质量的文档</p>
<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>为了让大家书写可维护的代码，而不是一次性的代码</p>
<p>让团队当中其他人看你的代码能一目了然</p>
<p>甚至一段时间时候后你再看你某个时候写的代码也能看</p>
<h3 id="普通命名规范"><a href="#普通命名规范" class="headerlink" title="普通命名规范"></a>普通命名规范</h3><p>命名方法 ：驼峰命名法</p>
<p>命名规范 ：</p>
<p>​        命名必须是跟需求的内容相关的词，比如说我想申明一个变量，用来表示我的学校，那么我们可以这样定义const mySchool = “我的学校”;</p>
<p>​        命名是复数的时候需要加s,比如说我想申明一个数组，表示很多人的名字，那么我们可以这样定义const names = new Array();</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul>
<li><p>命名方法 : 全部大写</p>
</li>
<li><p>命名规范 : 使用大写字母和下划线来组合命名，下划线用以分割单词。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX_COUNT = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">'https://www.baidu.com/'</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="组件文件"><a href="#组件文件" class="headerlink" title="组件文件"></a>组件文件</h3><p>组件的名字应该始终是以连接线（-）连接的单词，一方面可与组件名一致，使项目更加清晰，另一方面这样的写法对编辑器引入也很友好。</p>
<p>例如</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反例</span></span><br><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">└── components</span><br><span class="line">    ├── pageheader</span><br><span class="line">    ├── pagearticle</span><br><span class="line">    └── pageheader</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正例</span></span><br><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">└── components</span><br><span class="line">    ├── page-header</span><br><span class="line">    ├── page-article</span><br><span class="line">    └── page-header</span><br></pre></td></tr></table></figure>

<h3 id="组件名"><a href="#组件名" class="headerlink" title="组件名"></a>组件名</h3><p>组件名为多个单词，使用驼峰命名法，避免与 HTML 标签冲突，并且结构更加清晰（每个组件都应有其对应的组件名，组件名由组件文件名转换而来）。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">组件文件名：page-index</span><br><span class="line">组件名：<span class="string">"pageIndex"</span></span><br></pre></td></tr></table></figure>

<h3 id="单文件组件的元素顺序"><a href="#单文件组件的元素顺序" class="headerlink" title="单文件组件的元素顺序"></a>单文件组件的元素顺序</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反例</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">/</span>* JavaScript *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 正例</span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">/* JavaScript */</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">/</span>* CSS *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="指令缩写"><a href="#指令缩写" class="headerlink" title="指令缩写"></a>指令缩写</h3><p>为了统一规范始终使用指令缩写，使用<code>v-bind</code>，<code>v-on</code>并没有什么不好，这里仅为了统一规范。</p>
<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;input <span class="symbol">:value=<span class="string">"mazeyUser"</span></span> @click=<span class="string">"verifyUser"</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="元素特性顺序"><a href="#元素特性顺序" class="headerlink" title="元素特性顺序"></a>元素特性顺序</h3><p>原生属性放前面，指令放后面</p>
<p>如下所示：</p>
<ul>
<li>class</li>
<li>id,ref</li>
<li>name</li>
<li>data-*</li>
<li>src, for, type, href,value,max-length,max,min,pattern</li>
<li>title, alt，placeholder</li>
<li>aria-*, role</li>
<li>required,readonly,disabled</li>
<li>is</li>
<li>v-for</li>
<li>key</li>
<li>v-if</li>
<li>v-else-if</li>
<li>v-else</li>
<li>v-show</li>
<li>v-cloak</li>
<li>v-pre</li>
<li>v-once</li>
<li>v-model</li>
<li>v-bind,:</li>
<li>v-on,@</li>
<li>v-html</li>
<li>v-text</li>
</ul>
<h3 id="组件选项顺序"><a href="#组件选项顺序" class="headerlink" title="组件选项顺序"></a>组件选项顺序</h3><ol>
<li><p>-路由操作（beforeRouteEnter等）</p>
</li>
<li><ul>
<li>name</li>
</ul>
</li>
<li><p>- components</p>
</li>
<li><p>- props</p>
</li>
<li><p>- data</p>
</li>
<li><p>- filter</p>
</li>
<li><p>- computed</p>
</li>
<li><p>- watch</p>
</li>
<li><p>- created（等其他生命周期函数）</p>
</li>
<li><p>- metods</p>
</li>
</ol>
<h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>Prop 的定义应该尽量详细的指定其类型、默认值和验证。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 反例</span><br><span class="line">props: [&apos;attrM&apos;, &apos;attrA&apos;, &apos;attrZ&apos;]</span><br><span class="line"></span><br><span class="line">// 正例</span><br><span class="line">props: &#123;</span><br><span class="line">    attrM: Number,</span><br><span class="line">    attrA: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    attrZ: &#123;</span><br><span class="line">        type: Object,</span><br><span class="line">        // 数组/对象的默认值应该由一个工厂函数返回</span><br><span class="line">        default: function () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                msg: &apos;成就你我&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    attrE: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        validator: function (v) &#123;</span><br><span class="line">            return !([&apos;success&apos;, &apos;fail&apos;].indexOf(v) === -1) </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释单独一行，不要在代码后的同一行内加注释。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正例</span><br><span class="line">var name =”abc”; // 姓名    </span><br><span class="line"></span><br><span class="line">反例</span><br><span class="line">// 姓名</span><br><span class="line">var name = “abc”;</span><br></pre></td></tr></table></figure>

<h3 id="务必添加注释"><a href="#务必添加注释" class="headerlink" title="务必添加注释"></a>务必添加注释</h3><p>公共组件使用说明</p>
<p>各组件中重要函数或者类说明</p>
<p>复杂的业务逻辑处理说明</p>
<p>特殊情况的代码处理说明,对于代码中特殊用途的变量、存在临界值、函数中使用的 hack、使用了某种算法或思路等需要进行注释描述</p>
<p>多重 if 判断语句</p>
<p>注释块必须以/<strong>（至少两个星号）开头</strong>/</p>
<p>单行注释使用//</p>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>在执行 v-for 遍历的时候，总是应该带上 key 值使更新 DOM 时渲染效率更高。</p>
<p>示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反例</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-<span class="keyword">for</span>=<span class="string">"item in list"</span>&gt;</span><br><span class="line">        &#123;&#123; item.title &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正例</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-<span class="keyword">for</span>=<span class="string">"item in list"</span> :key=<span class="string">"item.id"</span>&gt;</span><br><span class="line">        &#123;&#123; item.title &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure>

<p>v-for 应该避免与 v-if 在同一个元素（例如：``）上使用，因为 v-for 的优先级比 v-if 更高，为了避免无效计算和渲染，应该尽量将 v-if 放到容器的父元素之上。</p>
<p>示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反例</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-<span class="keyword">for</span>=<span class="string">"item in list"</span> :key=<span class="string">"item.id"</span> v-<span class="keyword">if</span>=<span class="string">"showList"</span>&gt;</span><br><span class="line">        &#123;&#123; item.title &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正例</span></span><br><span class="line">&lt;ul v-<span class="keyword">if</span>=<span class="string">"showList"</span>&gt;</span><br><span class="line">    &lt;li v-<span class="keyword">for</span>=<span class="string">"item in list"</span> :key=<span class="string">"item.id"</span>&gt;</span><br><span class="line">        &#123;&#123; item.title &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-v-if-v-else-if-v-else"><a href="#5-v-if-v-else-if-v-else" class="headerlink" title="5.v-if / v-else-if / v-else"></a>5.v-if / v-else-if / v-else</h3><p>若同一组 v-if 逻辑控制中的元素逻辑相同，Vue 为了更高效的元素切换，会复用相同的部分，例如：<code>value</code>。为了避免复用带来的不合理效果，应该在同种元素上加上 key 做标识。</p>
<p>示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反例</span></span><br><span class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">"hasData"</span>&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; mazeyData &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div v-<span class="keyword">else</span>&gt;</span><br><span class="line">    &lt;span&gt;无数据&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正例</span></span><br><span class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">"hasData"</span> key=<span class="string">"mazey-data"</span>&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; mazeyData &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div v-<span class="keyword">else</span> key=<span class="string">"mazey-none"</span>&gt;</span><br><span class="line">    &lt;span&gt;无数据&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>避免 this.$parent</p>
<p>调试信息 console.log() debugger 使用完及时删除</p>
<p>除了三目运算，if,else 等禁止简写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">    alert(name);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">alert(name);</span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    alert(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure>

<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><h3 id="样式属性顺序"><a href="#样式属性顺序" class="headerlink" title="样式属性顺序"></a>样式属性顺序</h3><ul>
<li>1、定位：<code>position</code> <code>z-index</code> <code>left</code> <code>right</code> <code>top</code> <code>bottom</code> <code>clip</code>等。</li>
<li>2、自身属性：<code>width</code> <code>height</code> <code>min-height</code> <code>max-height</code> <code>min-width</code> <code>max-width</code>等。</li>
<li>3、文字样式：<code>color</code> <code>font-size</code> <code>letter-spacing</code>, <code>color</code> <code>text-align</code>等。</li>
<li>4、背景：<code>background-image</code> <code>border</code>等。</li>
<li>5、文本属性: <code>text-align</code> <code>vertical-align</code> <code>text-wrap</code> <code>text-transform</code> <code>text-indent</code> <code>text-decoration</code> <code>letter-spacing</code> <code>word-spacing</code> <code>white-space</code> <code>text-overflow</code>等。</li>
<li>6、css3中属性：<code>content</code>、<code>box-shadow</code>、<code>animation</code>、<code>border-radius</code>、<code>transform</code>等</li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>选择器尽可能简单，能使用 <code>.test</code> 别使用 <code>div.test</code>。</p>
<p>每个选择器和声明都要独立新行。</p>
<p>示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反例</span></span><br><span class="line">p.test&#123;</span><br><span class="line">    color: <span class="meta">#000;</span></span><br><span class="line">&#125;</span><br><span class="line">h1,h2,h3&#123;</span><br><span class="line">    font-size: <span class="number">12</span>px;</span><br><span class="line">    color: <span class="meta">#666;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正例</span></span><br><span class="line">.test&#123;</span><br><span class="line">    color: <span class="meta">#000;</span></span><br><span class="line">&#125;</span><br><span class="line">h1,</span><br><span class="line">h2,</span><br><span class="line">h3&#123;</span><br><span class="line">    font-size: <span class="number">12</span>px;</span><br><span class="line">    color: <span class="meta">#666;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ul>
<li>1、所有的命名<code>最好都小写</code></li>
<li>2、属性的值一定要用<code>双引号(&quot;&quot;)</code>括起来，且一定要有值如<code>class=&quot;app&quot;,id=&quot;app&quot;</code></li>
<li>3、每个标签都要有开始和结束，且要有正确的层次，排版有规律工整例如：``</li>
<li>4、空元素要有结束的tag或于开始的tag后加上”/“ <code>、</code></li>
<li>5、表现与结构完全分离，代码中不涉及任何的表现元素，如<code>style、font、bgColor、border</code>等</li>
<li>6、<code>到</code>的定义，应遵循从大到小的原则，体现文档的结构，并有利于搜索引擎的查询,因此，请不要利用标题标签来改变同一行中的字体大小。相反，我们应当使用层叠样式表定义来达到漂亮的显示效果。</li>
<li>7、给每一个表格和表单加上一个唯一的、结构标记<code>id</code></li>
<li>8、给图片加上alt标签,<code>alt</code>属性是一个必需的属性，它规定在图像无法显示时的替代文本。假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：<code>网速太慢</code>、<code>src 属性中的错误</code>、<code>浏览器禁用图像</code>、<code>用户使用的是屏幕阅读器</code>。</li>
<li>9、尽量使用英文命名原则</li>
<li>10、尽量不缩写，除非一看就明白的单词如<code>btn</code>。</li>
<li>11、命名方式(<strong>BEM</strong>)：类-体（例：<code>g-head</code>）、类-体-修饰符（例：<code>u-btn-active</code>）。</li>
<li>12、scss中的变量、函数、混合、placeholder采用驼峰式命名</li>
<li>13、后代选择器：体-修饰符即可（例：.m-page .cut{}）注：后代选择器不要在页面布局中使用，因为污染的可能性较大；</li>
<li>14、减少id命名，id在JS是唯一的，不能多次使用，id的优先级优先与class，所以id应该按需使用，而不能滥用。</li>
</ul>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="var-let-const"><a href="#var-let-const" class="headerlink" title="var / let / const"></a>var / let / const</h3><p>建议不再使用 var，而使用 let / const，优先使用 const。任何一个变量的使用都要提前申明，除了 function 定义的函数可以随便放在任何位置。</p>
<h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>建议不再使用双引号，静态字符串使用单引号，动态字符串使用反引号衔接。</p>
<p>示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反例</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="string">"测试"</span></span><br><span class="line"><span class="keyword">const</span> bar = test + <span class="string">"，前端工程师"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正例</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="string">'测试'</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="string">`<span class="subst">$&#123;test&#125;</span>，前端工程师`</span></span><br></pre></td></tr></table></figure>

<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>统一使用 import / export 的方式管理项目的模块。</p>
<p>示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">'./lib'</span></span><br></pre></td></tr></table></figure>

<p>import 统一放在文件顶部。</p>
<p>如果模块只有一个输出值，使用 <code>export default</code>，否则不用。</p>
<h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>避免使用 <code>eval</code>，如要进行字符串转化为对象，最好使用浏览器的内置方法来解析 JSON 数据，以确保代码的安全性和数据的合法性。如果浏览器不支持 <code>JSON.parse()</code>，你可以使用 JSON.org 所提供的库。如果不得不使用 <code>eval()</code>，可以尝试用 <code>new Function()</code> 来代替，在 <code>new Function()</code> 中运行的代码会在一个局部函数作用域内执行，因此源码中定义的变量不会自动变成全局变量</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>在引用外部 CSS 或 JavaScript 时不写 type 属性。HTML5 默认 type 为 <code>text/css</code> 和 <code>text/javascript</code> 属性，所以没必要指定。</p>
<p>示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反例</span></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"//www.test.com/css/test.css"</span> type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"//www.test.com/js/test.js"</span> type=<span class="string">"text/javascript"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 正例</span></span><br><span class="line"><span class="regexp">&lt;link rel="stylesheet" href="/</span><span class="regexp">/www.test.com/</span>css/test.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;script src="</span><span class="comment">//www.test.com/js/test.js"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>Class 和 ID 的命名应该语义化，通过看名字就知道是干嘛的；多个单词用连接线 <code>-</code> 连接。</p>
<p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反例</span></span><br><span class="line">.testheader&#123;</span><br><span class="line">    font-size: <span class="number">20</span>px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正例</span></span><br><span class="line">.test-header&#123;</span><br><span class="line">    font-size: <span class="number">20</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>优雅的使用vue的复用组件</title>
    <url>/2020/03/30/%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8vue%E7%9A%84%E5%A4%8D%E7%94%A8%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="如何在vue中优雅的复用组件？"><a href="#如何在vue中优雅的复用组件？" class="headerlink" title="如何在vue中优雅的复用组件？"></a>如何在vue中优雅的复用组件？</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此次记录的内容，标题已经很明确了，平常我们在工作中，使用vue绝大多数是写一个组件，然后其他地方需要调用的时候，使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'../HelloWorld'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式比较多一点，但是组件又是可服用的，当一个高频组件需要调用很多次的时候，这样无异于增加了代码量，所以，需要一种更优雅的方式来引用高频组件。</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>这次我们需要实现不用在单个页面中写入<code>importxxfromxx</code>就可以引入其组件，原理是使用了webpack的api，</p>
<p><code>require.context</code>,这个api会将指定目录下的指定文件查询出来并返回。</p>
<h3 id="确定组件格式"><a href="#确定组件格式" class="headerlink" title="确定组件格式"></a>确定组件格式</h3><p>首先我们规定组件格式为首字母大写。例如child1.vue组件为<code>&lt;Child1&gt;&lt;/child1&gt;</code>引入后为这样。</p>
<p>所以我们需要定义一个转换首字符大写的函数</p>
<p>函数如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首字符大写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeStr</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.charAt(<span class="number">0</span>).toUpperCase()+str.slice(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过这层函数的包装，我们即可返回首字符为大写的字符串</p>
<p>所以，我们开始进行全局方法的包装</p>
<h3 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h3><p>首先我们把所有的高频组件放在同一个文件夹下</p>
<p>例如</p>
<p><code>src&gt;components&gt;component</code></p>
<p>这里我们声明一个测试组件<code>child1.vue</code></p>
<p>组件内容如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button&gt;测试<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    name:'Child1'</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">"scss"</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时我们在同级目录下创建文件index.js</p>
<p>并在main.js中引用并use。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'./components/component/index.js'</span>;</span><br><span class="line">Vue.use(index);</span><br></pre></td></tr></table></figure>

<p>注意是在main.js中引用并注册</p>
<p>然后在index.js中我们首先通过webpack的api获取所有的组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(<span class="string">'./'</span>, <span class="literal">true</span>, /\.vue$/);</span><br></pre></td></tr></table></figure>

<p>传入参数为三个，第一个为目录，第二个为是否深层次查找，第三匹配格式。</p>
<p>然后我们拿到找的的所有的keys</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(requireComponent.keys());</span><br><span class="line"></span><br><span class="line"><span class="comment">// ["./child1.vue", "./child2.vue"]</span></span><br></pre></td></tr></table></figure>

<p>然后对拿到的组件进行遍历</p>
<p>并拿到第i个组件，格式化组件名，并注册组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 拿到所有的组件进行遍历</span></span><br><span class="line">    <span class="keyword">let</span> config = requireComponent(fileName);</span><br><span class="line">    <span class="built_in">console</span>.log(config);</span><br><span class="line">    <span class="comment">// 获得第i个组件 Module &#123;default: &#123;…&#125;, __esModule: true, Symbol(Symbol.toStringTag): "Module"&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 格式化组件名</span></span><br><span class="line">    <span class="keyword">let</span> componentName = changeStr(fileName.replace(<span class="regexp">/^\.\//</span>, <span class="string">""</span>).replace(<span class="regexp">/\.\w+$/</span>, <span class="string">""</span>))</span><br><span class="line">    Vue.component(componentName, config.default || config);</span><br></pre></td></tr></table></figure>

<p>这样就实现了全局自动化注册组件。</p>
<p>这是因为我们在main.js中使用了use方法，则需要在index.js中暴露一个install方法</p>
<p>则</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> install = <span class="function">(<span class="params">Vue</span>) =&gt;</span> &#123;</span><br><span class="line">    requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 拿到所有的组件进行遍历</span></span><br><span class="line">        <span class="keyword">let</span> config = requireComponent(fileName);</span><br><span class="line">        <span class="built_in">console</span>.log(config);</span><br><span class="line">        <span class="comment">// 获得第i个组件 Module &#123;default: &#123;…&#125;, __esModule: true, Symbol(Symbol.toStringTag): "Module"&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 格式化组件名</span></span><br><span class="line">        <span class="keyword">let</span> componentName = changeStr(fileName.replace(<span class="regexp">/^\.\//</span>, <span class="string">""</span>).replace(<span class="regexp">/\.\w+$/</span>, <span class="string">""</span>))</span><br><span class="line">        Vue.component(componentName, config.default || config);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    install</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们的优雅引入复用组件就完成了</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们在vuecli的About.vue页面中引入child1试试</p>
<p>About.vue页面代码如下，并没用script。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;about&quot;&gt;</span><br><span class="line">    &lt;h1&gt;This is an about page&lt;/h1&gt;</span><br><span class="line">    &lt;Child1&gt;&lt;/Child1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>实际效果</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1gdc4r0uzw6j20rs0gy3z3.jpg" alt="WeChatd36bb015d6368b1669e3ceb767db819f.png"></p>
<p>这里的测试1按钮就是我们的child1组件。</p>
<p>项目地址</p>
<p><a href="https://github.com/ligoudan1/elegant-components" target="_blank" rel="noopener">github地址</a></p>
]]></content>
  </entry>
  <entry>
    <title>手把手教你实现一个vue2.x的数据劫持</title>
    <url>/2020/02/08/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAvue2-x%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<h1 id="手把手教你实现一个vue2-x的数据劫持"><a href="#手把手教你实现一个vue2-x的数据劫持" class="headerlink" title="手把手教你实现一个vue2.x的数据劫持"></a>手把手教你实现一个vue2.x的数据劫持</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此次vue2.x的数据劫持实现是基于vue版本<code>vue2.x</code>，灵感来自于阅读源码中产生的种种好奇，就心想自己能不能将整体串起来实现一个简易的vue2.x的数据劫持呢，话不多说，开干</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首先，vue中最重要的就是双向数据绑定原理，他采用了es5中的一个api<code>object.defineProperty</code>来产生双向数据绑定的关系，当然，这个api也为vue2.x带来了一些诟病，例如，不能监听数组的深层次变化，例如通过数组下标给数组设置值，并不能够响应，或者在data中声明空对象，在下面方法中给data中的对象绑定key，value，这样vue2.x也不勾响应，尤大也深知这点，于是在vue3.0中采用了不兼容浏览器的低版本的proxy，此篇文章我们主要介绍vue2.x版本的<code>object.defineProperty</code></p>
<p>先写一个测试代码来描述这个api吧</p>
<p>先丢一个MDN的api描述地址<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">戳我</a></p>
<p>最近好像MDN的网速比较慢，最好可以科学上网</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>

<p>要传递三个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj</span><br></pre></td></tr></table></figure>

<p>要在其上定义属性的对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">prop</span><br></pre></td></tr></table></figure>

<p>要定义或修改的属性的名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">descriptor</span><br></pre></td></tr></table></figure>

<p>将被定义或修改的属性描述符。</p>
<p>第一个参数是监听的对象本身，第二个参数是要监听的属性的key，第三个一般用来定义get和set方法(拿属性和设置属性，字面意思)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好,<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> obj =&#123;&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Object</span>.defineProperty(obj,<span class="string">"name"</span>,&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">get</span>() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"获取name"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">'#name'</span>).innerHTML;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="keyword">set</span>(val) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"设置name"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.querySelector(<span class="string">'#name'</span>).innerHTML = val</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        obj.name = <span class="string">"lizhao"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(obj.name);</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们运行代码</p>
<p><code>设置name</code><br><code>获取name</code><br><code>lizhao</code></p>
<p>将会看到如下打印，因为我们首先设置了obj的name属性，所以就会先进入set方法，打印设置name,然后我们在下面log了obj.name，那么就会触发get方法，其次最后会打印出obj.name的属性值</p>
<h2 id="实现vue-js文件"><a href="#实现vue-js文件" class="headerlink" title="实现vue.js文件"></a>实现vue.js文件</h2><p>首先我们得明确实现效果</p>
<p>我们得实现一个这样的效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Lvue(&#123;</span><br><span class="line">   data:&#123;</span><br><span class="line">        msg:<span class="string">"xxx"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这样的话就需要用class类来做</p>
<p>首先我们新建一个class类并初始化其<code>constructor</code>,</p>
<p>并添加响应化函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lvue</span> </span>&#123;</span><br><span class="line">      <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$options = options;</span><br><span class="line">        <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">        <span class="comment">// 响应化</span></span><br><span class="line">        <span class="keyword">this</span>.observe(<span class="keyword">this</span>.$data); <span class="comment">// 使用observe函数做递归遍历</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步我们定义响应化函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归遍历函数,使传递进来的对象响应化</span></span><br><span class="line">observe(data) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!data || toString.call(data) !=<span class="string">"[object Object]"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 如果传进来的值没有或者不为对象,则直接return;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始遍历</span></span><br><span class="line">    <span class="comment">// 拿出所有的key进行循环遍历</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.defineReactive(data,item,data[item]);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们接收的形参data，如果data不存在或者不为对象，我们就直接return，然后我们拿出data的所有的key，进行遍历，每一项使其进入方法<code>defineReactive</code>中</p>
<p>第三部我们定义<code>defineReactive</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">defineReactive(obj,key,value) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归,如果data里面是多层嵌套的关系</span></span><br><span class="line">    <span class="keyword">this</span>.observe(value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj,key,&#123;</span><br><span class="line">        <span class="keyword">get</span>()&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(newval) &#123;</span><br><span class="line">            <span class="comment">// 如果有变化</span></span><br><span class="line">            <span class="keyword">if</span> (newval !== value) &#123;</span><br><span class="line">                value = newval;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>的值发生了改变`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>defineReactive</code>方法接收三个值，对象，key和值(也就是obj[key])</p>
<p>首先为了解决多级嵌套问题，我们采用了递归</p>
<p>如data中出现这样的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data：&#123;</span><br><span class="line"></span><br><span class="line">	lz：&#123;</span><br><span class="line"></span><br><span class="line">		name:<span class="string">"lizhao"</span>,</span><br><span class="line"></span><br><span class="line">		age:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们在这里再次调用了<code>observe</code>方法</p>
<p>并在下面使用<code>Object.defineProperty</code>监听响应式</p>
<p>这里我们可以创建引用测试一下了</p>
<h2 id="创建测试"><a href="#创建测试" class="headerlink" title="创建测试"></a>创建测试</h2><p>这里我们创建一个html，并引入刚才的vue（我们命名为Lvue.js文件）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./Lvue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Lvue(&#123;</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                test:<span class="string">"test"</span>,</span></span><br><span class="line">                lz:&#123;</span><br><span class="line"><span class="actionscript">                    name:<span class="string">'lizhao'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        app.$data.test=<span class="string">"lizhaotest"</span>;</span></span><br><span class="line"><span class="actionscript">        app.$data.lz.name = <span class="string">"lizhaotest"</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们运行</p>
<p><code>test的值发生了改变</code><br><code>name的值发生了改变</code></p>
<p>果然打印出来了</p>
<h2 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h2><p>此时我们在html中使用的仍然是 <code>app.$data.test</code> 后面有$data,然而我们在vue中，却是没有这个，怎么办呢，我们可以继续使用<code>Object.defineProperty</code>来操作，在get中定义</p>
<p>我们定义一个<code>proxyData</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">proxyData(item) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>,item,&#123;</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.$data[item];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$data[item]=val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将其挂载至遍历的后面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始遍历</span></span><br><span class="line"><span class="comment">// 拿出所有的key进行循环遍历</span></span><br><span class="line"><span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.defineReactive(data,item,data[item]);</span><br><span class="line">    <span class="keyword">this</span>.proxyData(item)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这样，我们就可以直接来使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.test=<span class="string">"lizhaotest"</span>;</span><br><span class="line">app.lz.name = <span class="string">"lizhaotest"</span>;</span><br></pre></td></tr></table></figure>

<p>最后我们打印一下app，是不是有vue内味了？</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1gbp1119c14j20q00jiju2.jpg" alt="WeChata289f75d03792aa1ae4fb3ceb93401e7.png"></p>
<p>源代码地址<a href="https://github.com/ligoudan1/vue2.xlearn" target="_blank" rel="noopener">戳我</a></p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用TS+Vuecli4.x搭建仿elementui自己的按钮组</title>
    <url>/2020/02/01/%E4%BD%BF%E7%94%A8TS-Vuecli4-x%E6%90%AD%E5%BB%BA%E4%BB%BFelementui%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8C%89%E9%92%AE%E7%BB%84/</url>
    <content><![CDATA[<h1 id="使用TS-Vuecli4-x搭建仿elementui自己的按钮组"><a href="#使用TS-Vuecli4-x搭建仿elementui自己的按钮组" class="headerlink" title="使用TS+Vuecli4.x搭建仿elementui自己的按钮组"></a>使用TS+Vuecli4.x搭建仿elementui自己的按钮组</h1><h2 id="成品效果图"><a href="#成品效果图" class="headerlink" title="成品效果图"></a>成品效果图</h2><p><img src="http://ww1.sinaimg.cn/large/c596f419ly1gbg6epyjavj20yi0ast9l.jpg" alt="WeChat737af68973fac2974511ad1ad98dba24.png"></p>
<h2 id="使用技术栈"><a href="#使用技术栈" class="headerlink" title="使用技术栈"></a>使用技术栈</h2><p><code>@vue/cli 4.1.2</code></p>
<p><code>node v12.13.1</code></p>
<p><code>*&quot;vue&quot;*: &quot;^2.6.10&quot;</code></p>
<p><code>*&quot;typescript&quot;*: &quot;~3.5.3&quot;</code></p>
<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>我们首先使用<code>vuecli4.x</code>版本搭建一个cli,</p>
<p>在配置时我们选择ts+css预编译器scss，如下图</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1gbg6j5doabj20vo0kads7.jpg" alt="WeChatd330c356625db80484392766dcd54757.png"></p>
<p>等待项目完成后即可</p>
<p>然后我们需要整理一下项目中的文件</p>
<p>使用vscode打开，将没必要的文件隐藏，保证项目的整洁性</p>
<p>在项目根目录创建<code>.vscode</code>文件夹，然后创建<code>settings.json</code>文件</p>
<p>文件代码如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"files.exclude"</span>: &#123;</span><br><span class="line">        <span class="attr">"**/.git"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/.svn"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/.hg"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/CVS"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/.DS_Store"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/README.md"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置完后就可以将没必要的内容隐藏</p>
<h2 id="App-vue文件"><a href="#App-vue文件" class="headerlink" title="App.vue文件"></a>App.vue文件</h2><p>我们首先对app.vue文件进行改写</p>
<p>使其引入组件装饰器，并将测试用例组件引入其中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;home&gt;&lt;/home&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Component, Vue &#125; from &apos;vue-property-decorator&apos;;</span><br><span class="line">// 引入home组件</span><br><span class="line">import home from &quot;./home.vue&quot;;</span><br><span class="line">// 引入组件装饰器</span><br><span class="line">@Component(&#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    home</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default class App extends Vue &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="home-vue"><a href="#home-vue" class="headerlink" title="home.vue"></a>home.vue</h2><p>然后我们在和app.vue同级创建文件home.vue</p>
<p>home.vue主要为测试用例</p>
<p>将各个按钮不同的属性传入保证其可以正常显示</p>
<p>其中有</p>
<p><code>&lt;uiBtn @click=&quot;onclick&quot;&gt;正常&lt;/uiBtn&gt;</code></p>
<p>正常的按钮（所有的按钮组件都包含点击事件，一开始为了测试方便，然后后面c+v就没删了）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>正常：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uiBtn</span> @<span class="attr">click</span>=<span class="string">"onclick"</span>&gt;</span>正常<span class="tag">&lt;/<span class="name">uiBtn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>大：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uiBtn</span> @<span class="attr">click</span>=<span class="string">"onclick"</span> <span class="attr">large</span>&gt;</span>large<span class="tag">&lt;/<span class="name">uiBtn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>小：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uiBtn</span> @<span class="attr">click</span>=<span class="string">"onclick"</span> <span class="attr">small</span>&gt;</span>small<span class="tag">&lt;/<span class="name">uiBtn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>禁用：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uiBtn</span> @<span class="attr">click</span>=<span class="string">"onclick"</span> <span class="attr">disabled</span>&gt;</span>disabled<span class="tag">&lt;/<span class="name">uiBtn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>无圆角：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uiBtn</span> @<span class="attr">click</span>=<span class="string">"onclick"</span> <span class="attr">tile</span>&gt;</span>tile<span class="tag">&lt;/<span class="name">uiBtn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>半圆角：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uiBtn</span> @<span class="attr">click</span>=<span class="string">"onclick"</span> <span class="attr">rounded</span>&gt;</span>rounded<span class="tag">&lt;/<span class="name">uiBtn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>圆：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uiBtn</span> @<span class="attr">click</span>=<span class="string">"onclick"</span> <span class="attr">circle</span>&gt;</span>R<span class="tag">&lt;/<span class="name">uiBtn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>自定义颜色：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uiBtn</span> @<span class="attr">click</span>=<span class="string">"onclick"</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>red<span class="tag">&lt;/<span class="name">uiBtn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>分别为正常，大的，小的，禁用的，无圆角的，半圆角的，圆的，还可以自定义颜色的</p>
<h2 id="ui-btn-vue"><a href="#ui-btn-vue" class="headerlink" title="ui-btn.vue"></a>ui-btn.vue</h2><p>接下来就是我们按钮组件的实现逻辑了</p>
<p>首先我们是一个组件，外出的@click不能直接传入进来使用，因此我们可以使用事件监听</p>
<p><code>&lt;button class=&quot;ui-btn&quot; v-on=&quot;$listeners&quot;&gt;button&lt;/button&gt;</code></p>
<p>但是这样会监听外层所有的事件，不推荐使用，</p>
<p>我们可以使用父子传递事件来解决这个问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Vue, Emit, Prop &#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span><br></pre></td></tr></table></figure>

<p>首先先将其引入（注意是Emit，后面的prop是解决父给子传值的）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Emit(<span class="string">"click"</span>)</span><br><span class="line">private emitClick(event: MouseEvent) &#123;&#125;</span><br><span class="line">private btnOnClick(event: MouseEvent) &#123;</span><br><span class="line">  <span class="comment">// 解决禁用按钮点击事件</span></span><br><span class="line">  !<span class="keyword">this</span>.disabled ? <span class="keyword">this</span>.emitClick(event) : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用装饰器，<code>private</code>代表私有方法</p>
<p>然后我们分别在子组件中接受传入的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Prop(Boolean) large: boolean | undefined;</span><br><span class="line">@Prop(Boolean) small: boolean | undefined;</span><br><span class="line">@Prop(Boolean) disabled: boolean | undefined;</span><br><span class="line">@Prop(Boolean) tile: boolean | undefined;</span><br><span class="line">@Prop(Boolean) rounded: boolean | undefined;</span><br><span class="line">@Prop(Boolean) circle: boolean | undefined;</span><br><span class="line">@Prop(String) color: string | undefined;</span><br></pre></td></tr></table></figure>

<p>在其class中动态绑定class类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:class=&quot;&#123;</span><br><span class="line">    &apos;ui-large&apos;:large,</span><br><span class="line">    &apos;ui-small&apos;:small,</span><br><span class="line">    &apos;ui-disabled&apos;:disabled,</span><br><span class="line">    &apos;ui-tile&apos;:tile,</span><br><span class="line">    &apos;ui-rounded&apos;:rounded,</span><br><span class="line">    &apos;ui-circle&apos;:circle</span><br><span class="line">    &#125;&quot;</span><br></pre></td></tr></table></figure>

<p>然后我们在scss中再写不同的样式</p>
<p>为了简写方便，我们使用了scss中的混淆（函数必须return）</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用scss函数</span></span><br><span class="line"><span class="keyword">@mixin</span> resize(<span class="variable">$width</span>, <span class="variable">$height</span>, <span class="variable">$padding</span>, <span class="variable">$minWidth</span>) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$height</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="variable">$padding</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="variable">$minWidth</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ui-btn</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> resize(<span class="number">64px</span>, <span class="number">34px</span>, <span class="number">16px</span>, <span class="number">64px</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.875rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: var(--color-init,<span class="number">#1059cf</span>);</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  user-<span class="selector-tag">select</span>: none;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  &amp;<span class="selector-class">.ui-large</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> resize(<span class="number">80px</span>, <span class="number">45px</span>, <span class="number">16px</span>, <span class="number">64px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-class">.ui-small</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> resize(<span class="number">50px</span>, <span class="number">25px</span>, <span class="number">0px</span>, <span class="number">0px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-class">.ui-disabled</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c0c4cc</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">    <span class="attribute">background-image</span>: none;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ebeef5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-class">.ui-tile</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-class">.ui-rounded</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">17px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-class">.ui-circle</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> resize(<span class="number">30px</span>, <span class="number">30px</span>, <span class="number">0px</span>, <span class="number">0px</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了解决按钮禁用，必须禁用点击事件，我们在点击事件的时候进行判断，是否为禁用</p>
<p>代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解决禁用按钮点击事件</span></span><br><span class="line">   !<span class="keyword">this</span>.disabled ? <span class="keyword">this</span>.emitClick(event) : <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>动态接受颜色传值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">:style="`--color-init:$&#123;Tintcolor&#125;`"</span><br></pre></td></tr></table></figure>

<p>我们在style动态绑定属性</p>
<p>在下面定义计算属性（颜色也有可能不传，不穿默认为undefined，会报错）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用计算属性改变color颜色</span></span><br><span class="line">private <span class="keyword">get</span> Tintcolor() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.color) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'#1059cf'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们在scss中定义其变量</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ui-btn</span> &#123;  </span><br><span class="line">		<span class="attribute">background-color</span>: var(--color-init,<span class="number">#1059cf</span>);</span><br><span class="line">	)</span><br></pre></td></tr></table></figure>

<p>这样整个项目就完成了，我们封装了一个属于自己的element按钮组</p>
<h2 id="最后想说的"><a href="#最后想说的" class="headerlink" title="最后想说的"></a>最后想说的</h2><p>因为正值春节疫情，公司也选择了远程办公，我们能为国家做的也就是少出门！少出门！避免交叉感染！</p>
<p>加油中国！加油武汉！</p>
<p>项目地址:<a href="https://github.com/ligoudan1/ts-vuecli4.x" target="_blank" rel="noopener">https://github.com/ligoudan1/ts-vuecli4.x</a></p>
]]></content>
      <tags>
        <tag>vuecli4.x</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手用koa做一个后台，koa入门（二）</title>
    <url>/2020/01/13/%E6%89%8B%E6%8A%8A%E6%89%8B%E7%94%A8koa%E5%81%9A%E4%B8%80%E4%B8%AA%E5%90%8E%E5%8F%B0%EF%BC%8Ckoa%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="用koa实现后台接口逻辑"><a href="#用koa实现后台接口逻辑" class="headerlink" title="用koa实现后台接口逻辑"></a>用koa实现后台接口逻辑</h1><h2 id="1-引入各种koa库"><a href="#1-引入各种koa库" class="headerlink" title="1.引入各种koa库"></a>1.引入各种koa库</h2><p>引入各种koa的库，koa的库如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"axios"</span>: <span class="string">"^0.19.1"</span>,</span><br><span class="line"><span class="string">"co-mysql"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line"><span class="string">"koa"</span>: <span class="string">"^2.11.0"</span>,</span><br><span class="line"><span class="string">"koa-bodyparser"</span>: <span class="string">"^4.2.1"</span>,</span><br><span class="line"><span class="string">"koa-ejs"</span>: <span class="string">"^4.3.0"</span>,</span><br><span class="line"><span class="string">"koa-mysql"</span>: <span class="string">"^1.0.3"</span>,</span><br><span class="line"><span class="string">"koa-router"</span>: <span class="string">"^7.4.0"</span>,</span><br><span class="line"><span class="string">"koa-static"</span>: <span class="string">"^5.0.0"</span>,</span><br><span class="line"><span class="string">"md5-node"</span>: <span class="string">"^1.0.1"</span>,</span><br><span class="line"><span class="string">"mysql"</span>: <span class="string">"^2.17.1"</span></span><br></pre></td></tr></table></figure>

<p>其中axios是为解决发起请求的，co-mysql是异步话mysql数据库，koa-bodyparser为解析post传值对象的，koa-ejs是为了解决ejs模版引入的，koa-mysql为引入错误的库，其实应该引入co-mysql和mysql两个库的，koa-static为koa静态资源库，md5-node为md5加密库</p>
<h2 id="2-编辑基础模板代码，启动node服务"><a href="#2-编辑基础模板代码，启动node服务" class="headerlink" title="2.编辑基础模板代码，启动node服务"></a>2.编辑基础模板代码，启动node服务</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>); <span class="comment">// 引入koa模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)(); <span class="comment">// 引入router并将其实例化</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>); <span class="comment">// 引入koa-bodyparser模块</span></span><br><span class="line"><span class="keyword">const</span> render = <span class="built_in">require</span>(<span class="string">'koa-ejs'</span>); <span class="comment">// 引入ejs</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'koa-static'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>); <span class="comment">// 引入path模块</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="built_in">require</span>(<span class="string">'./config/config'</span>); <span class="comment">// 引入设置</span></span><br><span class="line"><span class="keyword">const</span> error = <span class="built_in">require</span>(<span class="string">'./common/error'</span>); <span class="comment">// 错误处理中间件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(error);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line"><span class="comment">// 初始化ejs，设置后缀为ejs，文件目录为`template`</span></span><br><span class="line"></span><br><span class="line">render(app, &#123;</span><br><span class="line">    root: path.join(__dirname, <span class="string">'template'</span>),</span><br><span class="line">    layout: <span class="literal">false</span>,</span><br><span class="line">    viewExt: <span class="string">'ejs'</span>,</span><br><span class="line">    cache: <span class="literal">false</span>,</span><br><span class="line">    debug: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(router.routes()); <span class="comment">// 使用路由中间件</span></span><br><span class="line">app.listen(<span class="number">3300</span>); <span class="comment">// 监听3300端口</span></span><br></pre></td></tr></table></figure>

<p>在上面使用ejs等各种库之后，</p>
<p>我们在config中定义了一个全局的变量为静态资源的根路径，需要在静态资源中引入</p>
<h2 id="3-config-js"><a href="#3-config-js" class="headerlink" title="3.config.js"></a>3.config.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    BASE_URL:<span class="string">'http://localhost:3300/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在config中的地址如下，</p>
<p>因为定义在了config文件夹下面，在node的代码中就需要引入</p>
<p>所以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> baseUrl = <span class="built_in">require</span>(<span class="string">'./config/config'</span>); <span class="comment">// 引入设置</span></span><br></pre></td></tr></table></figure>

<p>并设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.context.baseUrl = baseUrl; <span class="comment">// 引用设置好的全局设置</span></span><br></pre></td></tr></table></figure>

<h2 id="4-定义一个路由"><a href="#4-定义一个路由" class="headerlink" title="4.定义一个路由"></a>4.定义一个路由</h2><p>我们定义一个路由用来监听网页的登陆请求</p>
<p>并且使用md5加密密码</p>
<p>此处上面的get请求是定义了静态网页的地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router =<span class="built_in">require</span>(<span class="string">'koa-router'</span>)(); <span class="comment">//引入router并将其实例化</span></span><br><span class="line"><span class="keyword">const</span> md5 =<span class="built_in">require</span>(<span class="string">'md5-node'</span>);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>,<span class="keyword">async</span> (ctx,next) =&gt;&#123;</span><br><span class="line">    <span class="keyword">await</span> ctx.render(<span class="string">'index'</span>,&#123;</span><br><span class="line">        BASE_URL:ctx.baseUrl.BASE_URL</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>

<p>ejs的模版如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;%=BASE_URL%&gt;css/index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:3300"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userName"</span>&gt;</span>账户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"userName"</span> <span class="attr">name</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pwd"</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pwd"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个简单的登陆模版</p>
<p>然后定义了发送post请求</p>
<p>然后我们在定义好的router中接收这个post请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听登陆请求</span></span><br><span class="line">router.post(<span class="string">'/'</span>,<span class="keyword">async</span> (ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;userName,pwd&#125; =ctx.request.body;</span><br><span class="line">    pwd = md5(pwd);</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> ctx.db.query(<span class="string">`SELECT user,password FROM admin WHERE user='<span class="subst">$&#123;userName&#125;</span>' AND password = '<span class="subst">$&#123;pwd&#125;</span>' limit 1`</span>)</span><br><span class="line">    <span class="keyword">if</span> (data.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        ctx.body=<span class="string">"登陆成功！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.body=<span class="string">"登陆失败！"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们在监听这个post请求中操作数据库查找有没有这个数据</p>
<h2 id="5-数据库"><a href="#5-数据库" class="headerlink" title="5.数据库"></a>5.数据库</h2><p>我们定义一个基础设置的js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    DB_HOST: <span class="string">'106.54.210.212'</span>,</span><br><span class="line">    DB_USER: <span class="string">'root'</span>,</span><br><span class="line">    DB_PASS: <span class="string">'root'</span>,</span><br><span class="line">    DB_NAME: <span class="string">'user'</span>,</span><br><span class="line">    URL_PATH: <span class="string">'http://localhost:3300'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后我们再开启数据库并将其注入全局变量中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">'co-mysql'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config/db-config'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = mysql.createPool(&#123;</span><br><span class="line">    host: config.DB_HOST,</span><br><span class="line">    user: config.DB_USER,</span><br><span class="line">    password: config.DB_PASS,</span><br><span class="line">    database: config.DB_NAME</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = co(db);</span><br></pre></td></tr></table></figure>

<p>在http.js中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.context.db = <span class="built_in">require</span>(<span class="string">'./lib/database'</span>); <span class="comment">// 引用数据库</span></span><br></pre></td></tr></table></figure>

<p>这样我们一个简单的登陆模版就搭建完成了</p>
<p>完整的http.js代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>); <span class="comment">// 引入koa模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)(); <span class="comment">// 引入router并将其实例化</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>); <span class="comment">// 引入koa-bodyparser模块</span></span><br><span class="line"><span class="keyword">const</span> render = <span class="built_in">require</span>(<span class="string">'koa-ejs'</span>); <span class="comment">// 引入ejs</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'koa-static'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>); <span class="comment">// 引入path模块</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="built_in">require</span>(<span class="string">'./config/config'</span>); <span class="comment">// 引入设置</span></span><br><span class="line"><span class="keyword">const</span> error = <span class="built_in">require</span>(<span class="string">'./common/error'</span>); <span class="comment">// 错误处理中间件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line">app.use(error);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line"><span class="comment">// 初始化ejs，设置后缀为ejs，文件目录为`template`</span></span><br><span class="line"></span><br><span class="line">render(app, &#123;</span><br><span class="line">    root: path.join(__dirname, <span class="string">'template'</span>),</span><br><span class="line">    layout: <span class="literal">false</span>,</span><br><span class="line">    viewExt: <span class="string">'ejs'</span>,</span><br><span class="line">    cache: <span class="literal">false</span>,</span><br><span class="line">    debug: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.context.baseUrl = baseUrl; <span class="comment">// 引用设置好的全局设置</span></span><br><span class="line">app.context.db = <span class="built_in">require</span>(<span class="string">'./lib/database'</span>); <span class="comment">// 引用数据库</span></span><br><span class="line">router.use(<span class="string">'/'</span>, <span class="built_in">require</span>(<span class="string">"./router/router"</span>).routes())</span><br><span class="line">app.use(router.routes()); <span class="comment">// 使用路由中间件</span></span><br><span class="line">app.use(<span class="keyword">static</span>(path.resolve(__dirname, <span class="string">'./public'</span>))); <span class="comment">// 使用静态文件中间件</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3300</span>); <span class="comment">// 监听3300端口</span></span><br></pre></td></tr></table></figure>

<p>项目地址：<a href="https://github.com/ligoudan1/node-vue-login" target="_blank" rel="noopener">vue-node搭建的登陆模版</a></p>
]]></content>
  </entry>
  <entry>
    <title>async，settimeout，promise竞速？谁快谁慢？</title>
    <url>/2019/12/26/async%EF%BC%8Csettimeout%EF%BC%8Cpromise%E7%AB%9E%E9%80%9F%EF%BC%9F%E8%B0%81%E5%BF%AB%E8%B0%81%E6%85%A2%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="async，settimeout，promise竞速？谁快谁慢？"><a href="#async，settimeout，promise竞速？谁快谁慢？" class="headerlink" title="async，settimeout，promise竞速？谁快谁慢？"></a>async，settimeout，promise竞速？谁快谁慢？</h1><h2 id="灵感来源"><a href="#灵感来源" class="headerlink" title="灵感来源"></a>灵感来源</h2><p>今天同事问了我一个问题，如何解决异步处理，我给他抛出了ES6种的promise，然而promise并不能解决他的问题，然后我给他指出ES7中的async，await，于是乎他在函数中使用了async，然而他的函数中有封装的axios方法，有<code>.then()</code>返回值，代码大概是这样的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> test()&#123;</span><br><span class="line">  <span class="keyword">this</span>.$http(&#123;</span><br><span class="line">    url:...,</span><br><span class="line">    ...</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">console</span>.log(<span class="string">'test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>于是乎引起了我的注意，决定探讨一下三大异步马车谁快谁慢</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>首先在js中声明一个时间节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'start'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'start-----'</span>);</span><br></pre></td></tr></table></figure>

<p>这样代表项目开始</p>
<p>然后在开始之后使用async函数，并使其自执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async----start'</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">console</span>.log(<span class="string">'async----end'</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>需要注意的是，async需要写在自执行函数的括号里面，否则js会认定你async并不是这个函数，而是这个函数的返回值</p>
<p>错误写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async----start'</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">console</span>.log(<span class="string">'async----end'</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>然后让咱们es6中的pormise登场</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise-----start'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise-----end'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里也让其直接执行</p>
<p>然后加上<code>setTimeout</code>并使其延时0ms执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'settimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>最后结束输出时间和end</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'end-----'</span>);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'start'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'start'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'start-----'</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async----start'</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">console</span>.log(<span class="string">'async----end'</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise-----start'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise-----end'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'settimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end-----'</span>);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'start'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>我们在vscode运行的结果如下</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1gaah5ufn7cj21kw16o133.jpg" alt="WeChat53819801bdabe859f8897dd58f4162c8.png"></p>
<p>start—–</p>
<p>async—-start</p>
<p>async—-end</p>
<p>promise—–start</p>
<p>end—–</p>
<p>start: 14.156005859375ms</p>
<p>start: 14.248ms</p>
<p>promise—–end</p>
<p>settimeout</p>
<p>由上面顺序可知，我们的竞速结果如下</p>
<p>async–&gt;promise–&gt;settimeout</p>
<h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p>由于settimeout是整个js的运行流程分开的，排在最后也是必然的</p>
<p>至于async其实本身作为一个被声明的异步函数，在创建时，运行完函数内部同步方法后再运行await也是合情合理</p>
]]></content>
  </entry>
  <entry>
    <title>如何用小技巧提高前端开发效率？</title>
    <url>/2019/12/25/%E5%A6%82%E4%BD%95%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%8F%90%E9%AB%98%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="如何用小技巧提高前端开发效率？"><a href="#如何用小技巧提高前端开发效率？" class="headerlink" title="如何用小技巧提高前端开发效率？"></a>如何用小技巧提高前端开发效率？</h1><h2 id="1-确定对象是否含有此属性"><a href="#1-确定对象是否含有此属性" class="headerlink" title="1.确定对象是否含有此属性"></a>1.确定对象是否含有此属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断对象是否含有此属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里声明一个对象</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span>,</span><br><span class="line">    d: <span class="literal">undefined</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使.或者[]语法来获取当前对象下存储的对象，如果当前对象不存在，则返回undefined，如果当前对象定义为undefined，则也返回undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.d); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.e); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">'d'</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">'e'</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 使用in语法来获取当前对象下是否存有此对象，如果有则返回true，缺点，会将原型链上面的对象返回为true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span> <span class="keyword">in</span> obj); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString'</span> <span class="keyword">in</span> obj); <span class="comment">// 原型链上面的对象，ture</span></span><br><span class="line"><span class="comment">// object.hasOwnProperty() 属性，不能读取原型链上面的属性和方法</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'a'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(d)); <span class="comment">// d is not defined 报错，需使用字符串型</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(toString)); <span class="comment">// false 不能读取原型链上面的属性和方法</span></span><br></pre></td></tr></table></figure>

<h2 id="2-if优化"><a href="#2-if优化" class="headerlink" title="2.if优化"></a>2.if优化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if判断优化</span></span><br><span class="line"><span class="comment">// 在实际项目中，要处理一些逻辑关系的时候，if是不可或缺的，那么我们如何能够防止大篇幅的if的呢？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用&amp;&amp;和||特性，&amp;&amp;是如果前面的false，那么后面的就不会在执行，而||表达式则是如果前面的是true，那么后面的也将不会再执行</span></span><br><span class="line"><span class="comment">// 利用好这一点，我们就可以这样</span></span><br><span class="line"><span class="keyword">if</span>(a != b) &#123;</span><br><span class="line">    func()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 上面的可以转化为</span></span><br><span class="line">a != b &amp;&amp; func();</span><br><span class="line"><span class="comment">// 或者转化为这样</span></span><br><span class="line">a == b || func();</span><br><span class="line"><span class="comment">// 这两个道理都是一样的，都利用了逻辑表达式的特性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种，利用三目表达式;</span></span><br><span class="line">a != b ? func() : <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 上面这种形式翻译过来就是这样的</span></span><br><span class="line"><span class="keyword">if</span>(a !=b) &#123;</span><br><span class="line">    func()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三中，利用switch case</span></span><br><span class="line"><span class="keyword">switch</span> (a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        func()</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面这种形式，翻译过来是这样的</span></span><br><span class="line"><span class="keyword">if</span>(a===<span class="number">1</span>) &#123;</span><br><span class="line">    func()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a===<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-摒弃for循环，能少用则少用"><a href="#3-摒弃for循环，能少用则少用" class="headerlink" title="3.摒弃for循环，能少用则少用"></a>3.摒弃for循环，能少用则少用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 摒弃for循环，能少用则少用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面这种形式如果用for循环来写的话；</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当然这是一种比较简单的形式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以应用到对象身上</span></span><br><span class="line"><span class="keyword">let</span> testobj = &#123;</span><br><span class="line">    <span class="string">'a'</span>: <span class="string">'123'</span>,</span><br><span class="line">    <span class="string">'b'</span>: <span class="string">'456'</span>,</span><br><span class="line">    <span class="string">'c'</span>: <span class="string">'789'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(testobj[<span class="string">'a'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 forin/forof/foreach</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//比如现在碰到这样一段代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i].name = <span class="string">'111'</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr[i].list.length; j++) &#123;</span><br><span class="line">        arr[i].list[j].name = <span class="string">'222'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; arr[i].list[j].list2.length; k++) &#123;</span><br><span class="line">            arr[i].list[j].list2[k] = <span class="string">'333'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 像极了刚入行的我们</span></span><br><span class="line"><span class="comment">// 下面对这段代码进行优化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    key.name = <span class="string">'111'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key2 <span class="keyword">of</span> key.list) &#123;</span><br><span class="line">        key2.name = <span class="string">'222'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key3 <span class="keyword">of</span> key2.list2) &#123;</span><br><span class="line">            key3.name = <span class="string">'333'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样是不是清爽了很多？同样也可以使用forof和foreach来做，同样作用与对象</span></span><br></pre></td></tr></table></figure>

<p>本文章源代码地址<a href="https://github.com/ligoudan1/Learning-progress/blob/js-tip/test.html" target="_blank" rel="noopener">点击此处</a></p>
<h2 id="说说其他"><a href="#说说其他" class="headerlink" title="说说其他"></a>说说其他</h2><p>这段时间确实太忙，博客也隔了一个月才更新的，虽然在加班，但是我仍旧一直保持着一颗学习的心，从koa，到java基础到vuerouter 的深入学习，博客后面也会针对我这段时间的学习内容更新，加油！</p>
]]></content>
  </entry>
  <entry>
    <title>koa框架入门（一）</title>
    <url>/2019/11/20/koa%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="koa框架入门（一）"><a href="#koa框架入门（一）" class="headerlink" title="koa框架入门（一）"></a>koa框架入门（一）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>koa框架是node的一门框架，node是底层用c封装的，一门js语法的后端语言</p>
<p>在koa框架问世之前，node的上一个好用的框架是express；</p>
<p>这里贴上koa框架的官方网站 <a href>https://koa.bootcss.com/</a></p>
<h2 id="起手式"><a href="#起手式" class="headerlink" title="起手式"></a>起手式</h2><p>首先在使用koa框架之前必须确保电脑上装有node，并可以使用node命令和npm命令</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g94umdohadj20vo0ka42m.jpg" alt="WeChat2855a480fa0554af8faf06dd8159977d.png"></p>
<p>在确保node和npm安装好之后我们开始创建属于自己的第一个koa框架demo吧</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>我们在桌面创建一个koa-app的项目</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g94uo57htgj208q06ydi9.jpg" alt="WeChataf43625455aaef79980f993819a35242.png"></p>
<p>创建后之后进入项目，先初始化一个pack.json的包</p>
<p>使用命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure>

<p>然后在项目中安装koa和koa-router；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm install koa koa-router --save</span><br></pre></td></tr></table></figure>

<p>安装好之后我们在package.json中修改我们的入口文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"main"</span>: <span class="string">"app.js"</span></span><br></pre></td></tr></table></figure>

<p>然后我们在项目中创建app.js</p>
<h2 id="第一个koa服务"><a href="#第一个koa服务" class="headerlink" title="第一个koa服务"></a>第一个koa服务</h2><p>接下来让我们来创建第一个koa服务吧</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入koa 和koa-router</span></span><br><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)(); <span class="comment">// 引入koa-router并将其实例化</span></span><br></pre></td></tr></table></figure>

<p>首先我们引入koa和koa-router；</p>
<p>注意：我在这里引入koa-router以后后面带了个（）；是直接将其实例化</p>
<p>不需要在下面在写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(router);</span><br></pre></td></tr></table></figure>

<p>写完之后我们实例化koa,并使其监听8080端口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例化koa</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>

<p>我们需要注册router</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(router.routes());</span><br></pre></td></tr></table></figure>

<p>注册完整代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入koa 和koa-router</span></span><br><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)(); <span class="comment">// 引入koa-router并将其实例化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化koa</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(router.routes());</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>

<p>这样之后运行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>

<p>我们即可在localhost:8080中访问到app.js中的内容</p>
<h2 id="koa监听get传参"><a href="#koa监听get传参" class="headerlink" title="koa监听get传参"></a>koa监听get传参</h2><p>get传参分为两种，一种url拼接传参，一种动态传参，我们先说第一种</p>
<h3 id="url拼接传参"><a href="#url拼接传参" class="headerlink" title="url拼接传参"></a>url拼接传参</h3><p>url拼接传参是指这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:8080/test?a=111</span><br></pre></td></tr></table></figure>

<p>我们怎么获取到a呢？</p>
<p>首先先创建一个get</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">"test"</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>ctx是指conterntext的缩写，async是es7中的新特性，将函数转换为promise对象</p>
<p>ctx.body是在网页上展示的内容</p>
<p>监听url传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听get传参</span></span><br><span class="line">router.get(<span class="string">'/test'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'test2'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.query);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>获取到的ctx.query为参数对象</p>
<p>例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">a</span>: <span class="string">'11'</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>动态路由是指这种路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:8080/test/xxx</span><br></pre></td></tr></table></figure>

<p>xxx是指动态路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听动态路由传参</span></span><br><span class="line">router.get(<span class="string">'/test3/:id'</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body = <span class="string">"test3"</span>; </span><br><span class="line">    <span class="built_in">console</span>.log(ctx.params);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>ctx.params即为获取到的动态路由的对象</p>
<p>例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">id</span>: <span class="string">'xxx'</span> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>web Worker</title>
    <url>/2019/11/07/web-Worker/</url>
    <content><![CDATA[<h1 id="web-Worker"><a href="#web-Worker" class="headerlink" title="web Worker"></a>web Worker</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</span><br><span class="line">																												-阮一峰博客</span><br></pre></td></tr></table></figure>

<h2 id="2-注意点"><a href="#2-注意点" class="headerlink" title="2.注意点"></a>2.注意点</h2><p>需要注意的是</p>
<p>worker线程一旦新建成功的话，主线程上面的活动，比如alert，点击操作，都不会打断worker线程的，这样有利于随时响应主线程的通信，但是，这也造成了worker比较耗费性能</p>
<h3 id="需要注意点："><a href="#需要注意点：" class="headerlink" title="需要注意点："></a>需要注意点：</h3><h4 id="1-同源限制"><a href="#1-同源限制" class="headerlink" title="1.同源限制"></a>1.同源限制</h4><p>worker受浏览器的同源策略影响，worker线程运行的程序必须与主线程的js同源</p>
<h4 id="2-DOM限制"><a href="#2-DOM限制" class="headerlink" title="2.DOM限制"></a>2.DOM限制</h4><p>worker所在的全局对象与主线程不一样，无法读取主线程所在网页的DOM元素，例如window，document</p>
<h4 id="3-通信联系"><a href="#3-通信联系" class="headerlink" title="3.通信联系"></a>3.通信联系</h4><p>worker和主线程不在同一个上下文的环境中的话，它们不能直接通信</p>
<h4 id="4-脚本限制"><a href="#4-脚本限制" class="headerlink" title="4.脚本限制"></a>4.脚本限制</h4><p>worker不能执行alert()和confirm()方法</p>
<h4 id="5-文件限制"><a href="#5-文件限制" class="headerlink" title="5.文件限制"></a>5.文件限制</h4><p>worker不能读取本地文件</p>
<h2 id="3-worker线程"><a href="#3-worker线程" class="headerlink" title="3.worker线程"></a>3.worker线程</h2><p>我们在worker线程中打印this对象</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g8neu8ssquj20y40scai7.jpg" alt="WeChat0867843f5c87e1238bfccefc6fb980cf.png"></p>
<p>我们得到了一个对象</p>
<p>与主线程的window相同，在worker线程中得到的对象也有他的方法和属性，这时候我们就可以使用这个“this”对象来操作worker线程</p>
<h3 id="接受传过来的参数"><a href="#接受传过来的参数" class="headerlink" title="接受传过来的参数"></a>接受传过来的参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听发过来的数据</span></span><br><span class="line">onmessage = <span class="function">(<span class="params">parms</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(parms);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在worker线程中我们使用这样的方法来监听传过来的参数</p>
<h3 id="发送参数"><a href="#发送参数" class="headerlink" title="发送参数"></a>发送参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在worker中发送数据给主线程</span></span><br><span class="line">postMessage(<span class="string">'这是我给主线程发送的数据'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="在worker线程中结束任务"><a href="#在worker线程中结束任务" class="headerlink" title="在worker线程中结束任务"></a>在worker线程中结束任务</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在当前worker线程中立即结束任务</span></span><br><span class="line">close();</span><br></pre></td></tr></table></figure>

<h2 id="4-主线程"><a href="#4-主线程" class="headerlink" title="4.主线程"></a>4.主线程</h2><h3 id="1-创建worker线程"><a href="#1-创建worker线程" class="headerlink" title="1.创建worker线程"></a>1.创建worker线程</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">"worker线程js文件路径"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="接受传过来的参数-1"><a href="#接受传过来的参数-1" class="headerlink" title="接受传过来的参数"></a>接受传过来的参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主线程通过worker.onmessage指定监听函数，接收子线程发回来的消息。</span></span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="给worker线程发送参数"><a href="#给worker线程发送参数" class="headerlink" title="给worker线程发送参数"></a>给worker线程发送参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">worker.postMessage(<span class="keyword">this</span>.msg);</span><br></pre></td></tr></table></figure>

<h3 id="在主线程结束worker线程"><a href="#在主线程结束worker线程" class="headerlink" title="在主线程结束worker线程"></a>在主线程结束worker线程</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此刻立刻结束worker；</span></span><br><span class="line">worker.terminate();</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>此处提上vue代码</p>
<h3 id="主线程-vue文件"><a href="#主线程-vue文件" class="headerlink" title="主线程(vue文件)"></a>主线程(vue文件)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">import Component from &quot;vue-class-component&quot;;</span><br><span class="line">import &#123; log &#125; from &quot;util&quot;;</span><br><span class="line">@Component</span><br><span class="line">export default class workerTest extends Vue &#123;</span><br><span class="line">  msg: string = &quot;这个页面是用来测试worker的&quot;;</span><br><span class="line">  // created 生命周期函数</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&quot;created&quot;);</span><br><span class="line">    // 测试worker方法</span><br><span class="line">    var worker = new Worker(&quot;/static/worker/test.js&quot;);</span><br><span class="line">    console.log(&quot;执行了created方法&quot;);</span><br><span class="line">    // 主线程调用worker.postMessage()方法，向 Worker 发消息。</span><br><span class="line">    worker.postMessage(this.msg);</span><br><span class="line">    // 主线程通过worker.onmessage指定监听函数，接收子线程发回来的消息。</span><br><span class="line">    worker.onmessage = function(event) &#123;</span><br><span class="line">      console.log(event.data);</span><br><span class="line">    &#125;;</span><br><span class="line">    // 此刻立刻结束worker；</span><br><span class="line">    worker.terminate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="worker线程（js文件）"><a href="#worker线程（js文件）" class="headerlink" title="worker线程（js文件）"></a>worker线程（js文件）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听发过来的数据</span></span><br><span class="line">onmessage = <span class="function">(<span class="params">parms</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(parms.data);</span><br><span class="line">  <span class="comment">// 此时在worker线程中立即结束worker</span></span><br><span class="line">  close();</span><br><span class="line">  postMessage(<span class="string">'这是我给主线程发送的数据'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>worker线程总的来说就是使js从单线程变成了多线程，不过worker不能多开，会耗费电脑性能，多线程使js的处理变得更加效率化</p>
]]></content>
  </entry>
  <entry>
    <title>vue+ts起手式</title>
    <url>/2019/10/31/vue-ts%E8%B5%B7%E6%89%8B%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="现有vue项目与typescript结合"><a href="#现有vue项目与typescript结合" class="headerlink" title="现有vue项目与typescript结合"></a>现有vue项目与typescript结合</h1><h2 id="1-安装必要插件"><a href="#1-安装必要插件" class="headerlink" title="1.安装必要插件"></a>1.安装必要插件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装vue的官方插件</span><br><span class="line">npm i vue-class-component vue-property-decorator --save</span><br><span class="line"></span><br><span class="line">// ts-loader typescript 必须安装，其他的相信你以后也会装上的</span><br><span class="line">npm i ts-loader typescript tslint tslint-loader tslint-config-standard --save-dev</span><br></pre></td></tr></table></figure>

<p>这些库大体的作用，可以按需引入：</p>
<ul>
<li><a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">vue-class-component</a>：强化 Vue 组件，使用 TypeScript/装饰器 增强 Vue 组件</li>
<li><a href="https://github.com/kaorun343/vue-property-decorator" target="_blank" rel="noopener">vue-property-decorator</a>：在 <code>vue-class-component</code> 上增强更多的结合 Vue 特性的装饰器</li>
<li><a href="https://github.com/TypeStrong/ts-loader" target="_blank" rel="noopener">ts-loader</a>：TypeScript 为 Webpack 提供了 <code>ts-loader</code>，其实就是为了让webpack识别 .ts .tsx文件</li>
<li><a href="https://github.com/wbuchwalter/tslint-loader" target="_blank" rel="noopener">tslint-loader</a>跟<a href="https://github.com/palantir/tslint" target="_blank" rel="noopener">tslint</a>：我想你也会在<code>.ts</code> <code>.tsx</code>文件 约束代码格式（作用等同于eslint）</li>
<li><a href="https://github.com/blakeembrey/tslint-config-standard" target="_blank" rel="noopener">tslint-config-standard</a>：<code>tslint</code> 配置 <code>standard</code>风格的约束</li>
</ul>
<h2 id="2-配置webpack"><a href="#2-配置webpack" class="headerlink" title="2.配置webpack"></a>2.配置webpack</h2><p> 首先找到<code>./build/webpack.base.conf.js</code> </p>
<ul>
<li>找到<code>entry.app</code> 将<code>main.js</code> 改成 <code>main.ts</code>, 顺便把项目文件中的<code>main.js</code>也改成<code>main.ts</code>, 里面内容保持不变</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  app: &apos;./src/main.ts&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在resolve中extensions加入ts后缀</p>
</li>
<li><p>设置module.rules对ts的解析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  enforce: <span class="string">'pre'</span>,</span><br><span class="line">  loader: <span class="string">'tslint-loader'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">  loader: <span class="string">'ts-loader'</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    appendTsSuffixTo: [<span class="regexp">/\.vue$/</span>],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目的根目录启用命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<p>创建tsconfig.json文件</p>
<p>此处贴一份大佬的配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"src/**/*"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"node_modules"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"esnext"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"isolatedModules"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [</span><br><span class="line">      <span class="string">"dom"</span>,</span><br><span class="line">      <span class="string">"es5"</span>,</span><br><span class="line">      <span class="string">"es2015.promise"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"pretty"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加 tslint.json</p>
<p>在项目路径创建<code>tslint.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"tslint-config-standard"</span>,</span><br><span class="line">  <span class="attr">"globals"</span>: &#123;</span><br><span class="line">    <span class="attr">"require"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>让ts识别vue</p>
<p>在src目录下面创建<code>vue-shim.d.ts</code></p>
<p>在ts中写入代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare module &quot;*.vue&quot; &#123;</span><br><span class="line">    import Vue from &quot;vue&quot;;</span><br><span class="line">    export default Vue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="3-修改app-vue"><a href="#3-修改app-vue" class="headerlink" title="3.修改app.vue"></a>3.修改app.vue</h2><p>我们使用引入的vue-class-component来修改app.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">import Component from &quot;vue-class-component&quot;;</span><br><span class="line">@Component</span><br><span class="line">export default class app extends Vue &#123;</span><br><span class="line">  // 初始化数据</span><br><span class="line">  msg: number = 111;</span><br><span class="line">  // 生命周期函数</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getmsg();</span><br><span class="line">  &#125;</span><br><span class="line">  // computer 方法</span><br><span class="line">  get computedmsg(): number &#123;</span><br><span class="line">    return this.msg;</span><br><span class="line">  &#125;</span><br><span class="line">  // methods方法</span><br><span class="line">  getmsg(): void &#123;</span><br><span class="line">    console.log(&quot;得到了msg&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>最后,放一张目前自己写的项目改造截图</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g8hnwvtltrj20ma0qumz8.jpg" alt="微信截图_20191031203700.png"></p>
<p>最后提交当前代码~ts起手式完毕!</p>
]]></content>
  </entry>
  <entry>
    <title>VUE组件库大全(转)</title>
    <url>/2019/10/30/VUE%E4%BE%9D%E8%B5%96%E5%BA%93%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="基于Vue的组件库"><a href="#基于Vue的组件库" class="headerlink" title="基于Vue的组件库"></a>基于Vue的组件库</h1><p><a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">https://github.com/ElemeFE/element</a> element  饿了么出品的Vue2的web UI工具套件</p>
<p><a href="https://github.com/airyland/vux" target="_blank" rel="noopener">https://github.com/airyland/vux</a> Vux 基于Vue和WeUI的组件库</p>
<p><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">https://github.com/ElemeFE/mint-ui</a> mint-ui Vue 2的移动UI元素</p>
<p><a href="https://github.com/iview/iview" target="_blank" rel="noopener">https://github.com/iview/iview</a> iview 基于 Vuejs 的开源 UI 组件库</p>
<p><a href="https://github.com/JosephusPaye/Keen-UI" target="_blank" rel="noopener">https://github.com/JosephusPaye/Keen-UI</a> Keen-UI 轻量级的基本UI组件合集</p>
<p><a href="https://github.com/marcosmoura/vue-material" target="_blank" rel="noopener">https://github.com/marcosmoura/vue-material</a> vue-material 通过Vue Material和Vue 2建立精美的app应用</p>
<p><a href="https://github.com/museui/muse-ui" target="_blank" rel="noopener">https://github.com/museui/muse-ui</a> muse-ui 三端样式一致的响应式 UI 库</p>
<p><a href="https://github.com/vuetifyjs/vuetify" target="_blank" rel="noopener">https://github.com/vuetifyjs/vuetify</a> vuetify 为移动而生的Vue JS 2组件框架</p>
<p><a href="https://github.com/wangdahoo/vonic" target="_blank" rel="noopener">https://github.com/wangdahoo/vonic</a> vonic 快速构建移动端单页应用</p>
<p><a href="https://github.com/egoist/eme" target="_blank" rel="noopener">https://github.com/egoist/eme</a> eme 优雅的Markdown编辑器</p>
<p><a href="https://github.com/monterail/vue-multiselect" target="_blank" rel="noopener">https://github.com/monterail/vue-multiselect</a> vue-multiselect Vue.js选择框解决方案</p>
<p><a href="https://github.com/ratiw/vue-table" target="_blank" rel="noopener">https://github.com/ratiw/vue-table</a> vue-table-简化数据表格</p>
<p><a href="https://github.com/OYsun/VueCircleMenu" target="_blank" rel="noopener">https://github.com/OYsun/VueCircleMenu</a> VueCircleMenu-漂亮的vue圆环菜单</p>
<p><a href="https://github.com/Coffcer/vue-chat" target="_blank" rel="noopener">https://github.com/Coffcer/vue-chat</a> vue-chat-vuejs和vuex及webpack的聊天示例</p>
<p><a href="https://github.com/luojilab/radon-ui" target="_blank" rel="noopener">https://github.com/luojilab/radon-ui</a> radon-ui-快速开发产品的Vue组件库</p>
<p><a href="https://github.com/MopTym/vue-waterfall" target="_blank" rel="noopener">https://github.com/MopTym/vue-waterfall</a> vue-waterfall-Vue.js的瀑布布局组件</p>
<p><a href="https://github.com/myronliu347/vue-carbon" target="_blank" rel="noopener">https://github.com/myronliu347/vue-carbon</a> vue-carbon-基于 vue 开发MD风格的移动端</p>
<p><a href="https://github.com/FE-Driver/vue-beauty" target="_blank" rel="noopener">https://github.com/FE-Driver/vue-beauty</a> vue-beauty-由vue和ant design创建的优美UI组件</p>
<p><a href="https://github.com/chenz24/vue-blu" target="_blank" rel="noopener">https://github.com/chenz24/vue-blu</a> vue-blu-帮助你轻松创建web应用</p>
<p><a href="https://github.com/taylorchen709/vueAdmin" target="_blank" rel="noopener">https://github.com/taylorchen709/vueAdmin</a> vueAdmin-基于vuejs2和element的简单的管理员模板</p>
<p><a href="https://github.com/vuejs/vue-syntax-highlight" target="_blank" rel="noopener">https://github.com/vuejs/vue-syntax-highlight</a> vue-syntax-highlight-Sublime Text语法高亮</p>
<p><a href="https://github.com/ElemeFE/vue-infinite-scroll" target="_blank" rel="noopener">https://github.com/ElemeFE/vue-infinite-scroll</a> vue-infinite-scroll-VueJS的无限滚动指令</p>
<p><a href="https://github.com/David-Desmaisons/Vue.Draggable" target="_blank" rel="noopener">https://github.com/David-Desmaisons/Vue.Draggable</a> Vue.Draggable-实现拖放和视图模型数组同步</p>
<p><a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">https://github.com/surmon-china/vue-awesome-swiper</a> vue-awesome-swiper-vue.js触摸滑动组件</p>
<p><a href="https://github.com/jinzhe/vue-calendar" target="_blank" rel="noopener">https://github.com/jinzhe/vue-calendar</a> vue-calendar-日期选择插件</p>
<p><a href="https://github.com/pi0/bootstrap-vue" target="_blank" rel="noopener">https://github.com/pi0/bootstrap-vue</a> bootstrap-vue-应用于Vuejs2的Twitter的Bootstrap 4组件</p>
<p><a href="https://github.com/ElemeFE/vue-swipe" target="_blank" rel="noopener">https://github.com/ElemeFE/vue-swipe</a> vue-swipe-VueJS触摸滑块</p>
<p><a href="https://github.com/ElemeFE/vue-amap" target="_blank" rel="noopener">https://github.com/ElemeFE/vue-amap</a> vue-amap-基于Vue 2和高德地图的地图组件</p>
<p><a href="https://github.com/apertureless/vue-chartjs" target="_blank" rel="noopener">https://github.com/apertureless/vue-chartjs</a> vue-chartjs-vue中的Chartjs的封装</p>
<p><a href="https://github.com/hilongjw/vue-datepicker" target="_blank" rel="noopener">https://github.com/hilongjw/vue-datepicker</a> vue-datepicker-日历和日期选择组件</p>
<p><a href="https://github.com/jrainlau/markcook" target="_blank" rel="noopener">https://github.com/jrainlau/markcook</a> markcook-好看的markdown编辑器</p>
<p><a href="https://github.com/GuillaumeLeclerc/vue-google-maps" target="_blank" rel="noopener">https://github.com/GuillaumeLeclerc/vue-google-maps</a> vue-google-maps-带有双向数据绑定Google地图组件</p>
<p><a href="https://github.com/hilongjw/vue-progressbar" target="_blank" rel="noopener">https://github.com/hilongjw/vue-progressbar</a> vue-progressbar-vue轻量级进度条</p>
<p><a href="https://github.com/alessiomaffeis/vue-picture-input" target="_blank" rel="noopener">https://github.com/alessiomaffeis/vue-picture-input</a> vue-picture-input-移动友好的图片文件输入组件</p>
<p><a href="https://github.com/PeachScript/vue-infinite-loading" target="_blank" rel="noopener">https://github.com/PeachScript/vue-infinite-loading</a> vue-infinite-loading-VueJS的无限滚动插件</p>
<p><a href="https://github.com/lian-yue/vue-upload-component" target="_blank" rel="noopener">https://github.com/lian-yue/vue-upload-component</a> vue-upload-component-Vuejs文件上传组件</p>
<p><a href="https://github.com/Haixing-Hu/vue-datetime-picker" target="_blank" rel="noopener">https://github.com/Haixing-Hu/vue-datetime-picker</a> vue-datetime-picker-日期时间选择控件</p>
<p><a href="https://github.com/wangdahoo/vue-scroller" target="_blank" rel="noopener">https://github.com/wangdahoo/vue-scroller</a> vue-scroller-Vonic UI的功能性组件</p>
<p><a href="https://github.com/icai/vue2-calendar" target="_blank" rel="noopener">https://github.com/icai/vue2-calendar</a> vue2-calendar-支持lunar和日期事件的日期选择器</p>
<p><a href="https://github.com/surmon-china/vue-video-player" target="_blank" rel="noopener">https://github.com/surmon-china/vue-video-player</a> vue-video-player-VueJS视频及直播播放器</p>
<p><a href="https://github.com/Wanderxx/vue-fullcalendar" target="_blank" rel="noopener">https://github.com/Wanderxx/vue-fullcalendar</a> vue-fullcalendar-基于vue.js的全日历组件</p>
<p><a href="https://github.com/ccforward/rubik" target="_blank" rel="noopener">https://github.com/ccforward/rubik</a> rubik-基于Vuejs2的开源 UI 组件库</p>
<p><a href="https://github.com/OYsun/VueStar" target="_blank" rel="noopener">https://github.com/OYsun/VueStar</a> VueStar-带星星动画的vue点赞按钮</p>
<p><a href="https://github.com/egoist/vue-mugen-scroll" target="_blank" rel="noopener">https://github.com/egoist/vue-mugen-scroll</a> vue-mugen-scroll-无限滚动组件</p>
<p><a href="https://github.com/mint-ui/mint-loadmore" target="_blank" rel="noopener">https://github.com/mint-ui/mint-loadmore</a> mint-loadmore-VueJS的双向下拉刷新组件</p>
<p><a href="https://github.com/matfish2/vue-tables-2" target="_blank" rel="noopener">https://github.com/matfish2/vue-tables-2</a> vue-tables-2-显示数据的bootstrap样式网格</p>
<p><a href="https://github.com/Akryum/vue-virtual-scroller" target="_blank" rel="noopener">https://github.com/Akryum/vue-virtual-scroller</a> vue-virtual-scroller-带任意数目数据的顺畅的滚动</p>
<p><a href="https://github.com/SimonZhangITer/DataVisualization" target="_blank" rel="noopener">https://github.com/SimonZhangITer/DataVisualization</a> DataVisualization-数据可视化</p>
<p><a href="https://github.com/surmon-china/vue-quill-editor" target="_blank" rel="noopener">https://github.com/surmon-china/vue-quill-editor</a> vue-quill-editor-基于Quill适用于Vue2的富文本编辑器</p>
<p><a href="https://github.com/hifarer/Vueditor" target="_blank" rel="noopener">https://github.com/hifarer/Vueditor</a> Vueditor-所见即所得的编辑器</p>
<p><a href="https://github.com/PeakTai/vue-html5-editor" target="_blank" rel="noopener">https://github.com/PeakTai/vue-html5-editor</a> vue-html5-editor-html5所见即所得编辑器</p>
<p><a href="https://github.com/ElemeFE/vue-msgbox" target="_blank" rel="noopener">https://github.com/ElemeFE/vue-msgbox</a> vue-msgbox-vuejs的消息框</p>
<p><a href="https://github.com/warpcgd/vue-slider" target="_blank" rel="noopener">https://github.com/warpcgd/vue-slider</a> vue-slider-vue 滑动组件</p>
<p><a href="https://github.com/Vanthink-UED/vue-core-image-upload" target="_blank" rel="noopener">https://github.com/Vanthink-UED/vue-core-image-upload</a> vue-core-image-upload-轻量级的vue上传插件</p>
<p><a href="https://github.com/hilongjw/vue-slide" target="_blank" rel="noopener">https://github.com/hilongjw/vue-slide</a> vue-slide-vue轻量级滑动组件</p>
<p><a href="https://github.com/JALBAA/vue-lazyload-img" target="_blank" rel="noopener">https://github.com/JALBAA/vue-lazyload-img</a> vue-lazyload-img-移动优化的vue图片懒加载插件</p>
<p><a href="https://github.com/Alex-fun/vue-drag-and-drop-list" target="_blank" rel="noopener">https://github.com/Alex-fun/vue-drag-and-drop-list</a> vue-drag-and-drop-list-创建排序列表的Vue指令</p>
<p><a href="https://github.com/MatteoGabriele/vue-progressive-image" target="_blank" rel="noopener">https://github.com/MatteoGabriele/vue-progressive-image</a> vue-progressive-image-Vue的渐进图像加载插件</p>
<p><a href="https://github.com/vuwe/vuwe" target="_blank" rel="noopener">https://github.com/vuwe/vuwe</a> vuwe-基于微信WeUI所开发的专用于Vue2的组件库</p>
<p><a href="https://github.com/rowanwins/vue-dropzone" target="_blank" rel="noopener">https://github.com/rowanwins/vue-dropzone</a> vue-dropzone-用于文件上传的Vue组件</p>
<p><a href="https://github.com/hchstera/vue-charts" target="_blank" rel="noopener">https://github.com/hchstera/vue-charts</a> vue-charts-轻松渲染一个图表</p>
<p><a href="https://github.com/weilao/vue-swiper" target="_blank" rel="noopener">https://github.com/weilao/vue-swiper</a> vue-swiper-易于使用的滑块组件</p>
<p><a href="https://github.com/littlewin-wang/vue-images" target="_blank" rel="noopener">https://github.com/littlewin-wang/vue-images</a> vue-images-显示一组图片的lightbox组件</p>
<p><a href="https://github.com/Wlada/vue-carousel-3d" target="_blank" rel="noopener">https://github.com/Wlada/vue-carousel-3d</a> vue-carousel-3d-VueJS的3D轮播组件</p>
<p><a href="https://github.com/QingWei-Li/vue-region-picker" target="_blank" rel="noopener">https://github.com/QingWei-Li/vue-region-picker</a> vue-region-picker-选择中国的省份市和地区</p>
<p><a href="https://github.com/cngu/vue-typer" target="_blank" rel="noopener">https://github.com/cngu/vue-typer</a> vue-typer-模拟用户输入选择和删除文本的Vue组件</p>
<p><a href="https://github.com/NewDadaFE/vue-impression" target="_blank" rel="noopener">https://github.com/NewDadaFE/vue-impression</a> vue-impression-移动Vuejs2 UI元素</p>
<p><a href="https://github.com/galenyuan/vue-datatable" target="_blank" rel="noopener">https://github.com/galenyuan/vue-datatable</a> vue-datatable-使用Vuejs创建的DataTableView</p>
<p><a href="https://github.com/santiblanko/vue-instant" target="_blank" rel="noopener">https://github.com/santiblanko/vue-instant</a> vue-instant-轻松创建自动提示的自定义搜索控件</p>
<p><a href="https://github.com/hilongjw/vue-dragging" target="_blank" rel="noopener">https://github.com/hilongjw/vue-dragging</a> vue-dragging-使元素可以拖拽</p>
<p><a href="https://github.com/NightCatSama/vue-slider-component" target="_blank" rel="noopener">https://github.com/NightCatSama/vue-slider-component</a> vue-slider-component-在vue1和vue2中使用滑块</p>
<p><a href="https://github.com/BosNaufal/vue2-loading-bar" target="_blank" rel="noopener">https://github.com/BosNaufal/vue2-loading-bar</a> vue2-loading-bar-最简单的仿Youtube加载条视图</p>
<p><a href="https://github.com/weifeiyue/vue-datepicker" target="_blank" rel="noopener">https://github.com/weifeiyue/vue-datepicker</a> vue-datepicker-漂亮的Vue日期选择器组件</p>
<p><a href="https://github.com/hilongjw/vue-video" target="_blank" rel="noopener">https://github.com/hilongjw/vue-video</a> vue-video-Vue.js的HTML5视频播放器</p>
<p><a href="https://github.com/ElemeFE/vue-toast-mobile" target="_blank" rel="noopener">https://github.com/ElemeFE/vue-toast-mobile</a> vue-toast-mobile-VueJS的toast插件</p>
<p><a href="https://github.com/dai-siki/vue-image-crop-upload" target="_blank" rel="noopener">https://github.com/dai-siki/vue-image-crop-upload</a> vue-image-crop-upload-vue图片剪裁上传组件</p>
<p><a href="https://github.com/Akryum/vue-tooltip" target="_blank" rel="noopener">https://github.com/Akryum/vue-tooltip</a> vue-tooltip-带绑定信息提示的提示工具</p>
<p><a href="https://github.com/weizhenye/vue-highcharts" target="_blank" rel="noopener">https://github.com/weizhenye/vue-highcharts</a> vue-highcharts-HighCharts组件</p>
<p><a href="https://github.com/surmon-china/vue-touch-ripple" target="_blank" rel="noopener">https://github.com/surmon-china/vue-touch-ripple</a> vue-touch-ripple-vuejs的触摸ripple组件</p>
<p><a href="https://github.com/Kocisov/coffeebreak" target="_blank" rel="noopener">https://github.com/Kocisov/coffeebreak</a> coffeebreak-实时编辑CSS组件工具</p>
<p><a href="https://github.com/coderdiaz/vue-datasource" target="_blank" rel="noopener">https://github.com/coderdiaz/vue-datasource</a> vue-datasource-创建VueJS动态表格</p>
<p><a href="https://github.com/phoenixwong/vue2-timepicker" target="_blank" rel="noopener">https://github.com/phoenixwong/vue2-timepicker</a> vue2-timepicker-下拉时间选择器</p>
<p><a href="https://github.com/Bubblings/vue-date-picker" target="_blank" rel="noopener">https://github.com/Bubblings/vue-date-picker</a> vue-date-picker-VueJS日期选择器组件</p>
<p><a href="https://github.com/BosNaufal/vue-scrollbar" target="_blank" rel="noopener">https://github.com/BosNaufal/vue-scrollbar</a> vue-scrollbar-最简单的滚动区域组件</p>
<p><a href="https://github.com/CroudSupport/vue-quill" target="_blank" rel="noopener">https://github.com/CroudSupport/vue-quill</a> vue-quill-vue组件构建quill编辑器</p>
<p><a href="https://github.com/phanan/vue-google-signin-button" target="_blank" rel="noopener">https://github.com/phanan/vue-google-signin-button</a> vue-google-signin-button-导入谷歌登录按钮</p>
<p><a href="https://github.com/MMF-FE/vue-svgicon" target="_blank" rel="noopener">https://github.com/MMF-FE/vue-svgicon</a> vue-svgicon-创建svg图标组件的工具</p>
<p><a href="https://github.com/bkzl/vue-float-label" target="_blank" rel="noopener">https://github.com/bkzl/vue-float-label</a> vue-float-label-VueJS浮动标签模式</p>
<p><a href="https://github.com/Dafrok/vue-baidu-map" target="_blank" rel="noopener">https://github.com/Dafrok/vue-baidu-map</a> vue-baidu-map-基于 Vue 2的百度地图组件库</p>
<p><a href="https://github.com/nicolasbeauvais/vue-social-sharing" target="_blank" rel="noopener">https://github.com/nicolasbeauvais/vue-social-sharing</a> vue-social-sharing-社交分享组件</p>
<p><a href="https://github.com/davidroyer/vue2-editor" target="_blank" rel="noopener">https://github.com/davidroyer/vue2-editor</a> vue2-editor-HTML编辑器</p>
<p><a href="https://github.com/Ginhing/vue-tagsinput" target="_blank" rel="noopener">https://github.com/Ginhing/vue-tagsinput</a> vue-tagsinput-基于VueJS的标签组件</p>
<p><a href="https://github.com/shhdgit/vue-easy-slider" target="_blank" rel="noopener">https://github.com/shhdgit/vue-easy-slider</a> vue-easy-slider-Vue 2.x的滑块组件</p>
<p><a href="https://github.com/vue-bulma/datepicker" target="_blank" rel="noopener">https://github.com/vue-bulma/datepicker</a> datepicker-基于flatpickr的时间选择组件</p>
<p><a href="https://github.com/miaolz123/vue-chart" target="_blank" rel="noopener">https://github.com/miaolz123/vue-chart</a> vue-chart-强大的高速的vue图表解析</p>
<p><a href="https://github.com/yunyi1895/vue-music-master" target="_blank" rel="noopener">https://github.com/yunyi1895/vue-music-master</a> vue-music-master-vue手机端网页音乐播放器</p>
<p><a href="https://github.com/vue-bulma/handsontable" target="_blank" rel="noopener">https://github.com/vue-bulma/handsontable</a> handsontable-网页表格组件</p>
<p><a href="https://github.com/F-loat/vue-simplemde" target="_blank" rel="noopener">https://github.com/F-loat/vue-simplemde</a> vue-simplemde-VueJS的Markdown编辑器组件</p>
<p><a href="https://github.com/myronliu347/vue-popup-mixin" target="_blank" rel="noopener">https://github.com/myronliu347/vue-popup-mixin</a> vue-popup-mixin-用于管理弹出框的遮盖层</p>
<p><a href="https://github.com/fangyongbao/cubeex" target="_blank" rel="noopener">https://github.com/fangyongbao/cubeex</a> cubeex-包含一套完整的移动UI</p>
<p><a href="https://github.com/CroudSupport/vue-fullcalendar" target="_blank" rel="noopener">https://github.com/CroudSupport/vue-fullcalendar</a> vue-fullcalendar-vue FullCalendar封装</p>
<p><a href="https://github.com/loujiayu/vue-material-design" target="_blank" rel="noopener">https://github.com/loujiayu/vue-material-design</a> vue-material-design-Vue MD风格组件</p>
<p><a href="https://github.com/bbonnin/vue-morris" target="_blank" rel="noopener">https://github.com/bbonnin/vue-morris</a> vue-morris-Vuejs组件封装Morrisjs库</p>
<p><a href="https://github.com/tianyong90/we-vue" target="_blank" rel="noopener">https://github.com/tianyong90/we-vue</a> we-vue-Vue2及weui1开发的组件</p>
<p><a href="https://github.com/legeneek/vue-image-clip" target="_blank" rel="noopener">https://github.com/legeneek/vue-image-clip</a> vue-image-clip-基于vue的图像剪辑组件</p>
<p><a href="https://github.com/jbaysolutions/vue-bootstrap-table" target="_blank" rel="noopener">https://github.com/jbaysolutions/vue-bootstrap-table</a> vue-bootstrap-table-可排序可检索的表格</p>
<p><a href="https://github.com/wyzant-dev/vue-radial-progress" target="_blank" rel="noopener">https://github.com/wyzant-dev/vue-radial-progress</a> vue-radial-progress-Vue.js放射性进度条组件</p>
<p><a href="https://github.com/staskjs/vue-slick" target="_blank" rel="noopener">https://github.com/staskjs/vue-slick</a> vue-slick-实现流畅轮播框的vue组件</p>
<p><a href="https://github.com/bajian/vue-pull-to-refresh" target="_blank" rel="noopener">https://github.com/bajian/vue-pull-to-refresh</a> vue-pull-to-refresh-Vue2的上拉下拉</p>
<p><a href="https://github.com/matfish2/vue-form-2" target="_blank" rel="noopener">https://github.com/matfish2/vue-form-2</a> vue-form-2-全面的HTML表单管理的解决方案</p>
<p><a href="https://github.com/vue-comps/vue-side-nav" target="_blank" rel="noopener">https://github.com/vue-comps/vue-side-nav</a> vue-side-nav-响应式的侧边导航</p>
<p><a href="https://github.com/mint-ui/mint-indicator" target="_blank" rel="noopener">https://github.com/mint-ui/mint-indicator</a> mint-indicator-VueJS移动加载指示器插件</p>
<p><a href="https://github.com/vue-bulma/chartjs" target="_blank" rel="noopener">https://github.com/vue-bulma/chartjs</a> chartjs-Vue Bulma的chartjs组件</p>
<p><a href="https://github.com/suguangwen/vue-scroll" target="_blank" rel="noopener">https://github.com/suguangwen/vue-scroll</a> vue-scroll-vue滚动</p>
<p><a href="https://github.com/BosNaufal/vue-ripple" target="_blank" rel="noopener">https://github.com/BosNaufal/vue-ripple</a> vue-ripple-制作谷歌MD风格涟漪效果的Vue组件</p>
<p><a href="https://github.com/icebob/vue-touch-keyboard" target="_blank" rel="noopener">https://github.com/icebob/vue-touch-keyboard</a> vue-touch-keyboard-VueJS虚拟键盘组件</p>
<p><a href="https://github.com/ankane/vue-chartkick" target="_blank" rel="noopener">https://github.com/ankane/vue-chartkick</a> vue-chartkick-VueJS一行代码实现优美图表</p>
<p><a href="https://github.com/lisiyizu/vue-ztree" target="_blank" rel="noopener">https://github.com/lisiyizu/vue-ztree</a> vue-ztree-用 vue 写的树层级组件</p>
<p><a href="https://github.com/shiye515/vue-m-carousel" target="_blank" rel="noopener">https://github.com/shiye515/vue-m-carousel</a> vue-m-carousel-vue 移动端轮播组件</p>
<p><a href="https://github.com/dai-siki/vue-datepicker-simple" target="_blank" rel="noopener">https://github.com/dai-siki/vue-datepicker-simple</a> vue-datepicker-simple-基于vue的日期选择器</p>
<p><a href="https://github.com/alexqdjay/vue-tabs" target="_blank" rel="noopener">https://github.com/alexqdjay/vue-tabs</a> vue-tabs-多tab页轻型框架</p>
<p><a href="https://github.com/aweiu/vue-verify-pop" target="_blank" rel="noopener">https://github.com/aweiu/vue-verify-pop</a> vue-verify-pop-带气泡提示的vue校验插件</p>
<p><a href="https://github.com/vue-comps/vue-parallax" target="_blank" rel="noopener">https://github.com/vue-comps/vue-parallax</a> vue-parallax-整洁的视觉效果</p>
<p><a href="https://github.com/JackGit/vue-img-loader" target="_blank" rel="noopener">https://github.com/JackGit/vue-img-loader</a> vue-img-loader-图片加载UI组件</p>
<p><a href="https://github.com/eduardostuart/vue-typewriter" target="_blank" rel="noopener">https://github.com/eduardostuart/vue-typewriter</a> vue-typewriter-vue组件类型</p>
<p><a href="https://github.com/Teddy-Zhu/vue-smoothscroll" target="_blank" rel="noopener">https://github.com/Teddy-Zhu/vue-smoothscroll</a> vue-smoothscroll-smoothscroll的VueJS版本</p>
<p><a href="https://github.com/xinxingyu/vue-city" target="_blank" rel="noopener">https://github.com/xinxingyu/vue-city</a> vue-city-城市选择器</p>
<p><a href="https://github.com/weibangtuo/vue-tree" target="_blank" rel="noopener">https://github.com/weibangtuo/vue-tree</a> vue-tree-vue树视图组件</p>
<p><a href="https://github.com/Treri/vue-ios-alertview" target="_blank" rel="noopener">https://github.com/Treri/vue-ios-alertview</a> vue-ios-alertview-iOS7+ 风格的alertview服务</p>
<p><a href="https://github.com/ibufu/dd-vue-component" target="_blank" rel="noopener">https://github.com/ibufu/dd-vue-component</a> dd-vue-component-订单来了的公共组件库</p>
<p><a href="https://github.com/yeseason/paco-ui-vue" target="_blank" rel="noopener">https://github.com/yeseason/paco-ui-vue</a> paco-ui-vue-PACOUI的vue组件</p>
<p><a href="https://github.com/doodlewind/vue-cmap" target="_blank" rel="noopener">https://github.com/doodlewind/vue-cmap</a> vue-cmap-Vue China map可视化组件</p>
<p><a href="https://github.com/steven5538/vue-button" target="_blank" rel="noopener">https://github.com/steven5538/vue-button</a> vue-button-Vue按钮组件</p>
<p>开发框架</p>
<p><a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">https://github.com/vuejs/vue</a> vue.js-流行的轻量高效的前端组件化方案</p>
<p><a href="https://github.com/fundon/vue-admin" target="_blank" rel="noopener">https://github.com/fundon/vue-admin</a> vue-admin-Vue管理面板框架</p>
<p><a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener">https://github.com/SimulatedGREG/electron-vue</a> electron-vue-Electron及VueJS快速启动样板</p>
<p><a href="https://github.com/petervmeijgaard/vue-2.0-boilerplate" target="_blank" rel="noopener">https://github.com/petervmeijgaard/vue-2.0-boilerplate</a> vue-2.0-boilerplate-Vue2单页应用样板</p>
<p><a href="https://github.com/hanan198501/vue-spa-template" target="_blank" rel="noopener">https://github.com/hanan198501/vue-spa-template</a> vue-spa-template-前后端分离后的单页应用开发</p>
<p><a href="https://github.com/nolimits4web/Framework7-Vue" target="_blank" rel="noopener">https://github.com/nolimits4web/Framework7-Vue</a> Framework7-Vue-VueJS与Framework7结合</p>
<p><a href="https://github.com/wangxg2016/vue-bulma" target="_blank" rel="noopener">https://github.com/wangxg2016/vue-bulma</a> vue-bulma-轻量级高性能MVVM Admin UI框架</p>
<p><a href="https://github.com/rodzzlessa24/vue-webgulp" target="_blank" rel="noopener">https://github.com/rodzzlessa24/vue-webgulp</a> vue-webgulp-仿VueJS Vue loader示例</p>
<p><a href="https://github.com/Metnew/vue-element-starter" target="_blank" rel="noopener">https://github.com/Metnew/vue-element-starter</a> vue-element-starter-vue启动页</p>
<h3 id="实用库"><a href="#实用库" class="headerlink" title="实用库"></a>实用库</h3><p><a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">https://github.com/vuejs/vuex</a> vuex-专为 Vue.js 应用程序开发的状态管理模式</p>
<p><a href="https://github.com/monterail/vuelidate" target="_blank" rel="noopener">https://github.com/monterail/vuelidate</a> vuelidate-简单轻量级的基于模块的Vue.js验证</p>
<p><a href="https://github.com/zerqu/qingcheng" target="_blank" rel="noopener">https://github.com/zerqu/qingcheng</a> qingcheng-qingcheng主题</p>
<p><a href="https://github.com/ElemeFE/vue-desktop" target="_blank" rel="noopener">https://github.com/ElemeFE/vue-desktop</a> vue-desktop-创建管理面板网站的UI库</p>
<p><a href="https://github.com/declandewet/vue-meta" target="_blank" rel="noopener">https://github.com/declandewet/vue-meta</a> vue-meta-管理app的meta信息</p>
<p><a href="https://github.com/imcvampire/vue-axios" target="_blank" rel="noopener">https://github.com/imcvampire/vue-axios</a> vue-axios-将axios整合到VueJS的封装</p>
<p><a href="https://github.com/cenkai88/vue-svg-icon" target="_blank" rel="noopener">https://github.com/cenkai88/vue-svg-icon</a> vue-svg-icon-vue2的可变彩色svg图标方案</p>
<p><a href="https://github.com/eddyerburgh/avoriaz" target="_blank" rel="noopener">https://github.com/eddyerburgh/avoriaz</a> avoriaz-VueJS测试实用工具库</p>
<p><a href="https://github.com/lmk123/vue-framework7" target="_blank" rel="noopener">https://github.com/lmk123/vue-framework7</a> vue-framework7-结合VueJS使用的Framework7组件</p>
<p><a href="https://github.com/Coffcer/vue-bootstrap-modal" target="_blank" rel="noopener">https://github.com/Coffcer/vue-bootstrap-modal</a> vue-bootstrap-modal-vue的Bootstrap样式组件</p>
<p><a href="https://github.com/QingWei-Li/vuep" target="_blank" rel="noopener">https://github.com/QingWei-Li/vuep</a> vuep-用实时编辑和预览来渲染Vue组件</p>
<p><a href="https://github.com/Sopamo/vue-online" target="_blank" rel="noopener">https://github.com/Sopamo/vue-online</a> vue-online-reactive的在线和离线组件</p>
<p><a href="https://github.com/yeyuqiudeng/vue-lazy-render" target="_blank" rel="noopener">https://github.com/yeyuqiudeng/vue-lazy-render</a> vue-lazy-render-用于Vue组件的延迟渲染</p>
<p><a href="https://github.com/apertureless/vue-password-strength-meter" target="_blank" rel="noopener">https://github.com/apertureless/vue-password-strength-meter</a> vue-password-strength-meter-交互式密码强度计</p>
<p><a href="https://github.com/lynzz/element-admin" target="_blank" rel="noopener">https://github.com/lynzz/element-admin</a> element-admin-支持 vuecli 的 Element UI 的后台模板</p>
<p><a href="https://github.com/SimulatedGREG/vue-electron" target="_blank" rel="noopener">https://github.com/SimulatedGREG/vue-electron</a> vue-electron-将选择的API封装到Vue对象中的插件</p>
<p><a href="https://github.com/vue-bulma/cleave" target="_blank" rel="noopener">https://github.com/vue-bulma/cleave</a> cleave-基于cleave.js的Cleave组件</p>
<p><a href="https://github.com/cklmercer/vue-events" target="_blank" rel="noopener">https://github.com/cklmercer/vue-events</a> vue-events-简化事件的VueJS插件</p>
<p><a href="https://github.com/iFgR/vue-shortkey" target="_blank" rel="noopener">https://github.com/iFgR/vue-shortkey</a> vue-shortkey-应用于Vue.js的Vue-ShortKey 插件</p>
<p><a href="https://github.com/kartsims/vue-cordova" target="_blank" rel="noopener">https://github.com/kartsims/vue-cordova</a> vue-cordova-Cordova的VueJS插件</p>
<p><a href="https://github.com/weinot/vue-router-transition" target="_blank" rel="noopener">https://github.com/weinot/vue-router-transition</a> vue-router-transition-页面过渡插件</p>
<p><a href="https://github.com/mlyknown/vue-gesture" target="_blank" rel="noopener">https://github.com/mlyknown/vue-gesture</a> vue-gesture-VueJS的手势事件插件</p>
<p><a href="https://github.com/FranckFreiburger/http-vue-loader" target="_blank" rel="noopener">https://github.com/FranckFreiburger/http-vue-loader</a> http-vue-loader-从html及js环境加载vue文件</p>
<p><a href="https://github.com/superman66/vue-qart" target="_blank" rel="noopener">https://github.com/superman66/vue-qart</a> vue-qart-用于qartjs的Vue2指令</p>
<p><a href="https://github.com/gocanto/vuemit" target="_blank" rel="noopener">https://github.com/gocanto/vuemit</a> vuemit-处理VueJS事件</p>
<p><a href="https://github.com/icebob/vue-websocket" target="_blank" rel="noopener">https://github.com/icebob/vue-websocket</a> vue-websocket-VueJS的Websocket插件</p>
<p><a href="https://github.com/pinguinjkeke/vue-local-storage" target="_blank" rel="noopener">https://github.com/pinguinjkeke/vue-local-storage</a> vue-local-storage-具有类型支持的Vuejs本地储存插件</p>
<p><a href="https://github.com/gocanto/lazy-vue" target="_blank" rel="noopener">https://github.com/gocanto/lazy-vue</a> lazy-vue-懒加载图片</p>
<p><a href="https://github.com/yangmingshan/vue-bus" target="_blank" rel="noopener">https://github.com/yangmingshan/vue-bus</a> vue-bus-VueJS的事件总线</p>
<p><a href="https://github.com/ropbla9/vue-reactive-storage" target="_blank" rel="noopener">https://github.com/ropbla9/vue-reactive-storage</a> vue-reactive-storage-vue插件的Reactive层</p>
<p><a href="https://github.com/se-panfilov/vue-notifications" target="_blank" rel="noopener">https://github.com/se-panfilov/vue-notifications</a> vue-notifications-非阻塞通知库</p>
<p><a href="https://github.com/Coffcer/vue-lazy-component" target="_blank" rel="noopener">https://github.com/Coffcer/vue-lazy-component</a> vue-lazy-component-懒加载组件或者元素的Vue指令</p>
<p><a href="https://github.com/AStaroverov/v-media-query" target="_blank" rel="noopener">https://github.com/AStaroverov/v-media-query</a> v-media-query-vue中添加用于配合媒体查询的方法</p>
<p><a href="https://github.com/Akryum/vue-observe-visibility" target="_blank" rel="noopener">https://github.com/Akryum/vue-observe-visibility</a> vue-observe-visibility-当元素在页面上可见或隐藏时检测</p>
<p><a href="https://github.com/HerringtonDarkholme/vue-ts-loader" target="_blank" rel="noopener">https://github.com/HerringtonDarkholme/vue-ts-loader</a> vue-ts-loader-在Vue装载机检查脚本</p>
<p><a href="https://github.com/matfish2/vue-pagination-2" target="_blank" rel="noopener">https://github.com/matfish2/vue-pagination-2</a> vue-pagination-2-简单通用的分页组件</p>
<p><a href="https://github.com/dkfbasel/vuex-i18n" target="_blank" rel="noopener">https://github.com/dkfbasel/vuex-i18n</a> vuex-i18n-定位插件</p>
<p><a href="https://github.com/David-Desmaisons/Vue.resize" target="_blank" rel="noopener">https://github.com/David-Desmaisons/Vue.resize</a> Vue.resize-检测HTML调整大小事件的vue指令</p>
<p><a href="https://github.com/xanf/vuex-shared-mutations" target="_blank" rel="noopener">https://github.com/xanf/vuex-shared-mutations</a> vuex-shared-mutations-分享某种Vuex mutations</p>
<p><a href="https://github.com/BosNaufal/vue-file-base64" target="_blank" rel="noopener">https://github.com/BosNaufal/vue-file-base64</a> vue-file-base64-将文件转换为Base64的vue组件</p>
<p><a href="https://github.com/vue-bulma/modal" target="_blank" rel="noopener">https://github.com/vue-bulma/modal</a> modal-Vue Bulma的modal组件</p>
<p><a href="https://github.com/irwansyahwii/Famous-Vue" target="_blank" rel="noopener">https://github.com/irwansyahwii/Famous-Vue</a> Famous-Vue-Famous库的vue组件</p>
<p><a href="https://github.com/LeoHuiyi/leo-vue-validator" target="_blank" rel="noopener">https://github.com/LeoHuiyi/leo-vue-validator</a> leo-vue-validator-异步的表单验证组件</p>
<p><a href="https://github.com/MetinSeylan/Vue-Easy-Validator" target="_blank" rel="noopener">https://github.com/MetinSeylan/Vue-Easy-Validator</a> Vue-Easy-Validator-简单的表单验证</p>
<p><a href="https://github.com/imcvampire/vue-truncate-filter" target="_blank" rel="noopener">https://github.com/imcvampire/vue-truncate-filter</a> vue-truncate-filter-截断字符串的VueJS过滤器</p>
<p><a href="https://github.com/vue-comps/vue-zoombox" target="_blank" rel="noopener">https://github.com/vue-comps/vue-zoombox</a> vue-zoombox-一个高级zoombox</p>
<p><a href="https://github.com/syropian/vue-input-autosize" target="_blank" rel="noopener">https://github.com/syropian/vue-input-autosize</a> vue-input-autosize-基于内容自动调整文本输入的大小</p>
<p><a href="https://github.com/yodfz/vue-lazyloadImg" target="_blank" rel="noopener">https://github.com/yodfz/vue-lazyloadImg</a> vue-lazyloadImg-图片懒加载插件</p>
<p>服务端</p>
<p><a href="https://github.com/nuxt/nuxt.js" target="_blank" rel="noopener">https://github.com/nuxt/nuxt.js</a> nuxt.js-用于服务器渲染Vue app的最小化框架</p>
<p><a href="https://github.com/danmademe/express-vue" target="_blank" rel="noopener">https://github.com/danmademe/express-vue</a> express-vue-简单的使用服务器端渲染vue.js</p>
<p><a href="https://github.com/ccforward/vue-ssr" target="_blank" rel="noopener">https://github.com/ccforward/vue-ssr</a> vue-ssr-非常简单的VueJS服务器端渲染模板</p>
<p><a href="https://github.com/hilongjw/vue-ssr" target="_blank" rel="noopener">https://github.com/hilongjw/vue-ssr</a> vue-ssr-结合Express使用Vue2服务端渲染</p>
<p><a href="https://github.com/leaves4j/vue-easy-renderer" target="_blank" rel="noopener">https://github.com/leaves4j/vue-easy-renderer</a> vue-easy-renderer-Nodejs服务端渲染</p>
<p>辅助工具</p>
<p><a href="https://github.com/MiCottOn/DejaVue" target="_blank" rel="noopener">https://github.com/MiCottOn/DejaVue</a> DejaVue-Vuejs可视化及压力测试</p>
<p><a href="https://github.com/vue-play/vue-play" target="_blank" rel="noopener">https://github.com/vue-play/vue-play</a> vue-play-展示Vue组件的最小化框架</p>
<p><a href="https://github.com/OYsun/vscode-VueHelper" target="_blank" rel="noopener">https://github.com/OYsun/vscode-VueHelper</a> vscode-VueHelper-目前vscode最好的vue代码提示插件</p>
<p><a href="https://github.com/NetanelBasal/vue-generate-component" target="_blank" rel="noopener">https://github.com/NetanelBasal/vue-generate-component</a> vue-generate-component-轻松生成Vue js组件的CLI工具</p>
<p><a href="https://github.com/xwpongithub/vue-multipage-cli" target="_blank" rel="noopener">https://github.com/xwpongithub/vue-multipage-cli</a> vue-multipage-cli-简单的多页CLI</p>
<p><a href="https://github.com/MetinSeylan/VuejsStarterKit" target="_blank" rel="noopener">https://github.com/MetinSeylan/VuejsStarterKit</a> VuejsStarterKit-vuejs starter套件</p>
<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p><a href="https://github.com/phanan/koel" target="_blank" rel="noopener">https://github.com/phanan/koel</a> koel-基于网络的个人音频流媒体服务</p>
<p><a href="https://github.com/pagekit/pagekit" target="_blank" rel="noopener">https://github.com/pagekit/pagekit</a> pagekit-轻量级的CMS建站系统</p>
<p><a href="https://github.com/Vuedo/vuedo" target="_blank" rel="noopener">https://github.com/Vuedo/vuedo</a> vuedo-博客平台</p>
<p><a href="https://github.com/jackhutu/jackblog-vue" target="_blank" rel="noopener">https://github.com/jackhutu/jackblog-vue</a> jackblog-vue-个人博客系统</p>
<p><a href="https://github.com/lzxb/vue-cnode" target="_blank" rel="noopener">https://github.com/lzxb/vue-cnode</a> vue-cnode-重写vue版cnode社区</p>
<p><a href="https://github.com/ycwalker/CMS-of-Blog" target="_blank" rel="noopener">https://github.com/ycwalker/CMS-of-Blog</a> CMS-of-Blog-博客内容管理器</p>
<p><a href="https://github.com/mrgodhani/rss-reader" target="_blank" rel="noopener">https://github.com/mrgodhani/rss-reader</a> rss-reader-简单的rss阅读器</p>
<p><a href="https://github.com/viko16/vue-ghpages-blog" target="_blank" rel="noopener">https://github.com/viko16/vue-ghpages-blog</a> vue-ghpages-blog-依赖GitHub Pages无需本地生成的静态博客</p>
<p><a href="https://github.com/wh469012917/swoole-vue-webim" target="_blank" rel="noopener">https://github.com/wh469012917/swoole-vue-webim</a> swoole-vue-webim-Web版的聊天应用</p>
<p><a href="https://github.com/thelinuxlich/vue-dashing-js" target="_blank" rel="noopener">https://github.com/thelinuxlich/vue-dashing-js</a> vue-dashing-js-nuvo-dashing-js的fork</p>
<p><a href="https://github.com/sapjax/fewords" target="_blank" rel="noopener">https://github.com/sapjax/fewords</a> fewords-功能极其简单的笔记本</p>
<p><a href="https://github.com/surmon-china/vue-blog" target="_blank" rel="noopener">https://github.com/surmon-china/vue-blog</a> vue-blog-使用Vue2.0 和Vuex的vue-blog</p>
<h3 id="Demo示例"><a href="#Demo示例" class="headerlink" title="Demo示例"></a>Demo示例</h3><p><a href="https://github.com/shinygang/Vue-cnodejs" target="_blank" rel="noopener">https://github.com/shinygang/Vue-cnodejs</a> Vue-cnodejs-基于vue重写Cnodejs.org的webapp</p>
<p><a href="https://github.com/javaSwing/NeteaseCloudWebApp" target="_blank" rel="noopener">https://github.com/javaSwing/NeteaseCloudWebApp</a> NeteaseCloudWebApp-高仿网易云音乐的webapp</p>
<p><a href="https://github.com/hilongjw/vue-zhihu-daily" target="_blank" rel="noopener">https://github.com/hilongjw/vue-zhihu-daily</a> vue-zhihu-daily-知乎日报 with Vuejs</p>
<p><a href="https://github.com/useryangtao/vue-wechat" target="_blank" rel="noopener">https://github.com/useryangtao/vue-wechat</a> vue-wechat-vue.js开发微信app界面</p>
<p><a href="https://github.com/lzxb/vue2-demo" target="_blank" rel="noopener">https://github.com/lzxb/vue2-demo</a> vue2-demo-从零构建vue2 + vue-router + vuex 开发环境</p>
<p><a href="https://github.com/liangxiaojuan/eleme" target="_blank" rel="noopener">https://github.com/liangxiaojuan/eleme</a> eleme-高仿饿了么app商家详情</p>
<p><a href="https://github.com/kenberkeley/vue-demo" target="_blank" rel="noopener">https://github.com/kenberkeley/vue-demo</a> vue-demo-vue简易留言板</p>
<p><a href="https://github.com/zhengguorong/maizuo" target="_blank" rel="noopener">https://github.com/zhengguorong/maizuo</a> maizuo-vue/vuex/redux仿卖座网</p>
<p><a href="https://github.com/codecasts/spa-starter-kit" target="_blank" rel="noopener">https://github.com/codecasts/spa-starter-kit</a> spa-starter-kit-单页应用启动套件</p>
<p><a href="https://github.com/Sioxas/vue-music" target="_blank" rel="noopener">https://github.com/Sioxas/vue-music</a> vue-music-Vue 音乐搜索播放</p>
<p><a href="https://github.com/jiakeqi/douban" target="_blank" rel="noopener">https://github.com/jiakeqi/douban</a> douban-模仿豆瓣前端</p>
<p><a href="https://github.com/liangxiaojuan/vue-Meizi" target="_blank" rel="noopener">https://github.com/liangxiaojuan/vue-Meizi</a> vue-Meizi-vue最新实战项目</p>
<p><a href="https://github.com/yatessss/zhihudaily-vue" target="_blank" rel="noopener">https://github.com/yatessss/zhihudaily-vue</a> zhihudaily-vue-知乎日报web版</p>
<p><a href="https://github.com/lavyun/vue-demo-kugou" target="_blank" rel="noopener">https://github.com/lavyun/vue-demo-kugou</a> vue-demo-kugou-vuejs仿写酷狗音乐webapp</p>
<p><a href="https://github.com/SimonZhangITer/VueDemo_Sell_Eleme" target="_blank" rel="noopener">https://github.com/SimonZhangITer/VueDemo_Sell_Eleme</a> VueDemo_Sell_Eleme-Vue2高仿饿了么外卖平台</p>
<p><a href="https://github.com/canfoo/vue2.0-taopiaopiao" target="_blank" rel="noopener">https://github.com/canfoo/vue2.0-taopiaopiao</a> vue2.0-taopiaopiao-vue2.0与express构建淘票票页面</p>
<p><a href="https://github.com/jiangjiu/vue-leancloud-blog" target="_blank" rel="noopener">https://github.com/jiangjiu/vue-leancloud-blog</a> vue-leancloud-blog-一个前后端完全分离的单页应用</p>
<p><a href="https://github.com/yjj5855/node-vue-server-webpack" target="_blank" rel="noopener">https://github.com/yjj5855/node-vue-server-webpack</a> node-vue-server-webpack-Node.js+Vue.js+webpack快速开发框架</p>
<p><a href="https://github.com/wendaosanshou/mi-by-vue" target="_blank" rel="noopener">https://github.com/wendaosanshou/mi-by-vue</a> mi-by-vue-VueJS仿小米官网</p>
<p><a href="https://github.com/okoala/vue-fis3" target="_blank" rel="noopener">https://github.com/okoala/vue-fis3</a> vue-fis3-流行开源工具集成demo</p>
<p><a href="https://github.com/superman66/vue2.x-douban" target="_blank" rel="noopener">https://github.com/superman66/vue2.x-douban</a> vue2.x-douban-Vue2实现简易豆瓣电影webApp</p>
<p><a href="https://github.com/ChuckCZC/vue-demo-maizuo" target="_blank" rel="noopener">https://github.com/ChuckCZC/vue-demo-maizuo</a> vue-demo-maizuo-使用Vue2全家桶仿制卖座电影</p>
<p><a href="https://github.com/iHaPBoy/vue-zhihudaily" target="_blank" rel="noopener">https://github.com/iHaPBoy/vue-zhihudaily</a> vue-zhihudaily-知乎日报 Web 版本</p>
<p><a href="https://github.com/liujians/vue-adminLte-vue-router" target="_blank" rel="noopener">https://github.com/liujians/vue-adminLte-vue-router</a> vue-adminLte-vue-router-vue和adminLte整合应用</p>
<p><a href="https://github.com/superman66/vue-axios-github" target="_blank" rel="noopener">https://github.com/superman66/vue-axios-github</a> vue-axios-github-登录拦截登出功能</p>
<p><a href="https://github.com/pomelo-chuan/Zhihu-Daily-Vue.js" target="_blank" rel="noopener">https://github.com/pomelo-chuan/Zhihu-Daily-Vue.js</a> Zhihu-Daily-Vue.js-Vuejs单页网页应用</p>
<p><a href="https://github.com/rokups/hello-vue-django" target="_blank" rel="noopener">https://github.com/rokups/hello-vue-django</a> hello-vue-django-使用带有Django的vuejs的样板项目</p>
<p><a href="https://github.com/wszgxa/vue-cnode" target="_blank" rel="noopener">https://github.com/wszgxa/vue-cnode</a> vue-cnode-vue单页应用demo</p>
<p><a href="https://github.com/CommanderXL/x-blog" target="_blank" rel="noopener">https://github.com/CommanderXL/x-blog</a> x-blog-开源的个人blog项目</p>
<p><a href="https://github.com/xrr2016/vue-express-mongodb" target="_blank" rel="noopener">https://github.com/xrr2016/vue-express-mongodb</a> vue-express-mongodb-简单的前后端分离案例</p>
<p><a href="https://github.com/secreter/websocket_chat" target="_blank" rel="noopener">https://github.com/secreter/websocket_chat</a> websocket_chat-基于vue和websocket的多人在线聊天室</p>
<p><a href="https://github.com/beidan/photoShare" target="_blank" rel="noopener">https://github.com/beidan/photoShare</a> photoShare-基于图片分享的社交平台</p>
<p><a href="https://github.com/cs1707/vue-zhihudaily-2.0" target="_blank" rel="noopener">https://github.com/cs1707/vue-zhihudaily-2.0</a> vue-zhihudaily-2.0-使用Vue2.0+vue-router+vuex创建的zhihudaily</p>
<p><a href="https://github.com/lin-xin/notepad" target="_blank" rel="noopener">https://github.com/lin-xin/notepad</a> notepad-本地存储的记事本</p>
<p><a href="https://github.com/elva2596/vueBlog" target="_blank" rel="noopener">https://github.com/elva2596/vueBlog</a> vueBlog-前后端分离博客</p>
<p><a href="https://github.com/hql123/vue-ruby-china" target="_blank" rel="noopener">https://github.com/hql123/vue-ruby-china</a> vue-ruby-china-VueJS框架搭建的rubychina平台</p>
<p><a href="https://github.com/littlewin-wang/Zhihu_Daily" target="_blank" rel="noopener">https://github.com/littlewin-wang/Zhihu_Daily</a> Zhihu_Daily-基于Vue和Nodejs的Web单页应用</p>
<p><a href="https://github.com/Molunerfinn/vue-koa-demo" target="_blank" rel="noopener">https://github.com/Molunerfinn/vue-koa-demo</a> vue-koa-demo-使用Vue2和Koa1的全栈demo</p>
<p><a href="https://github.com/vincentSea/vue2.x-Cnode" target="_blank" rel="noopener">https://github.com/vincentSea/vue2.x-Cnode</a> vue2.x-Cnode-基于vue全家桶的Cnode社区</p>
<p><a href="https://github.com/shaqihe/life-app-vue" target="_blank" rel="noopener">https://github.com/shaqihe/life-app-vue</a> life-app-vue-使用vue2完成多功能集合到小webapp</p>
<p><a href="https://github.com/SidKwok/github-explorer" target="_blank" rel="noopener">https://github.com/SidKwok/github-explorer</a> github-explorer-寻找最有趣的GitHub库</p>
<p><a href="https://github.com/wenye123/vue-trip" target="_blank" rel="noopener">https://github.com/wenye123/vue-trip</a> vue-trip-vue2做的出行webapp</p>
<p><a href="https://github.com/albertchan/vue-ssr-boilerplate" target="_blank" rel="noopener">https://github.com/albertchan/vue-ssr-boilerplate</a> vue-ssr-boilerplate-精简版的ofvue-hackernews-2</p>
<p><a href="https://github.com/nswbmw/vue-bushishiren" target="_blank" rel="noopener">https://github.com/nswbmw/vue-bushishiren</a> vue-bushishiren-不是诗人应用</p>
<p><a href="https://github.com/peng1992/houtai" target="_blank" rel="noopener">https://github.com/peng1992/houtai</a> houtai-基于vue和Element的后台管理系统</p>
<p><a href="https://github.com/QRL909109/ios7-vue" target="_blank" rel="noopener">https://github.com/QRL909109/ios7-vue</a> ios7-vue-使用vue2.0 vue-router vuex模拟ios7</p>
<p><a href="https://github.com/tyllo/Framework7-VueJS" target="_blank" rel="noopener">https://github.com/tyllo/Framework7-VueJS</a> Framework7-VueJS-使用移动框架的示例</p>
<p><a href="https://github.com/BubblyPoker/cnode-vue" target="_blank" rel="noopener">https://github.com/BubblyPoker/cnode-vue</a> cnode-vue-基于vue和vue-router构建的cnodejs web网站SPA</p>
<p><a href="https://github.com/zhoou/vue-cli-multipage-bootstrap" target="_blank" rel="noopener">https://github.com/zhoou/vue-cli-multipage-bootstrap</a> vue-cli-multipage-bootstrap-将vue官方在线示例整合到组件中</p>
<p><a href="https://github.com/jiananle/vue-cnode" target="_blank" rel="noopener">https://github.com/jiananle/vue-cnode</a> vue-cnode-用 Vue 做的 CNode 官网</p>
<p><a href="https://github.com/GitaiQAQ/HyaReader" target="_blank" rel="noopener">https://github.com/GitaiQAQ/HyaReader</a> HyaReader-移动友好的阅读器</p>
<p><a href="https://github.com/xrr2016/zhihu-daily" target="_blank" rel="noopener">https://github.com/xrr2016/zhihu-daily</a> zhihu-daily-轻松查看知乎日报内容</p>
<p><a href="https://github.com/Alex-xd/seeMusic" target="_blank" rel="noopener">https://github.com/Alex-xd/seeMusic</a> seeMusic-跨平台云音乐播放器</p>
<p><a href="https://github.com/Damonlw/vue-cnode" target="_blank" rel="noopener">https://github.com/Damonlw/vue-cnode</a> vue-cnode-使用cNode社区提供的接口</p>
<p><a href="https://github.com/moonou/zhihu-daily-vue" target="_blank" rel="noopener">https://github.com/moonou/zhihu-daily-vue</a> zhihu-daily-vue-知乎日报</p>
<p><a href="https://github.com/sailengsi/sls-vuex2-demo" target="_blank" rel="noopener">https://github.com/sailengsi/sls-vuex2-demo</a> sls-vuex2-demo-vuex2商城购物车demo</p>
<p><a href="https://github.com/ITCNZ/vue-dropload" target="_blank" rel="noopener">https://github.com/ITCNZ/vue-dropload</a> vue-dropload-用以测试下拉加载与简单路由</p>
<p><a href="https://github.com/soulcm/vue-cnode-mobile" target="_blank" rel="noopener">https://github.com/soulcm/vue-cnode-mobile</a> vue-cnode-mobile-搭建cnode社区</p>
<p><a href="https://github.com/fishenal/Vuejs-SalePlatform" target="_blank" rel="noopener">https://github.com/fishenal/Vuejs-SalePlatform</a> Vuejs-SalePlatform-vuejs搭建的售卖平台demo</p>
<p><a href="https://github.com/Halfeld/v-notes" target="_blank" rel="noopener">https://github.com/Halfeld/v-notes</a> v-notes-简单美观的记事本</p>
<p><a href="https://github.com/BosNaufal/vue-starter" target="_blank" rel="noopener">https://github.com/BosNaufal/vue-starter</a> vue-starter-VueJs项目的简单启动页</p>
<p><a href="https://github.com/youknowznm/vue-memo" target="_blank" rel="noopener">https://github.com/youknowznm/vue-memo</a> vue-memo-用 vue写的记事本应用</p>
]]></content>
  </entry>
  <entry>
    <title>typescript学习笔记(三)</title>
    <url>/2019/10/28/typescript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/</url>
    <content><![CDATA[<h1 id="typescript学习笔记-三"><a href="#typescript学习笔记-三" class="headerlink" title="typescript学习笔记(三)"></a>typescript学习笔记(三)</h1><h2 id="1-接口"><a href="#1-接口" class="headerlink" title="1.接口"></a>1.接口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 传入的参数必须包含</span><br><span class="line">interface FullName &#123;</span><br><span class="line">    firstName:string;</span><br><span class="line">    secondName:string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择传参"><a href="#选择传参" class="headerlink" title="选择传参"></a>选择传参</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface FullName &#123;</span><br><span class="line">    firstName:string;</span><br><span class="line">    secondName?:string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function printName(name:FullName) &#123;</span><br><span class="line">    console.log(name.firstName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数类型的接口"><a href="#函数类型的接口" class="headerlink" title="函数类型的接口"></a>函数类型的接口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface encrypt &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line">function md5(params: encrypt): string &#123;</span><br><span class="line">    return params.name + &apos;--&apos; + params.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let a: encrypt = &#123;</span><br><span class="line">    name: &apos;xxx&apos;,</span><br><span class="line">    age: 111</span><br><span class="line">&#125;;</span><br><span class="line">console.log(md5(a));</span><br></pre></td></tr></table></figure>

<h3 id="可索引接口"><a href="#可索引接口" class="headerlink" title="可索引接口"></a>可索引接口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface arr &#123;</span><br><span class="line">    [index:number]:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let arr:arr = [&apos;11&apos;,&apos;22&apos;,&apos;33&apos;]</span><br></pre></td></tr></table></figure>

<h3 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface animal &#123;</span><br><span class="line">    name:string,</span><br><span class="line">    eat(food:string):void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog implements animal &#123;</span><br><span class="line">    name:string;</span><br><span class="line">    constructor(name:string) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;;</span><br><span class="line">    eat():void &#123;</span><br><span class="line">        console.log(this.name+&apos;吃骨头&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let zyp = new Dog(&apos;zyp&apos;);</span><br><span class="line">zyp.eat();</span><br><span class="line">// 此处对不起某人</span><br></pre></td></tr></table></figure>

<h3 id="接口拓展-接口可继承"><a href="#接口拓展-接口可继承" class="headerlink" title="接口拓展,接口可继承"></a>接口拓展,接口可继承</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface animal &#123;</span><br><span class="line">    eat(): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface person &#123;</span><br><span class="line">    work(): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class web implements person &#123;</span><br><span class="line">    public name: string;</span><br><span class="line">    constructor(name: string) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    eat() &#123;</span><br><span class="line">        console.log(this.name + &apos;吃东西&apos;);</span><br><span class="line">    &#125;;</span><br><span class="line">    work() &#123;</span><br><span class="line">        console.log(this.name + &apos;在工作&apos;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let lizhao = new web(&apos;lizhao&apos;);</span><br><span class="line">lizhao.eat();</span><br><span class="line">lizhao.work();</span><br></pre></td></tr></table></figure>

<h3 id="接口扩展延伸"><a href="#接口扩展延伸" class="headerlink" title="接口扩展延伸"></a>接口扩展延伸</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface animal &#123;</span><br><span class="line">    eat(): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface person &#123;</span><br><span class="line">    work(): void</span><br><span class="line">&#125;</span><br><span class="line">// 在这里定义一个类</span><br><span class="line">class hero &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    constructor(name: string) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class web extends hero implements person &#123;</span><br><span class="line">    // public name: string;</span><br><span class="line">    constructor(name: string) &#123;</span><br><span class="line">        // this.name = name;</span><br><span class="line">        super(name);</span><br><span class="line">    &#125;</span><br><span class="line">    eat() &#123;</span><br><span class="line">        console.log(this.name + &apos;吃东西&apos;);</span><br><span class="line">    &#125;;</span><br><span class="line">    work() &#123;</span><br><span class="line">        console.log(this.name + &apos;在工作&apos;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let lizhao = new web(&apos;lizhao&apos;);</span><br><span class="line">lizhao.eat();</span><br><span class="line">lizhao.work();</span><br></pre></td></tr></table></figure>

<h2 id="2-泛类"><a href="#2-泛类" class="headerlink" title="2.泛类"></a>2.泛类</h2><h3 id="泛类的定义"><a href="#泛类的定义" class="headerlink" title="泛类的定义"></a>泛类的定义</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface work&lt;T&gt; &#123;</span><br><span class="line">    coding?: T;</span><br><span class="line">    hard(): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class hero&lt;T&gt; implements work&lt;T&gt; &#123;</span><br><span class="line">    name: T;</span><br><span class="line">    constructor(name: T) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    hard(): T &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let lizhao = new hero&lt;string&gt;(&apos;lizhao&apos;);</span><br><span class="line">console.log(lizhao.hard());</span><br><span class="line">let zyp = new hero&lt;number&gt;(123);</span><br><span class="line">console.log(zyp.hard());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface test&lt;T&gt; &#123;</span><br><span class="line">    test1: T;</span><br><span class="line">    test2(): T;</span><br><span class="line">&#125;</span><br><span class="line">let a: test&lt;string&gt; = &#123;</span><br><span class="line">    test1: &apos;111&apos;,</span><br><span class="line">    test2() &#123;</span><br><span class="line">        return &apos;111&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">let b: test&lt;number&gt; = &#123;</span><br><span class="line">    test1: 111,</span><br><span class="line">    test2() &#123;</span><br><span class="line">        return 123</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class test3&lt;T&gt; implements test&lt;T&gt; &#123;</span><br><span class="line">    name: T;</span><br><span class="line">    test1: T;</span><br><span class="line">    constructor(name: T, test1: T) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.test1 = test1;</span><br><span class="line">    &#125;;</span><br><span class="line">    test2(): T &#123;</span><br><span class="line">        return this.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let c = new test3&lt;number&gt;(b.test1, b.test2());</span><br><span class="line">console.log(c);</span><br></pre></td></tr></table></figure>

<h3 id="类继承接口-类继承类"><a href="#类继承接口-类继承类" class="headerlink" title="类继承接口,类继承类"></a>类继承接口,类继承类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface test &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    say(): void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class test2 implements test &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    constructor(name: string) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;;</span><br><span class="line">    say(): void &#123;</span><br><span class="line">        console.log(&apos;这是一个小demo&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class test3 extends test2 &#123;</span><br><span class="line">    constructor(name: string) &#123;</span><br><span class="line">        super(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let a= new test3(&apos;111&apos;);</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure>

<h3 id="泛类类继承泛类接口-泛类类继承泛类类"><a href="#泛类类继承泛类接口-泛类类继承泛类类" class="headerlink" title="泛类类继承泛类接口,泛类类继承泛类类"></a>泛类类继承泛类接口,泛类类继承泛类类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface test&lt;T&gt; &#123;</span><br><span class="line">    name: T;</span><br><span class="line">    say(): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class test2&lt;T&gt; implements test&lt;T&gt; &#123;</span><br><span class="line">    name: T;</span><br><span class="line">    constructor(name: T) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;;</span><br><span class="line">    say(): T &#123;</span><br><span class="line">        return this.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class test3&lt;T&gt; extends test2&lt;T&gt; &#123;</span><br><span class="line">    constructor(name: T) &#123;</span><br><span class="line">        super(name);</span><br><span class="line">    &#125;;</span><br><span class="line">    say(): T &#123;</span><br><span class="line">        return `$&#123;this.name&#125;在干活`</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let lizhao = new test3(&apos;lizhao&apos;);</span><br><span class="line">console.log(lizhao.say());</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>如何离线安装npm依赖包</title>
    <url>/2019/10/22/%E5%A6%82%E4%BD%95%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85npm%E4%BE%9D%E8%B5%96%E5%8C%85/</url>
    <content><![CDATA[<h1 id="离线安装npm包"><a href="#离线安装npm包" class="headerlink" title="离线安装npm包"></a>离线安装npm包</h1><h2 id="1-缘由"><a href="#1-缘由" class="headerlink" title="1.缘由"></a>1.缘由</h2><p>npm包管理工具作为我们前端开发者使用的工具,有时候因为一些业务的特殊性,需要将npm包离线安装</p>
<h2 id="2-过程"><a href="#2-过程" class="headerlink" title="2.过程"></a>2.过程</h2><p>在有网的电脑中安装需要的依赖包(注意:需要全局安装)</p>
<p>例如我们现在安装一个jquery的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install jquery -g</span><br></pre></td></tr></table></figure>

<p>当我们安装好全局的jquery包的时候,就可以在全局依赖包下面找到jquery包的缓存</p>
<p>地址在</p>
<p><code>C:\Users\你的电脑用户名\AppData\Roaming\npm-cache</code></p>
<p>这里复制<code>npm-cache</code>文件夹即可</p>
<p>然后在离线的电脑中导入<code>npm-cache</code>文件夹</p>
<p>然后执行命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --cache ./npm-cache --optional --cache-min <span class="number">99999999999</span> --shrinkwrap <span class="literal">false</span> jquery</span><br></pre></td></tr></table></figure>

<p>这样就可以把npm包装到离线的电脑中</p>
]]></content>
  </entry>
  <entry>
    <title>typescript学习笔记(二)</title>
    <url>/2019/10/20/typescript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="typescript学习-二"><a href="#typescript学习-二" class="headerlink" title="typescript学习(二)"></a>typescript学习(二)</h1><h2 id="1-类"><a href="#1-类" class="headerlink" title="1.类"></a>1.类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// typescript 类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// es5中增加构造函数</span><br><span class="line">function person2() &#123;</span><br><span class="line">    this.name = &quot;name&quot;;</span><br><span class="line">    this.age = &quot;age&quot;;</span><br><span class="line">&#125;</span><br><span class="line">this.hero = new person2();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 构造函数和原型链增加方法</span><br><span class="line">function person3() &#123;</span><br><span class="line">    this.name = &quot;name&quot;;</span><br><span class="line">    this.age = &quot;age&quot;;</span><br><span class="line">    this.say = function () &#123;</span><br><span class="line">        console.log(&apos;say&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 原型链增加属性和方法</span><br><span class="line">person3.prototype.sex = &quot;男&quot;;</span><br><span class="line">person3.prototype.run = function () &#123;</span><br><span class="line">    console.log(&apos;run&apos;);</span><br><span class="line">&#125;</span><br><span class="line">this.hero = new person3();</span><br><span class="line"></span><br><span class="line">// es5中的继承(原型链继承/对象冒充)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 对象冒充继承</span><br><span class="line">// 对象冒充继承可以构造函数里面的属性和方法,没办法继承原型链上面的属性和方法</span><br><span class="line">function person4() &#123;</span><br><span class="line">    this.name = &quot;name&quot;;</span><br><span class="line">    this.age = &quot;age&quot;;</span><br><span class="line">    this.say = function () &#123;</span><br><span class="line">        console.log(&apos;say&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function web() &#123;</span><br><span class="line">    person4.call(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 原型链继承</span><br><span class="line"></span><br><span class="line">function web2() &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">web2.prototype = new person4();</span><br><span class="line"></span><br><span class="line">// 原型链继承+对象冒充</span><br><span class="line"></span><br><span class="line">function web2() &#123;</span><br><span class="line">    person3.call(this);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">web2.prototype = new person3();</span><br><span class="line"></span><br><span class="line">// 第二种继承方法</span><br><span class="line"></span><br><span class="line">// 原型链继承+对象冒充</span><br><span class="line"></span><br><span class="line">function web2() &#123;</span><br><span class="line">    person3.call(this);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">web2.prototype = person3.prototype;</span><br></pre></td></tr></table></figure>

<h3 id="ts中定义类"><a href="#ts中定义类" class="headerlink" title="ts中定义类"></a>ts中定义类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// ts中定义类</span><br><span class="line"></span><br><span class="line">class person &#123;</span><br><span class="line">    name:string; // 属性</span><br><span class="line">    age:number;</span><br><span class="line">    constructor(name:string,age:number) &#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125; // 构造函数</span><br><span class="line">    say():void&#123;</span><br><span class="line">        console.log(&apos;say&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let a = new person(&apos;xxx&apos;,12);</span><br><span class="line">a.say();</span><br></pre></td></tr></table></figure>

<h3 id="ts实现继承"><a href="#ts实现继承" class="headerlink" title="ts实现继承"></a>ts实现继承</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ts中实现继承</span></span><br><span class="line"><span class="keyword">class</span> person &#123;</span><br><span class="line">    name:<span class="built_in">string</span>; <span class="comment">// 属性</span></span><br><span class="line">    age:<span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125; <span class="comment">// 构造函数</span></span><br><span class="line">    say():<span class="built_in">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'say'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> person(<span class="string">'xxx'</span>,<span class="number">23</span>);</span><br><span class="line">a.say();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承使用extends,super关键字</span></span><br><span class="line"><span class="keyword">class</span> web <span class="keyword">extends</span> person &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> web(<span class="string">'xxx'</span>,<span class="number">24</span>);</span><br><span class="line">b.say();</span><br></pre></td></tr></table></figure>

<p>父类子类有同样的方法的时候,优先使用子类的方法</p>
<h3 id="ts中的类的修饰符"><a href="#ts中的类的修饰符" class="headerlink" title="ts中的类的修饰符"></a>ts中的类的修饰符</h3><p>public:公有的类,在类,子类类外面都可以访问</p>
<p>protected:保护类型,子类中可以访问外面不可以访问</p>
<p>private:私有类型 在子类的和外面都不可以访问</p>
]]></content>
  </entry>
  <entry>
    <title>typescript学习笔记(一)</title>
    <url>/2019/10/16/typescript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>

<p>安装完成后运行</p>
<p><code>tsc -v</code>(查看版本号)</p>
<h2 id="2-typescript的数据类型"><a href="#2-typescript的数据类型" class="headerlink" title="2.typescript的数据类型"></a>2.typescript的数据类型</h2><h3 id="一、布尔类型（boolean）"><a href="#一、布尔类型（boolean）" class="headerlink" title="一、布尔类型（boolean）"></a>一、布尔类型（boolean）</h3><p><code>let flag:Boolean = true;</code></p>
<h3 id="二、数字类型（number）"><a href="#二、数字类型（number）" class="headerlink" title="二、数字类型（number）"></a>二、数字类型（number）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num:number;</span><br><span class="line">num=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="三、字符串类型-string"><a href="#三、字符串类型-string" class="headerlink" title="三、字符串类型(string)"></a>三、字符串类型(string)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a:string;</span><br><span class="line">a=<span class="string">'111'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="四、数组类型（array）"><a href="#四、数组类型（array）" class="headerlink" title="四、数组类型（array）"></a>四、数组类型（array）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =number[];</span><br><span class="line">arr= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<h3 id="五、元组类型（tuple）"><a href="#五、元组类型（tuple）" class="headerlink" title="五、元组类型（tuple）"></a>五、元组类型（tuple）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 属于数组的一种</span></span><br><span class="line"><span class="keyword">let</span> arr:[number,string];</span><br><span class="line">arr = [<span class="number">1</span>,<span class="string">'2'</span>];</span><br></pre></td></tr></table></figure>

<h3 id="六、枚举类型（enum）"><a href="#六、枚举类型（enum）" class="headerlink" title="六、枚举类型（enum）"></a>六、枚举类型（enum）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum a &#123;<span class="string">'success'</span>=<span class="number">1</span>,<span class="string">'error'</span>=<span class="string">'0'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b=a.error;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h3 id="七、任意类型（any）"><a href="#七、任意类型（any）" class="headerlink" title="七、任意类型（any）"></a>七、任意类型（any）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指可以赋任意值给变量</span></span><br><span class="line"><span class="keyword">let</span> a:any;</span><br><span class="line">a=<span class="string">'123'</span>;</span><br><span class="line">a=<span class="number">123</span>;</span><br><span class="line">a=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h3 id="八、null-和-undefined"><a href="#八、null-和-undefined" class="headerlink" title="八、null 和 undefined"></a>八、null 和 undefined</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num:number | <span class="literal">null</span> |<span class="literal">undefined</span> ;</span><br><span class="line">num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<h3 id="九、void类型"><a href="#九、void类型" class="headerlink" title="九、void类型"></a>九、void类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示没有任何返回值;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 表示方法没有返回任何类型</span></span><br><span class="line">&#125;;</span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;;</span><br><span class="line">func2();</span><br></pre></td></tr></table></figure>

<h3 id="十、never类型"><a href="#十、never类型" class="headerlink" title="十、never类型"></a>十、never类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示从来不会出现的值</span></span><br><span class="line"><span class="keyword">let</span> a:never;</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<h2 id="3-typescript中定义函数的方法"><a href="#3-typescript中定义函数的方法" class="headerlink" title="3.typescript中定义函数的方法"></a>3.typescript中定义函数的方法</h2><h3 id="一、函数声明法"><a href="#一、函数声明法" class="headerlink" title="一、函数声明法"></a>一、函数声明法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'aaa'</span></span><br><span class="line">&#125;;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure>

<h3 id="二、匿名函数法"><a href="#二、匿名函数法" class="headerlink" title="二、匿名函数法"></a>二、匿名函数法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> func1=<span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1234</span>;</span><br><span class="line">&#125;;</span><br><span class="line">func1();</span><br></pre></td></tr></table></figure>

<h3 id="三、typescript中定义方法传参"><a href="#三、typescript中定义方法传参" class="headerlink" title="三、typescript中定义方法传参"></a>三、typescript中定义方法传参</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params">name:string,age:number</span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line">getAge(<span class="string">'lz'</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getAge=<span class="function"><span class="keyword">function</span>(<span class="params">name:string,age:number</span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line">getAge(<span class="string">'lz'</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数没有返回值</span></span><br><span class="line"><span class="keyword">let</span> getAge=<span class="function"><span class="keyword">function</span>(<span class="params">name:string,age:number</span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'111'</span>)</span><br><span class="line">&#125;</span><br><span class="line">getAge(<span class="string">'lz'</span>,<span class="number">23</span>);</span><br></pre></td></tr></table></figure>

<h4 id="1-方法可选传参"><a href="#1-方法可选传参" class="headerlink" title="1.方法可选传参"></a>1.方法可选传参</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5中函数的形参和实参可以不一样,但是在ts中必须一样,如果不一样则需要配置可选参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getAge=<span class="function"><span class="keyword">function</span>(<span class="params">name:string,age?:number</span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line">getAge(<span class="string">'lz'</span>);</span><br><span class="line"><span class="comment">// 给参数加?为配置可选参数,可选参数必须配置到参数的最后面</span></span><br></pre></td></tr></table></figure>

<h4 id="2-设置默认参数"><a href="#2-设置默认参数" class="headerlink" title="2.设置默认参数"></a>2.设置默认参数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在es5中没有办法设置默认参数,在es6中和typescript中都可以配置默认参数</span></span><br><span class="line"><span class="keyword">let</span> getAge=<span class="function"><span class="keyword">function</span>(<span class="params">name:string=<span class="string">'lz'</span>,age?:number=<span class="number">23</span></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line">getAge(<span class="string">'lz'</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-剩余参数"><a href="#3-剩余参数" class="headerlink" title="3.剩余参数"></a>3.剩余参数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三点运算符的应用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllNumber</span>(<span class="params">...datalist:number[]</span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num:numer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;datalist.length;i++) &#123;</span><br><span class="line">        num+=datalist[i]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">getAge(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4-函数重载"><a href="#4-函数重载" class="headerlink" title="4.函数重载"></a>4.函数重载</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为了兼容es5和es6重载的写法,和java中有去区别</span></span><br><span class="line"><span class="comment">// es5中出现同名函数,下面函数会替换上面函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:string</span>):<span class="title">string</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">getInfo</span>(<span class="params">name:number</span>):<span class="title">number</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">getInfo</span>(<span class="params">name:any</span>):<span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> name = <span class="string">'string) &#123;</span></span><br><span class="line"><span class="string">       console.log('</span>函数重载<span class="string">');</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-箭头函数"><a href="#5-箭头函数" class="headerlink" title="5.箭头函数"></a>5.箭头函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this 指向上下文</span></span><br><span class="line">func(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'111'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>vue性能优化</title>
    <url>/2019/10/14/vue%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="vue性能优化"><a href="#vue性能优化" class="headerlink" title="vue性能优化"></a>vue性能优化</h3><h5 id="秒开率"><a href="#秒开率" class="headerlink" title="秒开率"></a>秒开率</h5><h5 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h5><h6 id="1-页面加载性能"><a href="#1-页面加载性能" class="headerlink" title="1.页面加载性能"></a>1.页面加载性能</h6><h6 id="2-动画与操作性能"><a href="#2-动画与操作性能" class="headerlink" title="2.动画与操作性能"></a>2.动画与操作性能</h6><h6 id="3-内存-电量消耗"><a href="#3-内存-电量消耗" class="headerlink" title="3.内存,电量消耗"></a>3.内存,电量消耗</h6><h5 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h5><h6 id="1-按需引入ui库"><a href="#1-按需引入ui库" class="headerlink" title="1.按需引入ui库"></a>1.按需引入ui库</h6><h6 id="2-公共js-css的抽离"><a href="#2-公共js-css的抽离" class="headerlink" title="2.公共js,css的抽离"></a>2.公共js,css的抽离</h6><h6 id="3-避免重复组件"><a href="#3-避免重复组件" class="headerlink" title="3.避免重复组件"></a>3.避免重复组件</h6><h5 id="vue-cli-3-0-配置优化"><a href="#vue-cli-3-0-配置优化" class="headerlink" title="vue-cli 3.0 配置优化"></a>vue-cli 3.0 配置优化</h5><p>在根目录下面新建vue.config.js</p>
<p>// 在打包前会先运行vue.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>); <span class="comment">// 引入路径</span></span><br><span class="line"><span class="keyword">const</span> uglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>); <span class="comment">// 引入webpack打包优化工具</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否在生产环境</span></span><br><span class="line"><span class="keyword">const</span> isProduction = process.env.NODE_ENV == <span class="string">"production"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 基本路径</span></span><br><span class="line">    publicPath: <span class="string">'./'</span>,</span><br><span class="line">    <span class="comment">// 输出的文件目录</span></span><br><span class="line">    outputDir: <span class="string">'dist'</span>,</span><br><span class="line">    <span class="comment">// ESlint的检查</span></span><br><span class="line">    lintOnSave: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 配置相关的服务</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        compress: <span class="literal">false</span>,</span><br><span class="line">        open: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">        <span class="comment">// 跨域请求</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http:xxxx.com'</span>, <span class="comment">//需要代理的服务器</span></span><br><span class="line">                ws: <span class="literal">true</span>, <span class="comment">// websocket</span></span><br><span class="line">                changeOrigin: <span class="literal">true</span>, <span class="comment">// 是否启用跨域</span></span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'/api'</span>: <span class="string">'/'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// css相关配置</span></span><br><span class="line">    css: &#123;</span><br><span class="line">        <span class="comment">// 全局引入sass</span></span><br><span class="line">        extract: <span class="literal">true</span>, <span class="comment">// 是否使用css的分离插件</span></span><br><span class="line">        sourceMap: <span class="literal">false</span>, <span class="comment">// 代码报错(会花费大量时间,方便开发人员错误定位)</span></span><br><span class="line">        <span class="comment">// css预处理器</span></span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">            sass: &#123;</span><br><span class="line">                data: <span class="string">`</span></span><br><span class="line"><span class="string">                    @import "@/assets/common/index.sass";</span></span><br><span class="line"><span class="string">                `</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        modules: <span class="literal">false</span>, <span class="comment">// 是否启用css的modules</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// webpack配置</span></span><br><span class="line">    chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 配置文件别名</span></span><br><span class="line">        config.resolve.alias</span><br><span class="line">            .set(<span class="string">"@"</span>, resolve(<span class="string">'src'</span>))</span><br><span class="line">        <span class="comment">// 生产环境配置</span></span><br><span class="line">        <span class="keyword">if</span> (isProduction) &#123;</span><br><span class="line">            <span class="comment">// 删除预加载</span></span><br><span class="line">            config.plugin.delete(<span class="string">'perload'</span>);</span><br><span class="line">            <span class="comment">// 压缩代码</span></span><br><span class="line">            config.optimization.minimize(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 分割代码</span></span><br><span class="line">            config.optimization.splitChunks(&#123;</span><br><span class="line">                chunks: <span class="string">'all'</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// CDN</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 测试环境</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isProduction) &#123;</span><br><span class="line">            config.plugin.push(</span><br><span class="line">                <span class="keyword">new</span> uglifyJsPlugin(&#123;</span><br><span class="line">                    compress: &#123;</span><br><span class="line">                        <span class="comment">// 删除cosole warning</span></span><br><span class="line">                        <span class="comment">// warning:false</span></span><br><span class="line">                        drop_debugger: <span class="literal">true</span>,</span><br><span class="line">                        drop_console: <span class="literal">true</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    sourceMapMap: <span class="literal">false</span>,</span><br><span class="line">                    <span class="comment">// 使用多进程并行提高构件速度</span></span><br><span class="line">                    parallel: <span class="literal">true</span></span><br><span class="line">                &#125;)</span><br><span class="line">            )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 测试环境</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 生产环境的</span></span><br><span class="line">    productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 启用并行化,默认的并发数大于1</span></span><br><span class="line">    parallel: <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length &gt; <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="深度打包优化"><a href="#深度打包优化" class="headerlink" title="深度打包优化"></a>深度打包优化</h5><h6 id="1-CDN节点"><a href="#1-CDN节点" class="headerlink" title="1.CDN节点"></a>1.CDN节点</h6><h6 id="2-gZip压缩"><a href="#2-gZip压缩" class="headerlink" title="2.gZip压缩"></a>2.gZip压缩</h6><h6 id="3-图片压缩"><a href="#3-图片压缩" class="headerlink" title="3.图片压缩"></a>3.图片压缩</h6>]]></content>
  </entry>
  <entry>
    <title>拾色器修改element-ui的主题色</title>
    <url>/2019/10/14/%E6%8B%BE%E8%89%B2%E5%99%A8%E4%BF%AE%E6%94%B9element-ui%E7%9A%84%E4%B8%BB%E9%A2%98%E8%89%B2/</url>
    <content><![CDATA[<h3 id="拾色器修改element-ui的主题色"><a href="#拾色器修改element-ui的主题色" class="headerlink" title="拾色器修改element-ui的主题色"></a>拾色器修改element-ui的主题色</h3><h4 id="1-官方推荐修改element-UI的修改主题色方案"><a href="#1-官方推荐修改element-UI的修改主题色方案" class="headerlink" title="1.官方推荐修改element-UI的修改主题色方案"></a>1.官方推荐修改element-UI的修改主题色方案</h4><p>首先在element-ui的官网上面已经提供了一种可行的按需加载引入css文件,解决更换主题色的方案</p>
<p>链接地址如下:<a href="https://element.eleme.cn/#/zh-CN/theme" target="_blank" rel="noopener">element-ui修改主题色</a></p>
<p>这种修改方式轻便小巧,只需要将插件包引入,然后在main.js做配置即可</p>
<p>首先编辑主题色</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g7xzowgu15j209u0nwq3d.jpg" alt="微信截图_20191014201310.png"></p>
<p>编辑好主题色以后我们就可以将主题色的包下载下来</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g7xzprjghdj209c07374a.jpg" alt="微信截图_20191014201411.png"></p>
<p>然后在vue项目中src目录下新建文件夹element-ui-theme,将下载好的主题色包解压放入其中</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g7xzr31snnj207v07d749.jpg" alt="微信截图_20191014201527.png"></p>
<p>然后在main.js中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@/element-ui'</span> <span class="comment">// 按需引入element-ui</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/element-ui-theme'</span>; <span class="comment">// 设置element-ui的主题色</span></span><br></pre></td></tr></table></figure>

<p>这种更换主题色的方式适用于项目中主题色确定后更换</p>
<h4 id="2-拾色器更换element-ui的主题色"><a href="#2-拾色器更换element-ui的主题色" class="headerlink" title="2.拾色器更换element-ui的主题色"></a>2.拾色器更换element-ui的主题色</h4><p>拾色器更换element-ui的主题色,首先需要引入两个依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　  npm install css-color-function  </span><br><span class="line"></span><br><span class="line">　　  npm install object-assign</span><br></pre></td></tr></table></figure>

<p>安装好这两个依赖后我们需要稍作配置</p>
<p>在src目录下的utils文件夹下新建color.js和formula.json</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> color <span class="keyword">from</span> <span class="string">'css-color-function'</span></span><br><span class="line"><span class="keyword">import</span> formula <span class="keyword">from</span> <span class="string">'./formula.json'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generateColors = <span class="function"><span class="params">primary</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> colors = &#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(primary)</span><br><span class="line">  <span class="built_in">Object</span>.keys(formula).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = formula[key].replace(<span class="regexp">/primary/g</span>, primary)</span><br><span class="line">    colors[key] = color.convert(value)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(colors)</span><br><span class="line">  <span class="keyword">return</span> colors</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> generateColors</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"shade-1"</span>: <span class="string">"color(primary shade(10%))"</span>,</span><br><span class="line">    <span class="attr">"light-1"</span>: <span class="string">"color(primary tint(10%))"</span>,</span><br><span class="line">    <span class="attr">"light-2"</span>: <span class="string">"color(primary tint(20%))"</span>,</span><br><span class="line">    <span class="attr">"light-3"</span>: <span class="string">"color(primary tint(30%))"</span>,</span><br><span class="line">    <span class="attr">"light-4"</span>: <span class="string">"color(primary tint(40%))"</span>,</span><br><span class="line">    <span class="attr">"light-5"</span>: <span class="string">"color(primary tint(50%))"</span>,</span><br><span class="line">    <span class="attr">"light-6"</span>: <span class="string">"color(primary tint(60%))"</span>,</span><br><span class="line">    <span class="attr">"light-7"</span>: <span class="string">"color(primary tint(70%))"</span>,</span><br><span class="line">    <span class="attr">"light-8"</span>: <span class="string">"color(primary tint(80%))"</span>,</span><br><span class="line">    <span class="attr">"light-9"</span>: <span class="string">"color(primary tint(90%))"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>然后由于我们已经引入了element-ui的组件了,为了防止组件出问题,我们需要在本地引入一个css文件</p>
<p>复制css文件到static文件夹新建css目录下的index.css文件中</p>
<p>地址:<a href="https://unpkg.com/element-ui@2.12.0/lib/theme-chalk/index.css" target="_blank" rel="noopener">css静态文件</a></p>
<p>如下图所示</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g7y00jhlxaj206m02mdfn.jpg" alt="微信截图_20191014202429.png"></p>
<p>然后在src的common公共组件文件夹中新建拾色器组件Theme.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 切换主题色  --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-color-picker  @change=&quot;colorChange&quot; v-model=&quot;colors.primary&quot; &gt;&lt;/el-color-picker&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import generateColors from &quot;../../utils/color&quot;;</span><br><span class="line">import objectAssign from &quot;object-assign&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            originalStylesheetCount: -1,//记录当前已引入style数量</span><br><span class="line">            originalStyle: &quot;&quot;,//获取拿到的.css的字符串</span><br><span class="line">            colors: &#123;</span><br><span class="line">                //颜色选择器默认颜色值,这个值要和element-variables一样</span><br><span class="line">                primary: &quot;#409EFF&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            // primaryColor: &quot;&quot;, //提交成功后设置默认颜色</span><br><span class="line">            cssUrl: [</span><br><span class="line">                &quot;//unpkg.com/element-ui/lib/theme-chalk/index.css&quot;,</span><br><span class="line">                &quot;./static/css/index.css&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        colorChange(e) &#123;</span><br><span class="line">            if(!e)return;</span><br><span class="line">            localStorage.setItem(&apos;color&apos;,e)</span><br><span class="line">            this.primaryColor = this.colors.primary;</span><br><span class="line">            this.colors = objectAssign(</span><br><span class="line">                &#123;&#125;,</span><br><span class="line">                this.colors,</span><br><span class="line">                generateColors(this.colors.primary)</span><br><span class="line">            );</span><br><span class="line">            this.writeNewStyle();</span><br><span class="line">        &#125;,</span><br><span class="line">        writeNewStyle() &#123;</span><br><span class="line">            let cssText = this.originalStyle;</span><br><span class="line">            Object.keys(this.colors).forEach(key =&gt; &#123;</span><br><span class="line">                cssText = cssText.replace(</span><br><span class="line">                    new RegExp(&quot;(:|\\s+)&quot; + key, &quot;g&quot;),</span><br><span class="line">                    &quot;$1&quot; + this.colors[key]</span><br><span class="line">                );</span><br><span class="line">            &#125;);</span><br><span class="line">            if (this.originalStylesheetCount === document.styleSheets.length) &#123;</span><br><span class="line">                // 如果之前没有插入就插入</span><br><span class="line">                const style = document.createElement(&quot;style&quot;);</span><br><span class="line">                style.innerText =</span><br><span class="line">                    &quot;.primaryColor&#123;background-color:&quot; + this.colors.primary + &quot;&#125;&quot; + cssText;</span><br><span class="line">                document.head.appendChild(style);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 如果之前没有插入就修改</span><br><span class="line">                document.head.lastChild.innerText =</span><br><span class="line">                    &quot;.primaryColor&#123;background-color:&quot; +</span><br><span class="line">                    this.colors.primary +</span><br><span class="line">                    &quot;&#125; &quot; +</span><br><span class="line">                    cssText;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        getIndexStyle(url) &#123;</span><br><span class="line">            let that = this;</span><br><span class="line">            var request = new XMLHttpRequest();</span><br><span class="line">            request.open(&quot;GET&quot;, url);</span><br><span class="line">            request.onreadystatechange = function() &#123;</span><br><span class="line">                if (</span><br><span class="line">                    request.readyState === 4 &amp;&amp;</span><br><span class="line">                    (request.status == 200 || request.status == 304)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    // 调用本地的如果拿不到会得到html,html是不行的</span><br><span class="line">                    if (request.response &amp;&amp; !/DOCTYPE/gi.test(request.response)) &#123;</span><br><span class="line">                        that.originalStyle = that.getStyleTemplate(request.response);</span><br><span class="line">                        that.writeNewStyle()</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        that.originalStyle = &quot;&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    that.originalStyle = &quot;&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            request.send(null);</span><br><span class="line">        &#125;,</span><br><span class="line">        getStyleTemplate(data) &#123;</span><br><span class="line">            const colorMap = &#123;</span><br><span class="line">                &quot;#3a8ee6&quot;: &quot;shade-1&quot;,</span><br><span class="line">                &quot;#409eff&quot;: &quot;primary&quot;,</span><br><span class="line">                &quot;#53a8ff&quot;: &quot;light-1&quot;,</span><br><span class="line">                &quot;#66b1ff&quot;: &quot;light-2&quot;,</span><br><span class="line">                &quot;#79bbff&quot;: &quot;light-3&quot;,</span><br><span class="line">                &quot;#8cc5ff&quot;: &quot;light-4&quot;,</span><br><span class="line">                &quot;#a0cfff&quot;: &quot;light-5&quot;,</span><br><span class="line">                &quot;#b3d8ff&quot;: &quot;light-6&quot;,</span><br><span class="line">                &quot;#c6e2ff&quot;: &quot;light-7&quot;,</span><br><span class="line">                &quot;#d9ecff&quot;: &quot;light-8&quot;,</span><br><span class="line">                &quot;#ecf5ff&quot;: &quot;light-9&quot;</span><br><span class="line">            &#125;;</span><br><span class="line">            Object.keys(colorMap).forEach(key =&gt; &#123;</span><br><span class="line">                const value = colorMap[key];</span><br><span class="line">                data = data.replace(new RegExp(key, &quot;ig&quot;), value);</span><br><span class="line">            &#125;);</span><br><span class="line">            return data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        // 默认从线上官方拉取最新css,2秒钟后做一个检查没有拉到就从本地在拉下</span><br><span class="line">        let that = this;</span><br><span class="line">        // 如果是记住用户的状态就需要，在主题切换的时候记录颜色值，在下次打开的时候从新赋值</span><br><span class="line">        this.colors.primary = localStorage.getItem(&apos;color&apos;)||this.colors.primary//例如</span><br><span class="line">        this.getIndexStyle(this.cssUrl[0]);</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            if (that.originalStyle) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                that.getIndexStyle(that.cssUrl[1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">        this.$nextTick(() =&gt; &#123;</span><br><span class="line">            // 获取页面一共引入了多少个style 文件</span><br><span class="line">            this.originalStylesheetCount = document.styleSheets.length;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>然后在需要设置的地方引入此组件即可~</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>此组件设置的主题色会在local storage中持续存储</p>
]]></content>
  </entry>
  <entry>
    <title>HTTP状态码总结</title>
    <url>/2019/10/10/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="HTTP状态码总结"><a href="#HTTP状态码总结" class="headerlink" title="HTTP状态码总结"></a>HTTP状态码总结</h3><h3 id="什么是HTTP状态码"><a href="#什么是HTTP状态码" class="headerlink" title="什么是HTTP状态码"></a>什么是HTTP状态码</h3><p><strong>HTTP状态码</strong>是服务端返回给客户端（因为这里是web开发，这里的客户端指浏览器客户端）的<code>3位数字代码</code>。</p>
<p>这些状态码相当于浏览器和服务器之间的对话信息。它们相互沟通两者之间的事情是正常运行了还是运行失败了或者发生了一些其他的事情（如Continue）。了解状态码有助于你快速的诊断错误，减少网站的停机时间等等。</p>
<h3 id="状态码分类"><a href="#状态码分类" class="headerlink" title="状态码分类"></a>状态码分类</h3><p>状态码共分为五类，以1-5数字开头进行标识，如下：</p>
<ul>
<li><strong>1xxs - 信息性</strong>：服务器正在处理请求。</li>
<li><strong>2xxs - 成功信息</strong>：请求已经完成，服务器向浏览器提供了预期的响应。</li>
<li><strong>3xxs –重定向</strong>：你的请求被重定向到了其他地方。服务器收到了请求，但是有某种重定向。</li>
<li><strong>4xxs – 客户端错误</strong>：客户端发生错误，导致服务器无法处理请求。</li>
<li><strong>5xxs – 服务端错误</strong>：客户端发出了有效的请求，但是服务器未能正确处理请求。</li>
</ul>
<blockquote>
<p>备注：3xxs类中的304是个奇葩，其不属于重定向信息提示，这个后面会讲到</p>
</blockquote>
<p><strong>HTTP状态码</strong>大体的内容已经了解了，但是在具体的工作中，要用到具体的状态码，我们下面来展开说明下各自的一些状态码和工作中常用到的那些状态码</p>
<h3 id="1xxs状态码"><a href="#1xxs状态码" class="headerlink" title="1xxs状态码"></a>1xxs状态码</h3><ul>
<li><strong>100 Continue</strong>：表明目前为止，所有的请求内容都是可行的，客户端应该继续请求，如果完成，则忽略它。</li>
<li><strong>101 Switching Protocol</strong>：该状态码是响应客户端<code>Upgrade</code>标头发送的，并且指示服务器也正在切换协议。</li>
<li><strong>103 Early Hints</strong>：主要用于与<code>Link</code>链接头一起使用，以允许用户代理在服务器仍在准备响应时开始预加载资源。</li>
</ul>
<blockquote>
<p>备注：在web开发的工作中，我们都会使用封装好的库进行接口请求，而且浏览器的控制台网络中也不会出现这类状态码的提示，所以这一大类基本不会接触到，了解一下即可。</p>
</blockquote>
<h3 id="2xxs状态码"><a href="#2xxs状态码" class="headerlink" title="2xxs状态码"></a>2xxs状态码</h3><ul>
<li><p><strong>200 OK</strong>：请求成功。成功的含义取决于HTTP方法：</p>
</li>
<li><ul>
<li><code>GET</code>：资源已被提取并在消息正文中传输。</li>
<li><code>HEAD</code>：实体标头位于消息正文中。</li>
<li><code>POST</code>：描述动作结果的资源在消息体中传输。</li>
<li><code>TRACE</code>：消息正文包含服务器收到的请求信息。（方法不安全，一般不用）</li>
</ul>
</li>
<li><p><strong>201 Created</strong>：请求已经成功，并因此创建了一个新的资源。这通常是在<code>PUT</code>或<code>POST</code>请求之后发送的响应。</p>
</li>
<li><p><strong>202 Accepted</strong>：请求已经接收到，但是没有响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。</p>
</li>
<li><p><strong>204 No Content</strong>：服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。遇到<code>复杂请求</code>时候，浏览器会发送一个<code>OPTION</code>方法进行预处理返回响应。</p>
</li>
<li><p><strong>205 Reset Content</strong>：服务器已经成功处理了请求，但是没有返回任何内容。与204响应不同，返回此状态码的响应要求请求者重置文档视图。</p>
</li>
</ul>
<blockquote>
<p>备注：使用的最多的2xxs状态码是200和204，在遇到204状态码的时候，要注意一下自己发的请求是不是复杂请求。如果是复杂请求，那么在得到204返回时，浏览器有没有接受了这个请求的返回，如果没有，要叫后端搞下相关配置了。</p>
</blockquote>
<h3 id="3xxs状态码"><a href="#3xxs状态码" class="headerlink" title="3xxs状态码"></a>3xxs状态码</h3><ul>
<li><strong>301 Moved Permanently</strong>：被请求的资源已<code>永久</code>移动到新位置，并且将来任何对此资源的引用都应该使用响应返回的若干个URI之一。</li>
<li><strong>302 Found(Previously “Moved temporarily”)</strong>：请求的资源现在<code>临时</code>从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在<code>Cache-Control</code>或<code>Expires</code>中进行了指定的情况下，这个响应才是可缓存的。</li>
<li><strong>303 See Other</strong>：对当前的请求的响应可以在另一个URI上被找到，而且客户端应该采用<code>GET</code>的方式访问那个链接。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。</li>
<li><strong>304 Not Modified</strong>：如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。请求的时候一般结合<code>If-Modified-Since</code>头部使用。</li>
<li><strong>307 Temporary Redirect</strong>：307的意义如上302。与历史上302不同的是<code>在重新发出原始请求时不允许更改请求方法</code>。比如，使用POST请求始终就该用POST请求。</li>
</ul>
<blockquote>
<p>备注：307和303已经替代了历史上的302状态码，现在看到的临时重定向的状态码是307。</p>
</blockquote>
<h3 id="4xxs状态码"><a href="#4xxs状态码" class="headerlink" title="4xxs状态码"></a>4xxs状态码</h3><ul>
<li><strong>401 Unauthorized</strong>：这意味着你的登录凭证无效。服务器不知道你是谁，这时，你需要尝试重新登录。</li>
<li><strong>403 Forbidden</strong>：服务器已经理解请求，但是拒绝执行它。与401不同，403知道是你登录了，但是还是拒绝了你。</li>
<li><strong>404 Not Found</strong>：请求失败，你请求所希望得到的资源未在服务器上发现。</li>
<li><strong>410 Gone</strong>：被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。</li>
<li><strong>422 Unprocessable Entity</strong>：请求格式良好，但是由于语义错误而无妨遵循。这时候要检查下自己的传参格式语义有没有正确了。</li>
<li><strong>429 Too Many Requests</strong>：用户在给定的时间内发送了太多请求（“限制请求速率”）。在DDOS攻击中就可以使用到了。</li>
</ul>
<blockquote>
<p>备注：这里要注意的是422，别请求链接一出错，就屁颠屁颠的找后端，先看下后端给过来的API文档中，要传的字段是否都准确跟上了。</p>
</blockquote>
<h3 id="5xxs状态码"><a href="#5xxs状态码" class="headerlink" title="5xxs状态码"></a>5xxs状态码</h3><ul>
<li><strong>500 Internal Server Error</strong>：服务器内部错误，服务器遇到了不知道如何处理的情况。比如后端同学写错了model啥的～</li>
<li><strong>503 Service Unavailable</strong>：服务器没有准备好处理请求。常见的原因是服务器因维护或重载而停机。</li>
<li><strong>504 Gateway Timeout</strong>：网关超时，服务器未能快速的做出反应。请求接口返回pedding时间过长基本就是这个问题了。</li>
</ul>
<blockquote>
<p>备注：遇到这类的问题，去问后端同学吧。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>element-ui表格实现可拖拽排序</title>
    <url>/2019/09/18/element-ui%E8%A1%A8%E6%A0%BC%E5%AE%9E%E7%8E%B0%E5%8F%AF%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="element-ui表格实现可拖拽排序"><a href="#element-ui表格实现可拖拽排序" class="headerlink" title="element-ui表格实现可拖拽排序"></a>element-ui表格实现可拖拽排序</h3><h4 id="1-最终效果"><a href="#1-最终效果" class="headerlink" title="1.最终效果"></a>1.最终效果</h4><p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g73vtm0s2rj20qa078wem.jpg" alt="TIM截图20190918191134.png"></p>
<p>可拖拽行/列<img src="http://ww1.sinaimg.cn/large/c596f419ly1g73vuebjk4j20nd06yaa7.jpg" alt="TIM截图20190918191317.png"></p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g73vv8nyvnj20nq070t8u.jpg" alt="TIM截图20190918191406.png"></p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g73vvm96o0j20pb077jrs.jpg" alt="TIM截图20190918191428.png"></p>
<h4 id="2-实现过程"><a href="#2-实现过程" class="headerlink" title="2.实现过程"></a>2.实现过程</h4><p>基于<code>SortableJS</code>可拖拽插件的实现</p>
<p><code>SortableJS</code>项目地址<a href="https://github.com/SortableJS/Sortable" target="_blank" rel="noopener">SortableJS</a></p>
<h5 id="1-引入SortableJS"><a href="#1-引入SortableJS" class="headerlink" title="1.引入SortableJS"></a>1.引入SortableJS</h5><p>Install with NPM:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm install sortablejs --save</span><br></pre></td></tr></table></figure>

<p>在main.js中引入或者在单独的组件中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Sortable <span class="keyword">from</span> <span class="string">'sortablejs'</span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-创建element-ui表格"><a href="#2-创建element-ui表格" class="headerlink" title="2.创建element-ui表格"></a>2.创建element-ui表格</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"tableData"</span> <span class="attr">border</span> <span class="attr">row-key</span>=<span class="string">"id"</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"(item, index) in col"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"`col_$&#123;index&#125;`"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:prop</span>=<span class="string">"dropCol[index].prop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:label</span>=<span class="string">"item.label"</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如上文循环创建了element-ui的表格内容</p>
<h5 id="3-在data中声明col-dropCol"><a href="#3-在data中声明col-dropCol" class="headerlink" title="3.在data中声明col,dropCol"></a>3.在data中声明col,dropCol</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">       col: [</span><br><span class="line">        &#123;</span><br><span class="line">          label: <span class="string">"日期"</span>,</span><br><span class="line">          prop: <span class="string">"date"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          label: <span class="string">"姓名"</span>,</span><br><span class="line">          prop: <span class="string">"name"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          label: <span class="string">"地址"</span>,</span><br><span class="line">          prop: <span class="string">"address"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      dropCol: [</span><br><span class="line">        &#123;</span><br><span class="line">          label: <span class="string">"日期"</span>,</span><br><span class="line">          prop: <span class="string">"date"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          label: <span class="string">"姓名"</span>,</span><br><span class="line">          prop: <span class="string">"name"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          label: <span class="string">"地址"</span>,</span><br><span class="line">          prop: <span class="string">"address"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],      <span class="attr">tableData</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">"1"</span>,</span><br><span class="line">          date: <span class="string">"2016-05-02"</span>,</span><br><span class="line">          name: <span class="string">"王小虎1"</span>,</span><br><span class="line">          address: <span class="string">"上海市普陀区金沙江路 100 弄"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">"2"</span>,</span><br><span class="line">          date: <span class="string">"2016-05-04"</span>,</span><br><span class="line">          name: <span class="string">"王小虎2"</span>,</span><br><span class="line">          address: <span class="string">"上海市普陀区金沙江路 200 弄"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">"3"</span>,</span><br><span class="line">          date: <span class="string">"2016-05-01"</span>,</span><br><span class="line">          name: <span class="string">"王小虎3"</span>,</span><br><span class="line">          address: <span class="string">"上海市普陀区金沙江路 300 弄"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">"4"</span>,</span><br><span class="line">          date: <span class="string">"2016-05-03"</span>,</span><br><span class="line">          name: <span class="string">"王小虎4"</span>,</span><br><span class="line">          address: <span class="string">"上海市普陀区金沙江路 400 弄"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以默认为例,顺便创建tableData,</p>
<p>此时我们就可以看到element-ui的默认表格了</p>
<h5 id="4-添加行拖拽-列拖拽事件"><a href="#4-添加行拖拽-列拖拽事件" class="headerlink" title="4.添加行拖拽,列拖拽事件"></a>4.添加行拖拽,列拖拽事件</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">//行拖拽</span></span><br><span class="line">  rowDrop() &#123;</span><br><span class="line">    <span class="keyword">const</span> tbody = <span class="built_in">document</span>.querySelector(<span class="string">".el-table__body-wrapper tbody"</span>);</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    Sortable.create(tbody, &#123;</span><br><span class="line">      onEnd(&#123; newIndex, oldIndex &#125;) &#123;</span><br><span class="line">        <span class="keyword">const</span> currRow = _this.tableData.splice(oldIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">        _this.tableData.splice(newIndex, <span class="number">0</span>, currRow);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//列拖拽</span></span><br><span class="line">  columnDrop() &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapperTr = <span class="built_in">document</span>.querySelector(<span class="string">".el-table__header-wrapper tr"</span>);</span><br><span class="line">    <span class="keyword">this</span>.sortable = Sortable.create(wrapperTr, &#123;</span><br><span class="line">      animation: <span class="number">180</span>,</span><br><span class="line">      delay: <span class="number">0</span>,</span><br><span class="line">      onEnd: <span class="function"><span class="params">evt</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> oldItem = <span class="keyword">this</span>.dropCol[evt.oldIndex];</span><br><span class="line">        <span class="keyword">this</span>.dropCol.splice(evt.oldIndex, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.dropCol.splice(evt.newIndex, <span class="number">0</span>, oldItem);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在methods中添加事件</p>
<h5 id="5-在生命周期函数中阻止默认行为并加载拖拽事件"><a href="#5-在生命周期函数中阻止默认行为并加载拖拽事件" class="headerlink" title="5.在生命周期函数中阻止默认行为并加载拖拽事件"></a>5.在生命周期函数中阻止默认行为并加载拖拽事件</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">          <span class="comment">// 阻止默认行为</span></span><br><span class="line">      <span class="built_in">document</span>.body.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">        event.stopPropagation();</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">this</span>.rowDrop();</span><br><span class="line">      <span class="keyword">this</span>.columnDrop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时就可以实现行列拖拽事件了</p>
<h4 id="3-深思"><a href="#3-深思" class="headerlink" title="3.深思"></a>3.深思</h4><h5 id="如何存储已经拖拽了的状态呢"><a href="#如何存储已经拖拽了的状态呢" class="headerlink" title="如何存储已经拖拽了的状态呢?"></a>如何存储已经拖拽了的状态呢?</h5><p>每次我们刷新页面,会返回默认的表格排序,然而我们想把我们已经拖拽完成的存储起来要怎么做呢?</p>
<p>这里就需要H5中的localStorage来帮忙了</p>
<h6 id="1-监听拖拽改变事件"><a href="#1-监听拖拽改变事件" class="headerlink" title="1.监听拖拽改变事件"></a>1.监听拖拽改变事件</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  tableData(newval, oldval) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(newval);</span><br><span class="line">  &#125;,</span><br><span class="line">  col() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.col);</span><br><span class="line">  &#125;,</span><br><span class="line">  dropCol() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.dropCol);</span><br><span class="line">    localStorage.setItem(<span class="string">"codelist"</span>, <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.dropCol));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-将变化了的表格顺序存储起来"><a href="#2-将变化了的表格顺序存储起来" class="headerlink" title="2.将变化了的表格顺序存储起来"></a>2.将变化了的表格顺序存储起来</h6><p>如上面代码</p>
<p><code>localStorage.setItem(&quot;codelist&quot;, JSON.stringify(this.dropCol));</code></p>
<p>将监听到变化了的表格排序存储起来</p>
<h6 id="3-在第一次加载进入的时候读取localStorage中的数据"><a href="#3-在第一次加载进入的时候读取localStorage中的数据" class="headerlink" title="3.在第一次加载进入的时候读取localStorage中的数据"></a>3.在第一次加载进入的时候读取localStorage中的数据</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 首先读取存储的列表项,如果有则加载已存储的列表项</span></span><br><span class="line">  <span class="built_in">console</span>.log(localStorage.getItem(<span class="string">"codelist"</span>));</span><br><span class="line">  <span class="keyword">if</span> (localStorage.getItem(<span class="string">"codelist"</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"codelist"</span>)));</span><br><span class="line"></span><br><span class="line">   that.dropCol = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"codelist"</span>));</span><br><span class="line">    that.col = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"codelist"</span>));</span><br><span class="line">    <span class="comment">// 阻止默认行为</span></span><br><span class="line">    <span class="built_in">document</span>.body.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">      event.stopPropagation();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.rowDrop();</span><br><span class="line">    <span class="keyword">this</span>.columnDrop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>这样就可以拿到已经存起来的数据了!</p>
]]></content>
      <tags>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>正则校验大全(持续更新)</title>
    <url>/2019/09/11/%E6%AD%A3%E5%88%99%E6%A0%A1%E9%AA%8C%E5%A4%A7%E5%85%A8-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h3 id="正则校验大全"><a href="#正则校验大全" class="headerlink" title="正则校验大全"></a>正则校验大全</h3><h4 id="1-表情校验"><a href="#1-表情校验" class="headerlink" title="1.表情校验"></a>1.表情校验</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff])&#123;2&#125;|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|\ud83c[\ude32-\ude3a]|\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])/g</span></span><br></pre></td></tr></table></figure>

<h4 id="2-金额数字"><a href="#2-金额数字" class="headerlink" title="2.金额数字"></a>2.金额数字</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 金额数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isMoney</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/(^[1-9]([0-9]+)?(\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\.[0-9]([0-9])?$)/</span>.test(s) &amp;&amp; s !== <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-身份证号码"><a href="#3-身份证号码" class="headerlink" title="3.身份证号码"></a>3.身份证号码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 身份证号码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isIdcard</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-url地址"><a href="#4-url地址" class="headerlink" title="4.url地址"></a>4.url地址</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * URL地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isURL</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^http[s]?:\/\/.*/</span>.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-电话号码"><a href="#5-电话号码" class="headerlink" title="5.电话号码"></a>5.电话号码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电话号码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isPhone</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^([0-9]&#123;3,4&#125;-)?[0-9]&#123;7,8&#125;$/</span>.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-手机号码"><a href="#6-手机号码" class="headerlink" title="6.手机号码"></a>6.手机号码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手机号码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isMobile</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^1[0-9]&#123;10&#125;$/</span>.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-邮箱"><a href="#7-邮箱" class="headerlink" title="7.邮箱"></a>7.邮箱</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 邮箱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmail</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]&#123;2,3&#125;)&#123;1,2&#125;)$/</span>.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-是否为字符串"><a href="#8-是否为字符串" class="headerlink" title="8.是否为字符串"></a>8.是否为字符串</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">str</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">'string'</span> || str <span class="keyword">instanceof</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="9-是否为数组"><a href="#9-是否为数组" class="headerlink" title="9.是否为数组"></a>9.是否为数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> <span class="variable">arg</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Array</span>.isArray === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">'[object Array]'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>前端css代码规范</title>
    <url>/2019/09/02/%E5%89%8D%E7%AB%AFcss%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h4 id="1、命名规则说明"><a href="#1、命名规则说明" class="headerlink" title="1、命名规则说明"></a>1、命名规则说明</h4><ul>
<li>1、所有的命名<code>最好都小写</code></li>
<li>2、属性的值一定要用<code>双引号(&quot;&quot;)</code>括起来，且一定要有值如<code>class=&quot;app&quot;,id=&quot;app&quot;</code></li>
<li>3、每个标签都要有开始和结束，且要有正确的层次，排版有规律工整例如：<code>&lt;div&gt;&lt;/div&gt;</code></li>
<li>4、空元素要有结束的tag或于开始的tag后加上”/“ <code>&lt;br /&gt;、&lt;img /&gt;</code></li>
<li>5、表现与结构完全分离，代码中不涉及任何的表现元素，如<code>style、font、bgColor、border</code>等</li>
<li>6、<code>&lt;h1&gt;到&lt;h6&gt;</code>的定义，应遵循从大到小的原则，体现文档的结构，并有利于搜索引擎的查询,因此，请不要利用标题标签来改变同一行中的字体大小。相反，我们应当使用层叠样式表定义来达到漂亮的显示效果。</li>
<li>7、给每一个表格和表单加上一个唯一的、结构标记<code>id</code></li>
<li>8、给图片加上alt标签,<code>alt</code>属性是一个必需的属性，它规定在图像无法显示时的替代文本。假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：<code>网速太慢</code>、<code>src 属性中的错误</code>、<code>浏览器禁用图像</code>、<code>用户使用的是屏幕阅读器</code>。</li>
<li>9、尽量使用英文命名原则</li>
<li>10、尽量不缩写，除非一看就明白的单词如<code>btn</code>。</li>
<li>11、命名方式(<strong>BEM</strong>)：类-体（例：<code>g-head</code>）、类-体-修饰符（例：<code>u-btn-active</code>）。</li>
<li>12、scss中的变量、函数、混合、placeholder采用驼峰式命名</li>
<li>13、后代选择器：体-修饰符即可（例：.m-page .cut{}）注：后代选择器不要在页面布局中使用，因为污染的可能性较大；</li>
<li>14、减少id命名，id在JS是唯一的，不能多次使用，id的优先级优先与class，所以id应该按需使用，而不能滥用。</li>
</ul>
<h4 id="2、网页外层重要部分CSS样式命名"><a href="#2、网页外层重要部分CSS样式命名" class="headerlink" title="2、网页外层重要部分CSS样式命名"></a>2、网页外层重要部分CSS样式命名</h4><p>  wrap —————— 用于最外层</p>
<p>   header —————- 用于头部 </p>
<p>  main —————— 用于主体内容（中部）</p>
<p>  main-left ————- 左侧布局 </p>
<p>  main-right ———— 右侧布局 </p>
<p>  nav ——————- 网页菜单导航条</p>
<p>   content ————— 用于网页中部主体 </p>
<p>  footer —————- 用于底部</p>
<h4 id="3、样式属性顺序"><a href="#3、样式属性顺序" class="headerlink" title="3、样式属性顺序"></a>3、样式属性顺序</h4><ul>
<li>1、定位：<code>position</code> <code>z-index</code> <code>left</code> <code>right</code> <code>top</code> <code>bottom</code> <code>clip</code>等。</li>
<li>2、自身属性：<code>width</code> <code>height</code> <code>min-height</code> <code>max-height</code> <code>min-width</code> <code>max-width</code>等。</li>
<li>3、文字样式：<code>color</code> <code>font-size</code> <code>letter-spacing</code>, <code>color</code> <code>text-align</code>等。</li>
<li>4、背景：<code>background-image</code> <code>border</code>等。</li>
<li>5、文本属性: <code>text-align</code> <code>vertical-align</code> <code>text-wrap</code> <code>text-transform</code> <code>text-indent</code> <code>text-decoration</code>  <code>letter-spacing</code> <code>word-spacing</code> <code>white-space</code> <code>text-overflow</code>等。</li>
<li>6、css3中属性：<code>content</code>、<code>box-shadow</code>、<code>animation</code>、<code>border-radius</code>、<code>transform</code>等</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* yes */                             /* no */</span><br><span class="line">.example &#123;                            .example &#123;   </span><br><span class="line">  z-index: -1;                          color: red;</span><br><span class="line">  display: inline-block;                background-color: #eee;</span><br><span class="line">  font-size: 16px;                      display: inline-block;</span><br><span class="line">  color: red;                           z-index: -1;</span><br><span class="line">  background-color: #eee;               font-size: 16px;</span><br><span class="line">&#125;                                     &#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><strong>目的</strong>：减少浏览器reflow(回流)，提升浏览器渲染dom的性能。</p>
]]></content>
  </entry>
  <entry>
    <title>前端开荒之数组中好用的方法(一)</title>
    <url>/2019/08/13/%E5%89%8D%E7%AB%AF%E5%BC%80%E8%8D%92%E4%B9%8B%E6%95%B0%E7%BB%84%E4%B8%AD%E5%A5%BD%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="数组中好用的方法"><a href="#数组中好用的方法" class="headerlink" title="数组中好用的方法"></a>数组中好用的方法</h3><h4 id="1-find"><a href="#1-find" class="headerlink" title="1.find"></a>1.find</h4><p>​    find为arr数组调用的方法,接受一个callback返回函数,而arr.find()返回的是经过callback函数符合函数条件的第一个值</p>
<p>​    需要注意的是:在callback开始执行的时候,再去操作arr数组的值,此时并不会改变callback的执行,callback执行的依旧是原数组的值</p>
<p>​    例如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 =arr,find(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e &gt;<span class="number">2</span></span><br><span class="line">&#125;);</span><br><span class="line">arr.push(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>此时在callback已经执行,然后再去push,是不会按照push执行的</p>
<h6 id="find的高级用法"><a href="#find的高级用法" class="headerlink" title="find的高级用法"></a>find的高级用法</h6><p>​    我们可以利用find方法来寻找一个较为复杂的数组</p>
<p>​    例如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">    name:<span class="string">"xxx"</span>,</span><br><span class="line">    age:<span class="number">15</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">99</span>,</span><br><span class="line">    name:<span class="string">"zzz"</span>,</span><br><span class="line">    age:<span class="number">14</span>&#125;,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>当然,我现在只写了两条,实际情况下成百上千条都有可能,这时候比如我们要找</p>
<p>id=99的数组的一项的name是什么</p>
<p>此时便可以调用find方法</p>
<p>我在这里定义一个find方法的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> findName = <span class="function">(<span class="params">arr,value</span>) =&gt;</span> arr,find(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id=value).name</span><br></pre></td></tr></table></figure>

<p>这个<code>findName</code>函数接受两个参数,第一个参数arr表示要查询的数组,第二个参数表示要查询的id的值,根据这个函数,则可以找到对应id的name</p>
<p>当然,也可以使用for循环来找对应的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id=<span class="number">99</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i].id = id ) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[i].name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样进行大量的for循环找到的也是想同的值,然后找到之后进行return操作</p>
<p>当然,我们也可以使用forEach来操作数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(item.id==<span class="number">99</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(item.item.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这样也可以接收到id为99的数组那项的值</p>
<p>但是forEach有个很麻烦的地方,他会遍历整个数组的值,不会说遇到就停止,使用break和return都不会将其打断,这样是比较耗费性能的</p>
<p>然而,就没有办法打断了吗?</p>
<p>借用《JavaScript权威指南（6版）》7.9.1 forEach() 一句话</p>
<p><code>注意，forEach（）无法在所有元素都传递给调用的函数之前终止遍历。也就是说，没有像for循环中使用的相应的break语句。如果要提前终止，必须把forEach（）方法放在一个try块中，并能抛出一个异常。如果forEach（）调用的函数抛出foreach.break异常，循环会提前终止</code></p>
<p>​                        </p>
<p>代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    	<span class="keyword">if</span>(item.id==<span class="number">99</span>) &#123;</span><br><span class="line">       		<span class="built_in">console</span>.log(item.item.name)</span><br><span class="line">            foreach.break=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"StopIteration"</span>)</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line">               <span class="built_in">console</span>.log(e.message);</span><br><span class="line">               <span class="keyword">if</span>(e.message===<span class="string">"foreach is not defined"</span>) &#123;</span><br><span class="line">               		<span class="built_in">console</span>.log(<span class="string">"跳出来了?"</span>);</span><br><span class="line">               		 <span class="keyword">return</span>;</span><br><span class="line">           		&#125;<span class="keyword">else</span> <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>vue踩坑之渲染对象</title>
    <url>/2019/08/01/vue/</url>
    <content><![CDATA[<h3 id="vue踩坑之渲染对象"><a href="#vue踩坑之渲染对象" class="headerlink" title="vue踩坑之渲染对象"></a>vue踩坑之渲染对象</h3><h4 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h4><p>最近在工作中遇到这这样的问题,要讲一个对象的一条属性使用差值语法展示出来</p>
<p>html代码如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg.name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个很普通的代码片段,需要展示出来,</p>
<p>现在在data里面传入这个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    msg:&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传入这个msg后,需要在vue的生命周期函数中发送ajax请求获取数据,并让获取到的msg替代data中的msg,此处,我直接替换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.msg.name=<span class="string">"222"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我在<code>mounted</code>中替换了msg的值,然后我打开了页面,差值语法中的<code>msg.name</code>并没有刷新出来</p>
<h4 id="2-分析问题"><a href="#2-分析问题" class="headerlink" title="2.分析问题"></a>2.分析问题</h4><p>遇到问题后首先分析,这进行视图更新,并没有触发视图更新,然而log后的msg确实是存在name属性</p>
<p>首先查看vue的官方文档,对于这方面的描述</p>
<p>官方文档中有这样的一段话</p>
<p>“当vue的data里边声明或者已经赋值过的对象或者数组（数组里边的值是对象）时，向对象中添加新的属性，如果更新此属性的值，是不会更新视图的。”</p>
<p>这段话已经说得很明确了,我们也是这样做的</p>
<p>我们在data里面声明了msg对象,然后在生命周期函数中往msg对象添加了新属性name</p>
<p>所以造成了vue的视图未更新</p>
<h4 id="3-解决问题"><a href="#3-解决问题" class="headerlink" title="3.解决问题"></a>3.解决问题</h4><p>既然官方文档已经说的很明确,如果往对象中添加新的属性,如果更新此属性的值,是不会更新视图的</p>
<p>那么,我们首先可以将msg的name在data中定义</p>
<p>即:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    msg:&#123;</span><br><span class="line">        name:<span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么我们已经拥有了name属性,在下面更新name属性,也会造成vue的视图层更新</p>
<p>那么,如果我们不想在msg中添加name属性呢?</p>
<p>vue中也提供了对应的方法,即在vue实例中有一个$set方法</p>
<p>即:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$<span class="keyword">set</span>(this.msg,"name","222")</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>this.$set要传入三个值,第一个值为要修改的对象/数组,第二个值为要修改的属性,第三个值为要修改的内容</p>
<p>这样也可以触发vue的视图更新</p>
<p>遇到问题不要怕,要学会分析问题并解决问题</p>
]]></content>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>需求踩坑之动态渲染大量数据表格</title>
    <url>/2019/07/22/%E9%9C%80%E6%B1%82%E8%B8%A9%E5%9D%91%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<h3 id="需求踩坑之动态获取数据表格"><a href="#需求踩坑之动态获取数据表格" class="headerlink" title="需求踩坑之动态获取数据表格"></a>需求踩坑之动态获取数据表格</h3><h5 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h5><p>最近拿到了这样一个需求</p>
<p>要求是这样的:</p>
<p>1.渲染一个表格,要求表头为1-30的数字排序</p>
<p>2.获取后台传过来的一个长度不固定的字符串</p>
<p>3.将这个字符串2个绑定为一小组,分别填入到这个表格的<code>tbody</code>中</p>
<p>4.当填入的数据为30个时,即要换行在下一行展示</p>
<p>例如:</p>
<p>效果图:</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g58ew7kszmj21200c93z0.jpg" alt></p>
<p>后台接受的数据:</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g58ewyg4acj20ez038wei.jpg" alt></p>
<h5 id="2-实施"><a href="#2-实施" class="headerlink" title="2.实施"></a>2.实施</h5><p>一开始使用的element-ui</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">      <span class="attr">prop</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"日期"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">      <span class="attr">prop</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"姓名"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">      <span class="attr">prop</span>=<span class="string">"address"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"地址"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面这个是element-ui的官方文档中的代码</p>
<p>需要传入一个tableData的数组,</p>
<p>代码为:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      tableData: [&#123;</span><br><span class="line">        date: <span class="string">'2016-05-02'</span>,</span><br><span class="line">        name: <span class="string">'王小虎'</span>,</span><br><span class="line">        address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        date: <span class="string">'2016-05-04'</span>,</span><br><span class="line">        name: <span class="string">'王小虎'</span>,</span><br><span class="line">        address: <span class="string">'上海市普陀区金沙江路 1517 弄'</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        date: <span class="string">'2016-05-01'</span>,</span><br><span class="line">        name: <span class="string">'王小虎'</span>,</span><br><span class="line">        address: <span class="string">'上海市普陀区金沙江路 1519 弄'</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        date: <span class="string">'2016-05-03'</span>,</span><br><span class="line">        name: <span class="string">'王小虎'</span>,</span><br><span class="line">        address: <span class="string">'上海市普陀区金沙江路 1516 弄'</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这怎么传????</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g58f1hgikgj20jg0jxq3i.jpg" alt></p>
<p>先开始做吧</p>
<p>首先使用v-for生成30个表头</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:prop</span>=<span class="string">"'msg'+item"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:label</span>=<span class="string">"String(item)"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"(item, index) in 30"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">"45"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>emmm,够狠,直接循环30个表头,因为<code>label</code>这里只能接受string类型的参数(虽然传入number类型的能用,但是会报错,这个和vuex中的直接修改stroe中的值一样)</p>
<p>反正效果已经实现了,继续下一个步骤</p>
<p>因为这个<code>tabledata</code>对应的是一个对象数组,所以要循环生成对象</p>
<p>对象的属性怎么循环生成???</p>
<p>???</p>
<p>又一次陷入了迷茫</p>
<p>这里我走了一次岔路</p>
<p>既然不能循环生成,那么我自己手写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> that=<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">var</span> itemobj = &#123;</span><br><span class="line">  msg1: <span class="string">""</span>,</span><br><span class="line">  msg2: <span class="string">""</span>,</span><br><span class="line">  msg3: <span class="string">""</span>,</span><br><span class="line">  msg4: <span class="string">""</span>,</span><br><span class="line">  msg5: <span class="string">""</span>,</span><br><span class="line">  msg6: <span class="string">""</span>,</span><br><span class="line">  msg7: <span class="string">""</span>,</span><br><span class="line">  msg8: <span class="string">""</span>,</span><br><span class="line">  msg9: <span class="string">""</span>,</span><br><span class="line">  msg10: <span class="string">""</span>,</span><br><span class="line">  msg11: <span class="string">""</span>,</span><br><span class="line">  msg12: <span class="string">""</span>,</span><br><span class="line">  msg13: <span class="string">""</span>,</span><br><span class="line">  msg14: <span class="string">""</span>,</span><br><span class="line">  msg15: <span class="string">""</span>,</span><br><span class="line">  msg16: <span class="string">""</span>,</span><br><span class="line">  msg17: <span class="string">""</span>,</span><br><span class="line">  msg18: <span class="string">""</span>,</span><br><span class="line">  msg19: <span class="string">""</span>,</span><br><span class="line">  msg20: <span class="string">""</span>,</span><br><span class="line">  msg21: <span class="string">""</span>,</span><br><span class="line">  msg22: <span class="string">""</span>,</span><br><span class="line">  msg23: <span class="string">""</span>,</span><br><span class="line">  msg24: <span class="string">""</span>,</span><br><span class="line">  msg25: <span class="string">""</span>,</span><br><span class="line">  msg26: <span class="string">""</span>,</span><br><span class="line">  msg27: <span class="string">""</span>,</span><br><span class="line">  msg28: <span class="string">""</span>,</span><br><span class="line">  msg29: <span class="string">""</span>,</span><br><span class="line">  msg30: <span class="string">""</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>先不管如何,效果实现就ok</p>
<p>然后对数据进行转换</p>
<p>要创建的行为要接受的数据/30/2</p>
<p>30为一列的个数,2为每个单元格展示两个数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strlength = msg.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要创建多少列</span></span><br><span class="line"><span class="keyword">var</span> listNum = <span class="built_in">Math</span>.ceil(strlength / <span class="number">30</span> / <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(listNum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将拿到的数据两个一组拼成一个30位的数组</span></span><br><span class="line"><span class="comment">// 控制字符串每两位加一个,</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertEnter</span>(<span class="params">str, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = str.length;</span><br><span class="line">  <span class="keyword">var</span> strTemp = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">if</span> (len &gt; n) &#123;</span><br><span class="line">    strTemp = str.substring(<span class="number">0</span>, n);</span><br><span class="line">    str = str.substring(n, len);</span><br><span class="line">    <span class="keyword">return</span> strTemp + <span class="string">","</span> + insertEnter(str, n);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使字符串转为数组</span></span><br><span class="line"><span class="keyword">var</span> allMsgList = insertEnter(msg, <span class="number">2</span>).split(<span class="string">","</span>);</span><br><span class="line"><span class="built_in">console</span>.log(allMsgList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建表数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(itemobj);</span><br><span class="line"><span class="built_in">console</span>.log();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listNum; i++) &#123;</span><br><span class="line">  that.tableData.push(itemobj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(that.tableData);</span><br><span class="line"><span class="comment">// 让字符串数组的每一项去找到对应的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆分多个数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sliceArray</span>(<span class="params">array, size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; <span class="built_in">Math</span>.ceil(array.length / size); x++) &#123;</span><br><span class="line">    <span class="keyword">var</span> start = x * size;</span><br><span class="line">    <span class="keyword">var</span> end = start + size;</span><br><span class="line">    result.push(array.slice(start, end));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> groupedArray = sliceArray(allMsgList, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<p>经过这一系列操作后</p>
<p>得到的<code>groupedArray</code>的值为</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g58fctt4qpj20ff06xjrp.jpg" alt></p>
<p>ok,这就是想要的,那么怎么填充上去呢?</p>
<p>???</p>
<p>再写一次循环?</p>
<p>在这里我卡住了</p>
<p>既然element-ui不能实现的功能,那么用原生来写</p>
<p>这时候我拿到的数据为上图所示,展示的话就需要循环创建接受的数据/30/2的行</p>
<p>然后在每一行中循环生成每一个列</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in 30"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(alllist, index) in allMsgList"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in alllist"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>经过两次循环,然后得到了最上面的需求结果</p>
<h5 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h5><p>这个需求最主要的就是用需要大量的数据的交互</p>
<p>需要动态实时的将其展示在上面,所以逻辑不能太复杂</p>
<p>如果我继续手写循环生成的话,可能我接受到了数据开始渲染,上一条数据还没有渲染完成</p>
<p>所以最开始就应该从简单,确保数据的稳定传输入手</p>
]]></content>
      <tags>
        <tag>需求</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket原理及应用</title>
    <url>/2019/07/12/websocket%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="websocket深入理解"><a href="#websocket深入理解" class="headerlink" title="websocket深入理解"></a>websocket深入理解</h2><h4 id="1-websocket原理"><a href="#1-websocket原理" class="headerlink" title="1.websocket原理"></a>1.websocket原理</h4><p>websocket原理在之前的博客中生动形象的描述过了,这里大概介绍一下</p>
<p>百度对于websocket的解释是:WebSocket是一种在单个TCP连接上进行全双工通信的协议</p>
<p>也就是说websocket是基于TCP协议可以进行双向通信的一个工具</p>
<p>并且websocket在建立服务器和客户端直接的连接的时候只需要完成一次握手,即可实现双向通信,不像发送ajax协议需要实现三次握手四次挥手,并且websocket的实时性,和控制开销,更好的连接状态的保持都是优于ajax</p>
<p>websocket的诞生是人们为了解决实时推送技术,因为之前全是使用的ajax轮询,也就是使用ajax技术在特定的时间内发送http请求,然后服务器返回数据给客户端的浏览器,这样的效率其实很慢,因为ajax发送出去的http请求可能含有较长的头部,然而真正有效的数据可能仅仅是后面那一部分,所以浪费了服务器带宽,而且比较新一点的技术做轮询的是Comet,这种技术实现了双向通信,但是依然是含有较长的头部,浪费带宽</p>
<h4 id="2-websocketAPI"><a href="#2-websocketAPI" class="headerlink" title="2.websocketAPI"></a>2.websocketAPI</h4><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>补充一点,websocket使用的是http的101状态码建立连接,如下图:</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g4x6temmtej20ib01ddfo.jpg" alt="_blank"></p>
<p>再补充一点,部分浏览器可能不支持websocket接口,你可以在浏览器中尝试实例,目前现代主流浏览器都支持websocket: Chrome, Mozilla, Opera 和 Safari</p>
<h5 id="API"><a href="#API" class="headerlink" title="API"></a>API</h5><h6 id="1-创建一个websocket实例"><a href="#1-创建一个websocket实例" class="headerlink" title="1.创建一个websocket实例"></a>1.创建一个websocket实例</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开一个 web socket</span></span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://后端提供的websocket地址"</span>);</span><br></pre></td></tr></table></figure>

<h6 id="2-开启websocket并发送数据给后端地址"><a href="#2-开启websocket并发送数据给后端地址" class="headerlink" title="2.开启websocket并发送数据给后端地址"></a>2.开启websocket并发送数据给后端地址</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// Web Socket 已连接上，使用 send() 方法发送数据</span></span><br><span class="line">   ws.send(<span class="string">"发送数据"</span>);</span><br><span class="line">   alert(<span class="string">"数据发送中..."</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>onopen</code>方法为打开websocket连接,其中<code>ws</code>为上面创建的websocket的实例</p>
<p><code>send</code>方法为发送数据的方法,其中本次发送字符串”发送数据”内容</p>
<h6 id="3-通过websocket接受后端发送过来的数据"><a href="#3-通过websocket接受后端发送过来的数据" class="headerlink" title="3.通过websocket接受后端发送过来的数据"></a>3.通过websocket接受后端发送过来的数据</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="keyword">var</span> received_msg = evt.data;</span><br><span class="line">   alert(<span class="string">"数据已接收..."</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>之前也说过,websocket为双向通信,有发即有收</p>
<p><code>onmessage</code>函数为接受数据,在函数中可传入<code>evt</code>行参来接受数据</p>
<h6 id="4-websocket关闭函数"><a href="#4-websocket关闭函数" class="headerlink" title="4.websocket关闭函数"></a>4.websocket关闭函数</h6><p>为什么要说websocket关闭函数?因为只有在触发websocket关闭的时候才会触发的函数(是不是有点废话了)</p>
<p>为什么这么说呢?关闭可能存在很多种情况,后端关闭,前端关闭,通信关闭都会触发</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="comment">// 关闭 websocket</span></span><br><span class="line">   alert(<span class="string">"连接已关闭..."</span>); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h6 id="5-自测浏览器是否支持websocket"><a href="#5-自测浏览器是否支持websocket" class="headerlink" title="5.自测浏览器是否支持websocket"></a>5.自测浏览器是否支持websocket</h6><p>这个应该在开始说的,一般现代浏览器都支持websocket,在MDN上面也有兼容图,我就直接贴在这里了</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g4x6txgc9ej20xw0dmgme.jpg" alt="_blank"></p>
<p>当然你也可以用代码的形式来检验你的浏览器是否支持websocket</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"WebSocket"</span> <span class="keyword">in</span> <span class="built_in">window</span>)</span><br><span class="line">         &#123;</span><br><span class="line">            alert(<span class="string">"您的浏览器支持 WebSocket!"</span>);</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             alert(<span class="string">"您的浏览器不支持 WebSocket!"</span>)</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<p>当然,你也可以看出来,如果说浏览器支持websocket,即浏览器window对象中含有websocket对象</p>
<h4 id="3-简单的websocket测试"><a href="#3-简单的websocket测试" class="headerlink" title="3.简单的websocket测试"></a>3.简单的websocket测试</h4><p>你可以用以下代码来进行websocket的自测</p>
<p>可以打开调试工具来监听websocket</p>
<p><font color="red" size="5">注意:此代码的自测网站会将你发送的websocket请求全部以websocket形式发送给你,所以,发送我写了循环9999次,所以接受也会有9999条数据打印到控制台</font></p>
<p>直接贴代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>websocket测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">         <span class="function"><span class="keyword">function</span> <span class="title">WebSocketTest</span><span class="params">()</span></span></span></span><br><span class="line">         &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="string">"WebSocket"</span> <span class="keyword">in</span> <span class="built_in">window</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">               alert(<span class="string">"您的浏览器支持 WebSocket!"</span>);</span></span><br><span class="line">               </span><br><span class="line"><span class="actionscript">               <span class="comment">// 打开一个 web socket</span></span></span><br><span class="line"><span class="actionscript">               <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://echo.websocket.org"</span>);</span></span><br><span class="line">                </span><br><span class="line"><span class="actionscript">               ws.onopen = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">               &#123;</span><br><span class="line"><span class="actionscript">                  <span class="comment">// Web Socket 已连接上，使用 send() 方法发送数据</span></span></span><br><span class="line"><span class="javascript">                  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="number">9999</span>; index++) &#123;</span></span><br><span class="line"><span class="actionscript">                    ws.send(<span class="string">"发送数据"</span>+index);</span></span><br><span class="line">                      </span><br><span class="line">                  &#125;</span><br><span class="line"><span class="actionscript">                  alert(<span class="string">"数据发送中..."</span>);</span></span><br><span class="line">               &#125;;</span><br><span class="line">                </span><br><span class="line"><span class="actionscript">               ws.onmessage = <span class="function"><span class="keyword">function</span> <span class="params">(evt)</span> </span></span></span><br><span class="line">               &#123; </span><br><span class="line"><span class="actionscript">                  <span class="keyword">var</span> received_msg = evt.data;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//   document.getElementById('message').innerHTML += received_msg + '&lt;br/&gt;';</span></span></span><br><span class="line"><span class="javascript">                  <span class="built_in">console</span>.log(evt);</span></span><br><span class="line">                  </span><br><span class="line"><span class="actionscript">                <span class="comment">//   alert("数据已接收...");</span></span></span><br><span class="line">               &#125;;</span><br><span class="line">                </span><br><span class="line"><span class="actionscript">               ws.onclose = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">               &#123; </span><br><span class="line"><span class="actionscript">                  <span class="comment">// 关闭 websocket</span></span></span><br><span class="line"><span class="actionscript">                  alert(<span class="string">"连接已关闭..."</span>); </span></span><br><span class="line">               &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            <span class="keyword">else</span></span></span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">               <span class="comment">// 浏览器不支持 WebSocket</span></span></span><br><span class="line"><span class="actionscript">               alert(<span class="string">"您的浏览器不支持 WebSocket!"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sse"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:WebSocketTest()"</span>&gt;</span>运行 WebSocket<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-websocket进阶"><a href="#4-websocket进阶" class="headerlink" title="4.websocket进阶"></a>4.websocket进阶</h4><p>简单的websocket已经完成,但是在实际工作中,我们使用websocket需要考虑到多方面应用</p>
<p>以下,借用公司大佬写的websocket封装的文件,来做详细讲解</p>
<h6 id="1-与后台数据约定-加密传输"><a href="#1-与后台数据约定-加密传输" class="headerlink" title="1.与后台数据约定,加密传输"></a>1.与后台数据约定,加密传输</h6><p>发送数据前,需要在websocket中传入后台指定的参数并且加密传输</p>
<p>例如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//websocket</span></span><br><span class="line"><span class="keyword">const</span> tio = &#123;&#125;</span><br><span class="line">tio.ws = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment">	 ws_protocol wss or ws ,</span></span><br><span class="line"><span class="comment">	 ip,</span></span><br><span class="line"><span class="comment">	 port,</span></span><br><span class="line"><span class="comment">	 paramStr,加在ws url后面的请求参数，形如：name=张三&amp;id=12</span></span><br><span class="line"><span class="comment">	 heartbeatTimeout,心跳时间 单位：毫秒</span></span><br><span class="line"><span class="comment">	 reconnInterval,重连间隔时间 单位：毫秒</span></span><br><span class="line"><span class="comment">	 binaryType 'blob' or 'arraybuffer';//arraybuffer是字节</span></span><br><span class="line"><span class="comment">	 handler 处理器</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tio.ws = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">	ws_protocol = <span class="string">'ws'</span>, <span class="regexp">//</span> 发送协议</span></span></span><br><span class="line"><span class="function"><span class="params">	ip = <span class="string">'192.168.1.10'</span>, <span class="regexp">//</span> ip</span></span></span><br><span class="line"><span class="function"><span class="params">	port = <span class="string">'9326'</span>, <span class="regexp">//</span> 端口号</span></span></span><br><span class="line"><span class="function"><span class="params">	heartbeatTimeout = <span class="number">5000</span>, <span class="regexp">//</span> 心跳时间</span></span></span><br><span class="line"><span class="function"><span class="params">	reconnInterval = <span class="number">1000</span>, <span class="regexp">//</span> 重连间隔</span></span></span><br><span class="line"><span class="function"><span class="params">	binaryType = <span class="string">'blob'</span>, <span class="regexp">//</span> 数据格式</span></span></span><br><span class="line"><span class="function"><span class="params">	paramStr, <span class="regexp">//</span> 携带传过来的参数</span></span></span><br><span class="line"><span class="function"><span class="params">	handler</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在此函数中,给定了函数默认值,并且paramStr为前端携带过来的参数</p>
<p>前端vue页面也封装了一个函数:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">initIM() &#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> nonce = randomNum(<span class="number">1</span>, <span class="number">10000</span>),</span><br><span class="line">    signTimestamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">// 创建随机数字字符串</span></span><br><span class="line">  <span class="keyword">var</span> signature = sha1(<span class="string">"XXXX"</span> + nonce + signTimestamp); <span class="comment">// 加密算法</span></span><br><span class="line">  that.tiows = <span class="keyword">new</span> that.$tio.ws(&#123;</span><br><span class="line">    paramStr: &#123;</span><br><span class="line">      appKey: <span class="string">"XXXX"</span>,</span><br><span class="line">      nonce: nonce,</span><br><span class="line">      signTimestamp: signTimestamp,</span><br><span class="line">      signature: signature,</span><br><span class="line">      userId: that.loginUser.id,</span><br><span class="line">      groups: <span class="string">""</span>,</span><br><span class="line">      identity: <span class="string">"service"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handler: &#123;</span><br><span class="line">      onopen: <span class="function"><span class="keyword">function</span>(<span class="params">event, ws</span>) </span>&#123;&#125;,</span><br><span class="line">      onclose: <span class="function"><span class="keyword">function</span>(<span class="params">event, ws</span>) </span>&#123;&#125;,</span><br><span class="line">      onerror: <span class="function"><span class="keyword">function</span>(<span class="params">event, ws</span>) </span>&#123;&#125;,</span><br><span class="line">      ping: <span class="function"><span class="keyword">function</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">        ws.send(<span class="built_in">JSON</span>.stringify(&#123; <span class="attr">chatType</span>: <span class="string">"heartbeat"</span> &#125;)); <span class="comment">// 心跳开始发送</span></span><br><span class="line">      &#125;,</span><br><span class="line">      onmessage: <span class="function"><span class="keyword">function</span>(<span class="params">data, ws</span>) </span>&#123;</span><br><span class="line">        that.loading = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"接收消息"</span>, data);</span><br><span class="line">        <span class="comment">// 成功接收数据后,给表格注入数据</span></span><br><span class="line">          <span class="comment">// 将接收到的数据存储至store中,实现数据共享</span></span><br><span class="line">        that.$store.commit(<span class="string">'common/updataMymsg'</span>,data.data)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; that.tableData.length; i++) &#123;</span><br><span class="line">          that.tableData[i].address = data.data;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  that.tiows.connect();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>与后端约定的数据(这里我用XXXX代替,不是appkey)与signTimestamp和nonce后进行加密,然后传输给后台通过验证,后台再将验证完的数据处理再返回新的数据给我</p>
<h6 id="2-传输数据之前-需要将数据进行处理"><a href="#2-传输数据之前-需要将数据进行处理" class="headerlink" title="2.传输数据之前,需要将数据进行处理"></a>2.传输数据之前,需要将数据进行处理</h6><p>因为我们是通过websocket形式,以url地址将数据发送过去,即在封装的websocket方法中需要将其方法进行处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">this</span>.ip = ip </span><br><span class="line">	<span class="keyword">this</span>.port = port </span><br><span class="line">	<span class="keyword">this</span>.url = ws_protocol + <span class="string">'://'</span> + ip + <span class="string">':'</span> + port <span class="comment">// 拼接url字符串</span></span><br><span class="line">	<span class="keyword">this</span>.binaryType = binaryType</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (paramStr) &#123;</span><br><span class="line">		<span class="keyword">this</span>.url = addUrlParam(<span class="keyword">this</span>.url, paramStr)</span><br><span class="line">		<span class="keyword">this</span>.reconnUrl = <span class="keyword">this</span>.url + <span class="string">"&amp;"</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">this</span>.reconnUrl = <span class="keyword">this</span>.url + <span class="string">"?"</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.reconnUrl += <span class="string">"reconnect=true"</span>;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> addUrlParam = <span class="function"><span class="keyword">function</span>(<span class="params">url = <span class="string">''</span>, params = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (url &amp;&amp; <span class="built_in">JSON</span>.stringify(params) != <span class="string">"&#123;&#125;"</span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> paramArray = [];</span><br><span class="line">		<span class="built_in">Object</span>.keys(params).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">var</span> param = key + <span class="string">'='</span> + params[key]</span><br><span class="line">			paramArray.push(param)</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">var</span> url2 = <span class="built_in">encodeURI</span>(url + <span class="string">'?'</span> + paramArray.join(<span class="string">'&amp;'</span>));</span><br><span class="line">		<span class="keyword">var</span> enurl = <span class="built_in">encodeURI</span>(url2);</span><br><span class="line">		<span class="keyword">return</span> enurl</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> url;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码执行操作了后将数据从url上面扒下来提取成为键值对的形式</p>
<h6 id="3-设置websocket心跳-确保数据的实时性"><a href="#3-设置websocket心跳-确保数据的实时性" class="headerlink" title="3.设置websocket心跳,确保数据的实时性"></a>3.设置websocket心跳,确保数据的实时性</h6><p>为了确保数据的实时性和准确性,需要在websocket上面增加心跳</p>
<p>确保websocket在一定的时间内没收到信息再重新发送请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.handler = handler</span><br><span class="line">	<span class="keyword">this</span>.heartbeatTimeout = heartbeatTimeout</span><br><span class="line">	<span class="keyword">this</span>.reconnInterval = reconnInterval</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.lastInteractionTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.lastInteractionTimeValue = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.lastInteractionTimeValue</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.heartbeatSendInterval = heartbeatTimeout / <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>上面的代码规定了心跳发送时间,而真正的发送心跳的时间将在websocket发送数据时执行</p>
<h6 id="4-使用websock发送数据"><a href="#4-使用websock发送数据" class="headerlink" title="4.使用websock发送数据"></a>4.使用websock发送数据</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.connect = <span class="function"><span class="keyword">function</span>(<span class="params">isReconnect</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> _url = <span class="keyword">this</span>.url;</span><br><span class="line">		<span class="keyword">if</span> (isReconnect) &#123;</span><br><span class="line">			_url = <span class="keyword">this</span>.reconnUrl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(_url);</span><br><span class="line">			<span class="keyword">this</span>.ws = ws</span><br><span class="line">		&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"错误"</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ws.binaryType = <span class="keyword">this</span>.binaryType; <span class="comment">// 'arraybuffer'; // 'blob' or 'arraybuffer';//arraybuffer是字节</span></span><br><span class="line">		<span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">		ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">			self.handler.onopen.call(self.handler, event, ws)</span><br><span class="line">			self.lastInteractionTime(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">			self.pingIntervalId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">				self.ping(self)</span><br><span class="line">			&#125;, self.heartbeatSendInterval) <span class="comment">// 开启ws并设置心跳时间</span></span><br><span class="line">		&#125;</span><br><span class="line">		ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (event.data) &#123;</span><br><span class="line">				<span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(event.data)</span><br><span class="line">				<span class="built_in">console</span>.log(data);</span><br><span class="line">				<span class="keyword">if</span> (data.code != <span class="number">200</span>) &#123;</span><br><span class="line">					self.handler.onmessage.call(self.handler, data, ws)</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (data.code == <span class="number">401</span>) &#123;</span><br><span class="line">					clearInterval(self.pingIntervalId)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			self.lastInteractionTime(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">		&#125;</span><br><span class="line">		ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">			clearInterval(self.pingIntervalId) <span class="comment">// clear send heartbeat task</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				self.handler.onclose.call(self.handler, event, ws)</span><br><span class="line">			&#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//self.reconn(event)</span></span><br><span class="line">		&#125;</span><br><span class="line">		ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">			clearInterval(self.pingIntervalId)</span><br><span class="line">			self.handler.onerror.call(self.handler, event, ws)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> ws</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.reconn = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">var</span> ws = self.connect(<span class="literal">true</span>)</span><br><span class="line">			self.ws = ws</span><br><span class="line">		&#125;, self.reconnInterval)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.ping = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> iv = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - <span class="keyword">this</span>.lastInteractionTime(); <span class="comment">// 已经多久没发消息了</span></span><br><span class="line">		<span class="comment">// 单位：秒</span></span><br><span class="line">		<span class="keyword">if</span> ((<span class="keyword">this</span>.heartbeatSendInterval + iv) &gt;= <span class="keyword">this</span>.heartbeatTimeout) &#123;</span><br><span class="line">			<span class="keyword">this</span>.handler.ping(<span class="keyword">this</span>.ws)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.send = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.ws.send(data);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样,封装的一个websocket的方法就完成了,确保了数据传输的安全性和稳定性,虽然官方文档介绍websocket很粗略,但是数据传输确实需要考虑到很多方面</p>
<p>欢迎关注我的微信公众号一起学习前端知识</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g4x6ubiwbkj209k09kmx4.jpg" alt="公众号"></p>
<h4 id="5-参考文档"><a href="#5-参考文档" class="headerlink" title="5.参考文档"></a>5.参考文档</h4><ul>
<li><p><a href="https://www.runoob.com/html/html5-websocket.html" target="_blank" rel="noopener">HTML5websocket|菜鸟教程</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API" target="_blank" rel="noopener">MDN|websocketAPI</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API" target="_blank" rel="noopener">websockt自测网站|websocket.org</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>web前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>element-ui踩坑</title>
    <url>/2019/07/08/element-ui%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="element-ui踩坑"><a href="#element-ui踩坑" class="headerlink" title="element-ui踩坑"></a>element-ui踩坑</h1><h3 id="1-使用websocket给前端vuex中传值并将vuex中的值实时渲染到页面表格"><a href="#1-使用websocket给前端vuex中传值并将vuex中的值实时渲染到页面表格" class="headerlink" title="1.使用websocket给前端vuex中传值并将vuex中的值实时渲染到页面表格"></a>1.使用websocket给前端vuex中传值并将vuex中的值实时渲染到页面表格</h3><p>在element-ui中提供的表格样式中,默认以<code>:data=&quot;tableData&quot;</code>的形式传入表格数据,其中<code>tableData</code>在vue中以<code>data</code>函数的方式<code>return</code>出来,例如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    tableData: [&#123;</span><br><span class="line">      date: <span class="string">'2016-05-02'</span>,</span><br><span class="line">      name: <span class="string">'王小虎'</span>,</span><br><span class="line">      address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      date: <span class="string">'2016-05-04'</span>,</span><br><span class="line">      name: <span class="string">'王小虎'</span>,</span><br><span class="line">      address: <span class="string">'上海市普陀区金沙江路 1517 弄'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      date: <span class="string">'2016-05-01'</span>,</span><br><span class="line">      name: <span class="string">'王小虎'</span>,</span><br><span class="line">      address: <span class="string">'上海市普陀区金沙江路 1519 弄'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      date: <span class="string">'2016-05-03'</span>,</span><br><span class="line">      name: <span class="string">'王小虎'</span>,</span><br><span class="line">      address: <span class="string">'上海市普陀区金沙江路 1516 弄'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在要接受vuex中动态传入的值,则需要将vuex中值写入<code>computed</code>和<code>watch</code>中作为监听使用,例如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  listmsg() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.user.msg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">  listmsg(val, oldval) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tableData[<span class="number">0</span>].address = oldval[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.tableData[<span class="number">1</span>].address = oldval[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">this</span>.tableData[<span class="number">2</span>].address = oldval[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">this</span>.tableData[<span class="number">3</span>].address = oldval[<span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上,<code>computed</code>中接受了vuex中的<code>msg</code>值</p>
<p>注意:此处vuex写了模块user,所以要在state中拿值必须从<code>this.$store.state.user</code>拿值</p>
<p>然后用拿到的值,在<code>watch</code>中监听值得改变,进行实时的渲染</p>
<h3 id="2-使用element-ui中的表格斑马纹-边框"><a href="#2-使用element-ui中的表格斑马纹-边框" class="headerlink" title="2.使用element-ui中的表格斑马纹,边框"></a>2.使用element-ui中的表格斑马纹,边框</h3><p>由于在element-ui中使用表格元素会有默认的hover事件(放上去会变色)</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g4x6v4k3ftj20pm08wmx7.jpg" alt="1562572024136"></p>
<p>在这里可以看到,表格第一项触发了hover事件(鼠标截图时在第一行上面放着)</p>
<p>为了给表格添加斑马纹</p>
<p>在element-ui的官方文档中也给出了详细的说明:</p>
<p><code>stripe</code>属性可以创建带斑马纹的表格。它接受一个<code>Boolean</code>，默认为<code>false</code>，设置为<code>true</code>即为启用。</p>
<p>边框也是一样的</p>
<p>在element-ui中给表格添加边框:</p>
<p>默认情况下，Table 组件是不具有竖直方向的边框的，如果需要，可以使用<code>border</code>属性，它接受一个<code>Boolean</code>，设置为<code>true</code>即可启用。</p>
<h3 id="3-使用element-ui中的带状态表格栏"><a href="#3-使用element-ui中的带状态表格栏" class="headerlink" title="3.使用element-ui中的带状态表格栏"></a>3.使用element-ui中的带状态表格栏</h3><p>在使用element-ui中的带状态表格栏的时候,我觉得和斑马纹,边框对比起来应该是一样的,没有什么难度,然后我就根据官方文档将代码C+V进我的代码</p>
<p>官方文档:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-table</span><br><span class="line">    :data=<span class="string">"tableData"</span></span><br><span class="line">    style=<span class="string">"width: 100%"</span></span><br><span class="line">    :row-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=<span class="string">"tableRowClassName"</span>&gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      prop=<span class="string">"date"</span></span><br><span class="line">      label=<span class="string">"日期"</span></span><br><span class="line">      width=<span class="string">"180"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-table-column</span></span><br><span class="line"><span class="regexp">      prop="name"</span></span><br><span class="line"><span class="regexp">      label="姓名"</span></span><br><span class="line"><span class="regexp">      width="180"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-table-column&gt;</span><br><span class="line">    &lt;el-table-column</span><br><span class="line">      prop=<span class="string">"address"</span></span><br><span class="line">      label=<span class="string">"地址"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>el-table&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">  .el-table .warning-row &#123;</span></span><br><span class="line"><span class="regexp">    background: oldlace;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  .el-table .success-row &#123;</span></span><br><span class="line"><span class="regexp">    background: #f0f9eb;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      tableRowClassName(&#123;row, rowIndex&#125;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rowIndex === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'warning-row'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rowIndex === <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'success-row'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        tableData: [&#123;</span><br><span class="line">          date: <span class="string">'2016-05-02'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span>,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: <span class="string">'2016-05-04'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: <span class="string">'2016-05-01'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span>,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          date: <span class="string">'2016-05-03'</span>,</span><br><span class="line">          name: <span class="string">'王小虎'</span>,</span><br><span class="line">          address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>在methods中需要把逻辑写好</p>
<p>然而在使用了带状态表格栏后没有效果</p>
<p>谷歌的调试工具也没有报错</p>
<p>在网上找了一大圈后,找到解决方案:</p>
<h5 id="1-去除style中的scoped"><a href="#1-去除style中的scoped" class="headerlink" title="1.去除style中的scoped"></a>1.去除style中的scoped</h5><p>因为在element-ui中<code>row-class-name</code>、<code>row-style</code>、<code>cell-class-name</code>等属性要想生效必须使用全局class才能生效。因为之前的代码都是在组件中编写的，所以去除<code>&lt;style scoped&gt;&lt;/style&gt;</code>中的scoped即可该组件中的样式变为全局属性。</p>
<h5 id="2-去除斑马纹属性"><a href="#2-去除斑马纹属性" class="headerlink" title="2.去除斑马纹属性"></a>2.去除斑马纹属性</h5><p>在element-ui中,斑马纹属性与带状态表格栏属性冲突</p>
<p>即把<code>stripe</code>属性修改为<code>flase</code>,或者直接在表格标签中删除<code>stripe</code></p>
<p>即最后的的以websocket发送数据获取到的数据动态展现在vue搭建的前端框架的element-ui的表格中的代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      :data=<span class="string">"tableData"</span></span><br><span class="line">      style=<span class="string">"width: 100%"</span></span><br><span class="line">      border</span><br><span class="line">      v-loading=<span class="string">"loading"</span></span><br><span class="line">      :row-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=<span class="string">"tableRowClassName"</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column prop=<span class="string">"date"</span> label=<span class="string">"日期"</span> width=<span class="string">"180"</span>&gt;&lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-table-column prop="name" label="姓名" width="180"&gt;&lt;/</span>el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=<span class="string">"address"</span> label=<span class="string">"地址"</span>&gt;&lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-table&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">"/"</span>&gt;第一组数据&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import &#123; mapActions &#125; from "vuex"; /</span><span class="regexp">/ 引入vuex中各个模块的actions</span></span><br><span class="line"><span class="regexp">import &#123; mapState &#125; from "vuex";</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      tableData: [</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          date: "2016-05-02",</span></span><br><span class="line"><span class="regexp">          name: "王小虎",</span></span><br><span class="line"><span class="regexp">          address: "数据处理中"</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          date: "2016-05-04",</span></span><br><span class="line"><span class="regexp">          name: "王小虎",</span></span><br><span class="line"><span class="regexp">          address: "数据处理中"</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          date: "2016-05-01",</span></span><br><span class="line"><span class="regexp">          name: "王小虎",</span></span><br><span class="line"><span class="regexp">          address: "数据处理中"</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          date: "2016-05-03",</span></span><br><span class="line"><span class="regexp">          name: "王小虎",</span></span><br><span class="line"><span class="regexp">          address: "数据处理中"</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      ],</span></span><br><span class="line"><span class="regexp">      loading: true</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    ...mapActions(&#123; getmsg: "getmsg" &#125;),</span></span><br><span class="line"><span class="regexp">      tableRowClassName(&#123;row, rowIndex&#125;) &#123;</span></span><br><span class="line"><span class="regexp">        if (rowIndex === 1 &amp;&amp; this.tableData[1].address== "数据处理中") &#123;</span></span><br><span class="line"><span class="regexp">          return 'warning-row';</span></span><br><span class="line"><span class="regexp">        &#125; else if (rowIndex === 3) &#123;</span></span><br><span class="line"><span class="regexp">          return 'success-row';</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        return '';</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  computed: &#123;</span></span><br><span class="line"><span class="regexp">    listmsg() &#123;</span></span><br><span class="line"><span class="regexp">      return this.$store.state.user.msg;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  watch: &#123;</span></span><br><span class="line"><span class="regexp">    listmsg(val, oldval) &#123;</span></span><br><span class="line"><span class="regexp">      this.tableData[0].address = oldval[0];</span></span><br><span class="line"><span class="regexp">      this.tableData[1].address = oldval[1];</span></span><br><span class="line"><span class="regexp">      this.tableData[2].address = oldval[2];</span></span><br><span class="line"><span class="regexp">      this.tableData[3].address = oldval[3];</span></span><br><span class="line"><span class="regexp">      this.loading = false;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.el-table .warning-row &#123;</span><br><span class="line">  background: rgb(<span class="number">236</span>, <span class="number">145</span>, <span class="number">145</span>);</span><br><span class="line">&#125;</span><br><span class="line">.el-table .success-row &#123;</span><br><span class="line">  background: #f0f9eb;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure>

<p>数据为模拟数据,第四行变色为官方文档自带变色,第二行变色为我写的文档变色,我在此表格中加入了<code>loading</code>组件,意为数据尚未加载时先不触发</p>
<h3 id="完整表格效果图如下"><a href="#完整表格效果图如下" class="headerlink" title="完整表格效果图如下"></a>完整表格效果图如下</h3><p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g4x6vqhkklj20qj08iaa2.jpg" alt="1562572024136"></p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g4x6vyogyij20qh0bbq2y.jpg" alt="_blank"></p>
]]></content>
      <categories>
        <category>element-ui</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>web前端技术</tag>
        <tag>ui框架</tag>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>这几天工作中websocket踩坑</title>
    <url>/2019/07/05/%E8%BF%99%E5%87%A0%E5%A4%A9%E5%B7%A5%E4%BD%9C%E4%B8%ADwebsocket%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h3 id="1-websocket的资料整合"><a href="#1-websocket的资料整合" class="headerlink" title="1.websocket的资料整合"></a>1.websocket的资料整合</h3><h4 id="菜鸟教程"><a href="#菜鸟教程" class="headerlink" title="菜鸟教程"></a><a href="https://www.runoob.com/html/html5-websocket.html" target="_blank" rel="noopener">菜鸟教程</a></h4><p>关于websocket的比较官方的文档说明,适合新手查看,并且里面配有测试环境(python)</p>
<h4 id="websocket-org"><a href="#websocket-org" class="headerlink" title="websocket.org"></a><a href="http://www.websocket.org/echo.html" target="_blank" rel="noopener">websocket.org</a></h4><p>有关于websocket的测试和一些具体说明页面</p>
<h3 id="2-看完了解websocket原理-转载"><a href="#2-看完了解websocket原理-转载" class="headerlink" title="2.看完了解websocket原理(转载)"></a>2.看完了解websocket原理(转载)</h3><h5 id="1-websocket与http"><a href="#1-websocket与http" class="headerlink" title="1.websocket与http"></a>1.websocket与http</h5><p>WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）</p>
<p>首先HTTP有 1.1 和 1.0 之说，也就是所谓的 keep-alive ，把多个HTTP请求合并为一个，但是 Websocket 其实是一个新协议，跟HTTP协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，也就是说它是HTTP协议上的一种补充可以通过这样一张图理解</p>
<p><img src="http://ww1.sinaimg.cn/large/c596f419ly1g4x6zgqhdxj20ae03jjrf.jpg" alt="blnk"></p>
<p>有交集，但是并不是全部。</p>
<p>另外Html5是指的一系列新的API，或者说新规范，新技术。Http协议本身只有1.0和1.1，而且跟Html本身没有直接关系。。通俗来说，你可以用HTTP协议传输非Html数据，就是这样=。=</p>
<p>再简单来说，层级不一样。</p>
<h5 id="2-Websocket是什么样的协议，具体有什么优点"><a href="#2-Websocket是什么样的协议，具体有什么优点" class="headerlink" title="2.Websocket是什么样的协议，具体有什么优点"></a>2.Websocket是什么样的协议，具体有什么优点</h5><p>首先，Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说。简单的举个例子吧，用目前应用比较广泛的PHP生命周期来解释。</p>
<p>HTTP的生命周期通过 Request 来界定，也就是一个 Request 一个 Response ，那么在 HTTP1.0 中，这次HTTP请求就结束了。</p>
<p>在HTTP1.1中进行了改进，使得有一个keep-alive，也就是说，在一个HTTP连接中，可以发送多个Request，接收多个Response。但是请记住 Request = Response， 在HTTP中永远是这样，也就是说一个request只能有一个response。而且这个response也是被动的，不能主动发起。</p>
<p>教练，你BB了这么多，跟Websocket有什么关系呢？_(:з」∠)_好吧，我正准备说Websocket呢。。</p>
<p>首先Websocket是基于HTTP协议的，或者说借用了HTTP的协议来完成一部分握手。</p>
<p>首先我们来看个典型的 Websocket 握手（借用Wikipedia的。。）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /chat HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">Origin: &quot;http://example.com&quot;</span><br></pre></td></tr></table></figure>

<p>熟悉HTTP的童鞋可能发现了，这段类似HTTP协议的握手请求中，多了几个东西。我会顺便讲解下作用。</p>
<p>Upgrade: websocket<br>Connection: Upgrade<br>这个就是Websocket的核心了，告诉 Apache 、 Nginx 等服务器：注意啦，我发起的是Websocket协议，快点帮我找到对应的助理处理~不是那个老土的HTTP。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure>

<p>首先， Sec-WebSocket-Key 是一个 Base64 encode 的值，这个是浏览器随机生成的，告诉服务器：泥煤，不要忽悠窝，我要验证尼是不是真的是Websocket助理。</p>
<p>然后， Sec_WebSocket-Protocol 是一个用户定义的字符串，用来区分同URL下，不同的服务所需要的协议。简单理解：今晚我要服务A，别搞错啦~</p>
<p>最后， Sec-WebSocket-Version 是告诉服务器所使用的 Websocket Draft （协议版本），在最初的时候，Websocket协议还在 Draft 阶段，各种奇奇怪怪的协议都有，而且还有很多期奇奇怪怪不同的东西，什么Firefox和Chrome用的不是一个版本之类的，当初Websocket协议太多可是一个大难题。。不过现在还好，已经定下来啦<del>大家都使用的一个东西</del> 脱水： 服务员，我要的是13岁的噢→_→</p>
<p>然后服务器会返回下列东西，表示已经接受到请求， 成功建立Websocket啦！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=</span><br><span class="line">Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure>

<p>这里开始就是HTTP最后负责的区域了，告诉客户，我已经成功切换协议啦~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br></pre></td></tr></table></figure>

<p>依然是固定的，告诉客户端即将升级的是 Websocket 协议，而不是mozillasocket，lurnarsocket或者shitsocket。</p>
<p>然后， Sec-WebSocket-Accept 这个则是经过服务器确认，并且加密过后的 Sec-WebSocket-Key 。 服务器：好啦好啦，知道啦，给你看我的ID CARD来证明行了吧。。</p>
<p>后面的， Sec-WebSocket-Protocol 则是表示最终使用的协议。</p>
<p>至此，HTTP已经完成它所有工作了，接下来就是完全按照Websocket协议进行了。具体的协议就不在这阐述了。</p>
<p>——————技术解析部分完毕——————</p>
<p>你TMD又BBB了这么久，那到底Websocket有什么鬼用， http long poll ，或者ajax轮询 不都可以实现实时信息传递么。</p>
<p>好好好，年轻人，那我们来讲一讲Websocket有什么用。来给你吃点胡（苏）萝（丹）卜（红）</p>
<h5 id="3-Websocket的作用"><a href="#3-Websocket的作用" class="headerlink" title="3.Websocket的作用"></a>3.Websocket的作用</h5><p>在讲Websocket之前，我就顺带着讲下 long poll 和 ajax轮询 的原理。</p>
<p>ajax轮询<br>ajax轮询的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。</p>
<p>场景再现：</p>
<p>客户端：啦啦啦，有没有新信息(Request)</p>
<p>服务端：没有（Response）</p>
<p>客户端：啦啦啦，有没有新信息(Request)</p>
<p>服务端：没有。。（Response）</p>
<p>客户端：啦啦啦，有没有新信息(Request)</p>
<p>服务端：你好烦啊，没有啊。。（Response）</p>
<p>客户端：啦啦啦，有没有新消息（Request）</p>
<p>服务端：好啦好啦，有啦给你。（Response）</p>
<p>客户端：啦啦啦，有没有新消息（Request）</p>
<p>服务端：。。。。。没。。。。没。。。没有（Response） —- loop</p>
<p>long poll<br>long poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。</p>
<p>场景再现：</p>
<p>客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request）</p>
<p>服务端：额。。 等待到有消息的时候。。来 给你（Response）</p>
<p>客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request） -loop</p>
<p>从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，然后等待服务端处理，可以体现HTTP协议的另外一个特点，被动性。</p>
<p>何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。</p>
<p>简单地说就是，服务器是一个很懒的冰箱（这是个梗）（不会、不能主动发起连接），但是上司有命令，如果有客户来，不管多么累都要好好接待。</p>
<p>说完这个，我们再来说一说上面的缺陷（原谅我废话这么多吧OAQ）</p>
<p>从上面很容易看出来，不管怎么样，上面这两种都是非常消耗资源的。</p>
<p>ajax轮询 需要服务器有很快的处理速度和资源。（速度）long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）</p>
<p>所以 ajax轮询 和 long poll 都有可能发生这种情况。</p>
<p>客户端：啦啦啦啦，有新信息么？</p>
<p>服务端：月线正忙，请稍后再试（503 Server Unavailable）</p>
<p>客户端：。。。。好吧，啦啦啦，有新信息么？</p>
<p>服务端：月线正忙，请稍后再试（503 Server Unavailable）</p>
<p>客户端：然后服务端在一旁忙的要死：冰箱，我要更多的冰箱！更多。。更多。。（我错了。。这又是梗。。）</p>
<p>言归正传，我们来说Websocket吧<br>通过上面这个例子，我们可以看出，这两种方式都不是最好的方式，需要很多资源。</p>
<p>一种需要更快的速度，一种需要更多的’电话’。这两种都会导致’电话’的需求越来越高。</p>
<p>哦对了，忘记说了HTTP还是一个状态协议。</p>
<p>通俗的说就是，服务器因为每天要接待太多客户了，是个健忘鬼，你一挂电话，他就把你的东西全忘光了，把你的东西全丢掉了。你第二次还得再告诉服务器一遍。</p>
<p>所以在这种情况下出现了，Websocket出现了。他解决了HTTP的这几个难题。首先，被动性，当服务器完成协议升级后（HTTP-&gt;Websocket），服务端就可以主动推送信息给客户端啦。所以上面的情景可以做如下修改。</p>
<p>客户端：啦啦啦，我要建立Websocket协议，需要的服务：chat，Websocket协议版本：17（HTTP Request）</p>
<p>服务端：ok，确认，已升级为Websocket协议（HTTP Protocols Switched）</p>
<p>客户端：麻烦你有信息的时候推送给我噢。。</p>
<p>服务端：ok，有的时候会告诉你的。</p>
<p>服务端：balabalabalabala</p>
<p>服务端：balabalabalabala</p>
<p>服务端：哈哈哈哈哈啊哈哈哈哈</p>
<p>服务端：笑死我了哈哈哈哈哈哈哈</p>
<p>就变成了这样，只需要经过一次HTTP请求，就可以做到源源不断的信息传送了。（在程序设计中，这种设计叫做回调，即：你有信息了再来通知我，而不是我傻乎乎的每次跑来问你 ）</p>
<p>这样的协议解决了上面同步有延迟，而且还非常消耗资源的这种情况。那么为什么他会解决服务器上消耗资源的问题呢？</p>
<p>其实我们所用的程序是要经过两层代理的，即HTTP协议在Nginx等服务器的解析下，然后再传送给相应的Handler（PHP等）来处理。简单地说，我们有一个非常快速的 接线员（Nginx） ，他负责把问题转交给相应的 客服（Handler） 。</p>
<p>本身接线员基本上速度是足够的，但是每次都卡在客服（Handler）了，老有客服处理速度太慢。，导致客服不够。Websocket就解决了这样一个难题，建立后，可以直接跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员在统一转交给客户。</p>
<p>这样就可以解决客服处理速度过慢的问题了。</p>
<p>同时，在传统的方式上，要不断的建立，关闭HTTP协议，由于HTTP是非状态性的，每次都要重新传输 identity info （鉴别信息），来告诉服务端你是谁。</p>
<p>虽然接线员很快速，但是每次都要听这么一堆，效率也会有所下降的，同时还得不断把这些信息转交给客服，不但浪费客服的处理时间，而且还会在网路传输中消耗过多的流量/时间。</p>
<p>但是Websocket只需要一次HTTP握手，所以说整个通讯过程是建立在一次连接/状态中，也就避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。</p>
<p>同时由客户主动询问，转换为服务器（推送）有信息的时候就发送（当然客户端还是等主动发送信息过来的。。），没有信息的时候就交给接线员（Nginx），不需要占用本身速度就慢的客服（Handler）了</p>
<p>——————–</p>
<p>至于怎么在不支持Websocket的客户端上使用Websocket。。答案是： 不能</p>
<p>但是可以通过上面说的 long poll 和 ajax 轮询 来 模拟出类似的效果<br>内容转自知乎：<a href="http://www.zhihu.com/question/20215561" target="_blank" rel="noopener">http://www.zhihu.com/question/20215561</a></p>
]]></content>
      <categories>
        <category>web前端技术</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>前端Web开发资源整理</title>
    <url>/2019/07/04/%E5%89%8D%E7%AB%AFWeb%E5%BC%80%E5%8F%91%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h4>1）想开发项目，哪里找教程？</h4>
<h4>2）关于前端的有趣网站</h4>

<h5>一、前端项目哪里找？</h5>

<p>前端的入门教程网上很多，只要你搜索呼啦啦就出来了，因此啊，就不整理了。主要整理一下，哪里可以找到前端项目，就是有源代码的，可以拿来学习或者拿来用的。</p>
<p>没有详细的教程，但可以找到项目并查看源代码和效果图：<br><br>1、<a href="https://link.zhihu.com/?target=http%3A//codepen.io/" target="_blank" rel="noopener">CodePen</a><br><img src="https://pic1.zhimg.com/80/v2-0738b819523d78508ec1aedef74c9788_hd.png" alt="blockchain"></p>
<p>网站里有很多很酷的特效，而且看到它们的源代码，也可以看到效果图。</p>
<p>其实类似的网站有很多，就不一一介绍了：</p>
<ul>
<li>[RunJS](https://link.zhihu.com/?target=http%3A//runjs.cn/square)</li>
<li>[CSSdeck](https://link.zhihu.com/?target=http%3A//cssdeck.com/)</li>
</ul>
2、 [CodePlayer](https://link.zhihu.com/?target=http%3A//thecodeplayer.com/)

<p><img src="https://pic2.zhimg.com/80/v2-eac21e2b09cc78ec2a85e03d5d08b479_hd.png" alt="blockchain"></p>
<p>网站里有各种项目效果，选择自己想学的，同样可以看到源代码和效果图，和codepen不同的是你可以看到作者是怎样把代码打出来的。</p>
<p>3、<a href="https://link.zhihu.com/?target=http%3A//www.html5tricks.com/" target="_blank" rel="noopener">html5tricks</a></p>
<p><img src="https://pic4.zhimg.com/80/v2-6458e2ebef631461ec53c22d7445dcbb_hd.png" alt="blockchain"><br>网站里有很多前端实现的功能，可以在线查看效果，也可以下载源码的。</p>
<p>有详细的教程，而且步骤详细，教你一步步开发出项目：<br><br>4、<a href="https://link.zhihu.com/?target=http%3A//ideabook.phodal.com/" target="_blank" rel="noopener">phodal/ideabook</a></p>
<p><img src="https://pic1.zhimg.com/80/v2-958230ef01e5da535fd4c422e98d7a54_hd.png" alt="blockchain"><br>一个练手项目集，有很多实战项目，有步骤、效果图，同样可以看到源代码啊。</p>
<p>5、<a href="https://link.zhihu.com/?target=https%3A//www.shiyanlou.com/courses/%3Fcourse_type%3Dall%26tag%3DWeb" target="_blank" rel="noopener">实验楼-WEB</a><br><img src="https://pic4.zhimg.com/80/v2-a3100fbbb4c3c8364f3394893c2f5cbf_hd.png" alt="blockchain"><br>网站里有很多前端项目教程，可以跟着教程一步步在环境中实现，并查看效果图，同样可以下载源代码，非常适合项目实战学习。</p>
<h5>二、前端有趣的网站：</h5>

<p>1、<a href="https://link.zhihu.com/?target=http%3A//js1k.com/" target="_blank" rel="noopener">JS1k</a><br><img src="https://pic2.zhimg.com/80/v2-6973cd4efe7e9e43faa0a62754f4696d_hd.png" alt="blockchain"><br>大名鼎鼎的js1K，1K字节以内的Javascript代码，实现一个酷炫的动画、特效、小游戏之类的。官网从2010年开始征集参赛作品，现在已经办了７年了，还在办。</p>
<p>2、<a href="https://link.zhihu.com/?target=http%3A//caniuse.com/" target="_blank" rel="noopener">Can I use</a><br><img src="https://pic3.zhimg.com/80/v2-9a8e98db47a309980e68bb69673fca4a_hd.png" alt="blockchain"><br>CAN I USE，相信每个前端同学都不陌生，查询浏览器兼容性的利器。</p>
<p>3、<a href="https://link.zhihu.com/?target=http%3A//www.jshint.com/" target="_blank" rel="noopener">JSHint</a><br><img src="https://pic4.zhimg.com/80/v2-ed0f076adbad1a8adf5461d00ac41b3b_hd.png" alt="blockchain"><br>一个在线JS检测工具，可以检测JavaScript代码中的错误和潜在问题。</p>
<p>4、<a href="https://link.zhihu.com/?target=http%3A//utf-8.jp/public/aaencode.html" target="_blank" rel="noopener">aaencode</a><br><img src="https://pic4.zhimg.com/80/v2-004af7196ee38380cd4da9bcb39a7adb_hd.png" alt="blockchain"><br>将JS代码转换成常用的网络表情，例如“(ﾟΘﾟ)”。转换的代码并不复杂，可以在源代码里看到。</p>
<p>类似的还有：</p>
<p><a href="https://link.zhihu.com/?target=http%3A//jsobfuscate.com/" target="_blank" rel="noopener">jsobfuscate</a><br><img src="https://pic2.zhimg.com/80/v2-fac2f73d6aba751ce4dad9f0899067e9_hd.png" alt="blockchain"><br>一个在线混淆工具，通过先进的算法，来混淆你的JavaScript代码，使其不可读。该工具还可以减小文件的大小，以便快速加载。 </p>
<p>5、<a href="https://link.zhihu.com/?target=http%3A//www.bestcssbuttongenerator.com/" target="_blank" rel="noopener">Best CSS Button Generator</a><br><img src="https://pic3.zhimg.com/80/v2-0d7dd74ac4cc5a8c1c7b255314e5caa6_hd.png" alt="blockchain"><br>网站主要提供各种按钮的CSS代码，你可以从预设的按钮中选择并使用模板用于自己的设计，还可以查看源代码，非常适合学习。</p>
<p>还有一个类似的：</p>
<p><a href="https://link.zhihu.com/?target=http%3A//enjoycss.com/" target="_blank" rel="noopener">Enjoy CSS</a><br><br><br><br><img src="https://pic4.zhimg.com/80/v2-fee0381436d015f1723130f3e3406fef_hd.png" alt="blockchain"></p>
<p>网站是一个完整的代码生成器，可以自定义输入域或CSS3按钮，同样可以查看源代码，适合学习。</p>
<p>6、<a href="https://link.zhihu.com/?target=http%3A//www.blooberry.com/indexdot/css/propindex/all.htm" target="_blank" rel="noopener">CSS属性指引</a><br><br><br><br><img src="https://pic3.zhimg.com/80/v2-cb485f0f0334ef004496a2aef996bcee_hd.png" alt="blockchain"></p>
<p>一份清单，按字母表顺序列出了每个CSS属性。</p>
<p>7、<a href="https://link.zhihu.com/?target=https%3A//uptodate.frontendrescue.org/" target="_blank" rel="noopener">frontendrescue</a><br><br><br><br><img src="https://pic1.zhimg.com/80/v2-f1cf27510385bf12a341c76340f19958_hd.png" alt="blockchain"></p>
<p>里面分享了网络上关于前端的各种资源、大牛等信息，总之很多资源就对了。</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>web前端资源</tag>
      </tags>
  </entry>
</search>
